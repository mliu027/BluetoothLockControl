
BluetoothLockControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00000c64  00000cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  008001fa  008001fa  00000df2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000109e  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036b  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ed8  00000000  00000000  00002343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000677  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f9b  00000000  00000000  00003b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
   a:	00 00       	nop
   c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
  12:	00 00       	nop
  14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
  1a:	00 00       	nop
  1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
  1e:	00 00       	nop
  20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
  2a:	00 00       	nop
  2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
  32:	00 00       	nop
  34:	e8 c4       	rjmp	.+2512   	; 0xa06 <__vector_13>
  36:	00 00       	nop
  38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
  3a:	00 00       	nop
  3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
  3e:	00 00       	nop
  40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
  42:	00 00       	nop
  44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
  46:	00 00       	nop
  48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
  4a:	00 00       	nop
  4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
  4e:	00 00       	nop
  50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
  52:	00 00       	nop
  54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
  56:	00 00       	nop
  58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
  5e:	00 00       	nop
  60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
  66:	00 00       	nop
  68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
  6a:	00 00       	nop
  6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
  6e:	00 00       	nop
  70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
  72:	00 00       	nop
  74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
  76:	00 00       	nop
  78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
  7e:	00 00       	nop
  80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
  82:	00 00       	nop
  84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
  86:	00 00       	nop
  88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2c 03       	fmul	r18, r20
  8e:	3a 03       	fmul	r19, r18
  90:	8b 03       	fmulsu	r16, r19
  92:	60 03       	mulsu	r22, r16
  94:	aa 03       	fmulsu	r18, r18
  96:	fc 03       	fmulsu	r23, r20
  98:	dc 03       	fmulsu	r21, r20
  9a:	11 04       	cpc	r1, r1
  9c:	2b 04       	cpc	r2, r11
  9e:	3b 04       	cpc	r3, r11
  a0:	44 04       	cpc	r4, r4
  a2:	54 04       	cpc	r5, r4

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d0 e4       	ldi	r29, 0x40	; 64
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e4 e6       	ldi	r30, 0x64	; 100
  b8:	fc e0       	ldi	r31, 0x0C	; 12
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	aa 3f       	cpi	r26, 0xFA	; 250
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	aa ef       	ldi	r26, 0xFA	; 250
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a9 36       	cpi	r26, 0x69	; 105
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	f8 d4       	rcall	.+2544   	; 0xacc <main>
  dc:	c1 c5       	rjmp	.+2946   	; 0xc60 <_exit>

000000de <__bad_interrupt>:
  de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <GetKeypadKey>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  e0:	8f ee       	ldi	r24, 0xEF	; 239
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	00 00       	nop
  e6:	18 9b       	sbis	0x03, 0	; 3
  e8:	45 c0       	rjmp	.+138    	; 0x174 <GetKeypadKey+0x94>
  ea:	83 b1       	in	r24, 0x03	; 3
  ec:	80 95       	com	r24
  ee:	81 fd       	sbrc	r24, 1
  f0:	43 c0       	rjmp	.+134    	; 0x178 <GetKeypadKey+0x98>
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	80 95       	com	r24
  f6:	82 fd       	sbrc	r24, 2
  f8:	41 c0       	rjmp	.+130    	; 0x17c <GetKeypadKey+0x9c>
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	80 95       	com	r24
  fe:	83 fd       	sbrc	r24, 3
 100:	3f c0       	rjmp	.+126    	; 0x180 <GetKeypadKey+0xa0>
 102:	8f ed       	ldi	r24, 0xDF	; 223
 104:	85 b9       	out	0x05, r24	; 5
 106:	00 00       	nop
 108:	18 9b       	sbis	0x03, 0	; 3
 10a:	3c c0       	rjmp	.+120    	; 0x184 <GetKeypadKey+0xa4>
 10c:	83 b1       	in	r24, 0x03	; 3
 10e:	80 95       	com	r24
 110:	81 fd       	sbrc	r24, 1
 112:	3a c0       	rjmp	.+116    	; 0x188 <GetKeypadKey+0xa8>
 114:	83 b1       	in	r24, 0x03	; 3
 116:	80 95       	com	r24
 118:	82 fd       	sbrc	r24, 2
 11a:	38 c0       	rjmp	.+112    	; 0x18c <GetKeypadKey+0xac>
 11c:	83 b1       	in	r24, 0x03	; 3
 11e:	80 95       	com	r24
 120:	83 fd       	sbrc	r24, 3
 122:	36 c0       	rjmp	.+108    	; 0x190 <GetKeypadKey+0xb0>
 124:	8f eb       	ldi	r24, 0xBF	; 191
 126:	85 b9       	out	0x05, r24	; 5
 128:	00 00       	nop
 12a:	18 9b       	sbis	0x03, 0	; 3
 12c:	33 c0       	rjmp	.+102    	; 0x194 <GetKeypadKey+0xb4>
 12e:	83 b1       	in	r24, 0x03	; 3
 130:	80 95       	com	r24
 132:	81 fd       	sbrc	r24, 1
 134:	31 c0       	rjmp	.+98     	; 0x198 <GetKeypadKey+0xb8>
 136:	83 b1       	in	r24, 0x03	; 3
 138:	80 95       	com	r24
 13a:	82 fd       	sbrc	r24, 2
 13c:	2f c0       	rjmp	.+94     	; 0x19c <GetKeypadKey+0xbc>
 13e:	83 b1       	in	r24, 0x03	; 3
 140:	80 95       	com	r24
 142:	83 fd       	sbrc	r24, 3
 144:	2d c0       	rjmp	.+90     	; 0x1a0 <GetKeypadKey+0xc0>
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	85 b9       	out	0x05, r24	; 5
 14a:	00 00       	nop
 14c:	93 b1       	in	r25, 0x03	; 3
 14e:	90 95       	com	r25
 150:	89 2f       	mov	r24, r25
 152:	81 70       	andi	r24, 0x01	; 1
 154:	90 fd       	sbrc	r25, 0
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <GetKeypadKey+0xc4>
 158:	93 b1       	in	r25, 0x03	; 3
 15a:	90 95       	com	r25
 15c:	91 fd       	sbrc	r25, 1
 15e:	24 c0       	rjmp	.+72     	; 0x1a8 <GetKeypadKey+0xc8>
 160:	93 b1       	in	r25, 0x03	; 3
 162:	90 95       	com	r25
 164:	92 fd       	sbrc	r25, 2
 166:	22 c0       	rjmp	.+68     	; 0x1ac <GetKeypadKey+0xcc>
 168:	93 b1       	in	r25, 0x03	; 3
 16a:	90 95       	com	r25
 16c:	93 ff       	sbrs	r25, 3
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <GetKeypadKey+0xce>
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	08 95       	ret
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	08 95       	ret
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	08 95       	ret
 17c:	87 e3       	ldi	r24, 0x37	; 55
 17e:	08 95       	ret
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	08 95       	ret
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	08 95       	ret
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	08 95       	ret
 18c:	88 e3       	ldi	r24, 0x38	; 56
 18e:	08 95       	ret
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	08 95       	ret
 198:	86 e3       	ldi	r24, 0x36	; 54
 19a:	08 95       	ret
 19c:	89 e3       	ldi	r24, 0x39	; 57
 19e:	08 95       	ret
 1a0:	83 e2       	ldi	r24, 0x23	; 35
 1a2:	08 95       	ret
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	08 95       	ret
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	08 95       	ret
 1ac:	83 e4       	ldi	r24, 0x43	; 67
 1ae:	08 95       	ret

000001b0 <TimerOn>:
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	80 93 81 00 	sts	0x0081, r24
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 6f 00 	sts	0x006F, r24
 1bc:	8f b7       	in	r24, 0x3f	; 63
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8f bf       	out	0x3f, r24	; 63
 1c2:	08 95       	ret

000001c4 <delay_ms>:
 1c4:	18 16       	cp	r1, r24
 1c6:	19 06       	cpc	r1, r25
 1c8:	9c f4       	brge	.+38     	; 0x1f0 <delay_ms+0x2c>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	77 e0       	ldi	r23, 0x07	; 7
 1d0:	63 e0       	ldi	r22, 0x03	; 3
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <delay_ms+0x26>
 1d4:	00 00       	nop
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1
 1da:	21 15       	cp	r18, r1
 1dc:	31 05       	cpc	r19, r1
 1de:	d1 f7       	brne	.-12     	; 0x1d4 <delay_ms+0x10>
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	48 17       	cp	r20, r24
 1e6:	59 07       	cpc	r21, r25
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <delay_ms+0x2c>
 1ea:	27 2f       	mov	r18, r23
 1ec:	36 2f       	mov	r19, r22
 1ee:	f2 cf       	rjmp	.-28     	; 0x1d4 <delay_ms+0x10>
 1f0:	08 95       	ret

000001f2 <LCD_WriteCommand>:
 1f2:	16 98       	cbi	0x02, 6	; 2
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	17 9a       	sbi	0x02, 7	; 2
 1f8:	00 00       	nop
 1fa:	17 98       	cbi	0x02, 7	; 2
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e1 cf       	rjmp	.-62     	; 0x1c4 <delay_ms>
 202:	08 95       	ret

00000204 <LCD_ClearScreen>:
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	f5 cf       	rjmp	.-22     	; 0x1f2 <LCD_WriteCommand>
 208:	08 95       	ret

0000020a <LCD_Cursor>:
 20a:	81 31       	cpi	r24, 0x11	; 17
 20c:	18 f4       	brcc	.+6      	; 0x214 <LCD_Cursor+0xa>
 20e:	81 58       	subi	r24, 0x81	; 129
 210:	f0 cf       	rjmp	.-32     	; 0x1f2 <LCD_WriteCommand>
 212:	08 95       	ret
 214:	81 55       	subi	r24, 0x51	; 81
 216:	ed cf       	rjmp	.-38     	; 0x1f2 <LCD_WriteCommand>
 218:	08 95       	ret

0000021a <LCD_init>:
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	d2 df       	rcall	.-92     	; 0x1c4 <delay_ms>
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	e7 df       	rcall	.-50     	; 0x1f2 <LCD_WriteCommand>
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	e5 df       	rcall	.-54     	; 0x1f2 <LCD_WriteCommand>
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	e3 df       	rcall	.-58     	; 0x1f2 <LCD_WriteCommand>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	e1 df       	rcall	.-62     	; 0x1f2 <LCD_WriteCommand>
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	c7 cf       	rjmp	.-114    	; 0x1c4 <delay_ms>
 236:	08 95       	ret

00000238 <LCD_WriteData>:
 238:	16 9a       	sbi	0x02, 6	; 2
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	17 9a       	sbi	0x02, 7	; 2
 23e:	00 00       	nop
 240:	17 98       	cbi	0x02, 7	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	be cf       	rjmp	.-132    	; 0x1c4 <delay_ms>
 248:	08 95       	ret

0000024a <LCD_DisplayString>:
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	18 2f       	mov	r17, r24
 254:	eb 01       	movw	r28, r22
 256:	d6 df       	rcall	.-84     	; 0x204 <LCD_ClearScreen>
 258:	88 81       	ld	r24, Y
 25a:	88 23       	and	r24, r24
 25c:	59 f0       	breq	.+22     	; 0x274 <LCD_DisplayString+0x2a>
 25e:	01 e0       	ldi	r16, 0x01	; 1
 260:	01 0f       	add	r16, r17
 262:	81 2f       	mov	r24, r17
 264:	d2 df       	rcall	.-92     	; 0x20a <LCD_Cursor>
 266:	89 91       	ld	r24, Y+
 268:	e7 df       	rcall	.-50     	; 0x238 <LCD_WriteData>
 26a:	88 81       	ld	r24, Y
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <LCD_DisplayString+0x2a>
 270:	10 2f       	mov	r17, r16
 272:	f5 cf       	rjmp	.-22     	; 0x25e <LCD_DisplayString+0x14>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <initUSART>:
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	81 f0       	breq	.+32     	; 0x2a2 <initUSART+0x24>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
 28c:	e2 ec       	ldi	r30, 0xC2	; 194
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	86 60       	ori	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
 296:	87 e6       	ldi	r24, 0x67	; 103
 298:	80 93 c4 00 	sts	0x00C4, r24
 29c:	10 92 c5 00 	sts	0x00C5, r1
 2a0:	08 95       	ret
 2a2:	e9 ec       	ldi	r30, 0xC9	; 201
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	80 83       	st	Z, r24
 2ac:	ea ec       	ldi	r30, 0xCA	; 202
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	80 83       	st	Z, r24
 2b6:	87 e6       	ldi	r24, 0x67	; 103
 2b8:	80 93 cc 00 	sts	0x00CC, r24
 2bc:	10 92 cd 00 	sts	0x00CD, r1
 2c0:	08 95       	ret

000002c2 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	80 91 c8 00 	lds	r24, 0x00C8
 2ca:	88 23       	and	r24, r24
 2cc:	84 f0       	brlt	.+32     	; 0x2ee <USART_Flush+0x2c>
 2ce:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	88 23       	and	r24, r24
 2d6:	ac f4       	brge	.+42     	; 0x302 <USART_Flush+0x40>
 2d8:	a6 ec       	ldi	r26, 0xC6	; 198
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 93 fa 01 	sts	0x01FA, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	d4 f3       	brlt	.-12     	; 0x2e0 <USART_Flush+0x1e>
 2ec:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2ee:	ae ec       	ldi	r26, 0xCE	; 206
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e8 ec       	ldi	r30, 0xC8	; 200
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8c 91       	ld	r24, X
 2f8:	80 93 fa 01 	sts	0x01FA, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	d4 f3       	brlt	.-12     	; 0x2f6 <USART_Flush+0x34>
 302:	08 95       	ret

00000304 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 308:	e0 ec       	ldi	r30, 0xC0	; 192
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	90 81       	ld	r25, Z
 30e:	95 ff       	sbrs	r25, 5
 310:	fd cf       	rjmp	.-6      	; 0x30c <USART_Send+0x8>
		UDR0 = sendMe;
 312:	80 93 c6 00 	sts	0x00C6, r24
 316:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 318:	e8 ec       	ldi	r30, 0xC8	; 200
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	95 ff       	sbrs	r25, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <USART_Send+0x18>
		UDR1 = sendMe;
 322:	80 93 ce 00 	sts	0x00CE, r24
 326:	08 95       	ret

00000328 <TickFct_USART>:
	return state;
}

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	switch(state){
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	91 05       	cpc	r25, r1
 32c:	59 f0       	breq	.+22     	; 0x344 <TickFct_USART+0x1c>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	91 05       	cpc	r25, r1
 332:	e9 f0       	breq	.+58     	; 0x36e <TickFct_USART+0x46>
 334:	89 2b       	or	r24, r25
 336:	81 f5       	brne	.+96     	; 0x398 <TickFct_USART+0x70>
		case usartInit:
			state = usartLocked;
			USART_Send(0x01, 1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	e3 df       	rcall	.-58     	; 0x304 <USART_Send>

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	switch(state){
		case usartInit:
			state = usartLocked;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
			USART_Send(0x01, 1);
			break;
 342:	08 95       	ret
		case usartLocked:
			if(lockedFlag){
 344:	20 91 fe 01 	lds	r18, 0x01FE
 348:	21 11       	cpse	r18, r1
 34a:	28 c0       	rjmp	.+80     	; 0x39c <TickFct_USART+0x74>
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
				USART_Send(0x00, 1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	d9 df       	rcall	.-78     	; 0x304 <USART_Send>
				LCD_DisplayString(1, "Unlocking...");
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	78 df       	rcall	.-272    	; 0x24a <LCD_DisplayString>
				delay_ms(5000);
 35a:	88 e8       	ldi	r24, 0x88	; 136
 35c:	93 e1       	ldi	r25, 0x13	; 19
 35e:	32 df       	rcall	.-412    	; 0x1c4 <delay_ms>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
 360:	6d e0       	ldi	r22, 0x0D	; 13
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	71 df       	rcall	.-286    	; 0x24a <LCD_DisplayString>
		case usartLocked:
			if(lockedFlag){
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret
				delay_ms(5000);
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
 36e:	20 91 fe 01 	lds	r18, 0x01FE
 372:	22 23       	and	r18, r18
 374:	99 f0       	breq	.+38     	; 0x39c <TickFct_USART+0x74>
				state = usartLocked;
				USART_Send(0x01, 1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	c4 df       	rcall	.-120    	; 0x304 <USART_Send>
				LCD_DisplayString(1, "Locking...");
 37c:	6d e2       	ldi	r22, 0x2D	; 45
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	63 df       	rcall	.-314    	; 0x24a <LCD_DisplayString>
				delay_ms(5000);
 384:	88 e8       	ldi	r24, 0x88	; 136
 386:	93 e1       	ldi	r25, 0x13	; 19
 388:	1d df       	rcall	.-454    	; 0x1c4 <delay_ms>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 38a:	68 e3       	ldi	r22, 0x38	; 56
 38c:	71 e0       	ldi	r23, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	5c df       	rcall	.-328    	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
				state = usartLocked;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	08 95       	ret
			else{
				state = usartUnlocked;
			}
			break;
		default:
			state = usartInit;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	return state;
}
 39c:	08 95       	ret

0000039e <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	41 f0       	breq	.+16     	; 0x3b2 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 3a2:	e0 ec       	ldi	r30, 0xC0	; 192
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	ec f7       	brge	.-6      	; 0x3a6 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 3ac:	80 91 c6 00 	lds	r24, 0x00C6
 3b0:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 3b2:	e8 ec       	ldi	r30, 0xC8	; 200
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	88 23       	and	r24, r24
 3ba:	ec f7       	brge	.-6      	; 0x3b6 <USART_Receive+0x18>
		return UDR1;
 3bc:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 3c0:	08 95       	ret

000003c2 <clearInputPin>:
unsigned char pinInputComplete;
//---------------Flags---------------


void clearInputPin()						//clears the Character Array for Input Pin
{
 3c2:	e1 e5       	ldi	r30, 0x51	; 81
 3c4:	f2 e0       	ldi	r31, 0x02	; 2
 3c6:	89 e5       	ldi	r24, 0x59	; 89
 3c8:	92 e0       	ldi	r25, 0x02	; 2
	for(unsigned char i = 0; i < 8; ++i){
		inputPin[i] = '\0';
 3ca:	11 92       	st	Z+, r1
//---------------Flags---------------


void clearInputPin()						//clears the Character Array for Input Pin
{
	for(unsigned char i = 0; i < 8; ++i){
 3cc:	e8 17       	cp	r30, r24
 3ce:	f9 07       	cpc	r31, r25
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <clearInputPin+0x8>
		inputPin[i] = '\0';
	}
}
 3d2:	08 95       	ret

000003d4 <TickFct_BluetoothReceiver>:
	}
	return state;
}

enum SM_BluetoothReceiver{bluetoothWait, bluetoothReceived, bluetoothWaitForNext};
int TickFct_BluetoothReceiver(int state){
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ec 01       	movw	r28, r24
	switch(state){
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	91 05       	cpc	r25, r1
 3de:	01 f1       	breq	.+64     	; 0x420 <TickFct_BluetoothReceiver+0x4c>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	91 05       	cpc	r25, r1
 3e4:	41 f1       	breq	.+80     	; 0x436 <TickFct_BluetoothReceiver+0x62>
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	09 f0       	breq	.+2      	; 0x3ec <TickFct_BluetoothReceiver+0x18>
 3ea:	4e c0       	rjmp	.+156    	; 0x488 <TickFct_BluetoothReceiver+0xb4>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 3ec:	80 91 c0 00 	lds	r24, 0x00C0
		case bluetoothWait:
			if(USART_HasReceived(0) && !bluetoothEnable){
 3f0:	88 23       	and	r24, r24
 3f2:	34 f4       	brge	.+12     	; 0x400 <TickFct_BluetoothReceiver+0x2c>
 3f4:	80 91 40 02 	lds	r24, 0x0240
 3f8:	81 11       	cpse	r24, r1
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <TickFct_BluetoothReceiver+0x2c>
				USART_Flush(0);
 3fc:	62 df       	rcall	.-316    	; 0x2c2 <USART_Flush>
				state = bluetoothWait;
 3fe:	52 c0       	rjmp	.+164    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
 400:	80 91 c0 00 	lds	r24, 0x00C0
			}
			else if(USART_HasReceived(0) && bluetoothEnable){
 404:	88 23       	and	r24, r24
 406:	0c f0       	brlt	.+2      	; 0x40a <TickFct_BluetoothReceiver+0x36>
 408:	4d c0       	rjmp	.+154    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
 40a:	80 91 40 02 	lds	r24, 0x0240
 40e:	88 23       	and	r24, r24
 410:	09 f4       	brne	.+2      	; 0x414 <TickFct_BluetoothReceiver+0x40>
 412:	48 c0       	rjmp	.+144    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothReceived;
				position = 0;
 414:	10 92 3c 02 	sts	0x023C, r1
				lastReceivedChar = 0;
 418:	10 92 66 02 	sts	0x0266, r1
				clearInputPin();
 41c:	d2 df       	rcall	.-92     	; 0x3c2 <clearInputPin>
 41e:	40 c0       	rjmp	.+128    	; 0x4a0 <TickFct_BluetoothReceiver+0xcc>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
 420:	80 91 40 02 	lds	r24, 0x0240
 424:	88 23       	and	r24, r24
 426:	99 f1       	breq	.+102    	; 0x48e <TickFct_BluetoothReceiver+0xba>
				state = bluetoothWait;
			}
			else if(lastReceivedChar != '*'){
 428:	80 91 66 02 	lds	r24, 0x0266
 42c:	8a 32       	cpi	r24, 0x2A	; 42
 42e:	91 f1       	breq	.+100    	; 0x494 <TickFct_BluetoothReceiver+0xc0>
				state = bluetoothWaitForNext;
 430:	c2 e0       	ldi	r28, 0x02	; 2
 432:	d0 e0       	ldi	r29, 0x00	; 0
 434:	37 c0       	rjmp	.+110    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
 436:	80 91 40 02 	lds	r24, 0x0240
 43a:	88 23       	and	r24, r24
 43c:	71 f1       	breq	.+92     	; 0x49a <TickFct_BluetoothReceiver+0xc6>
 43e:	80 91 c0 00 	lds	r24, 0x00C0
				state = bluetoothWait;
			}
			else if(!USART_HasReceived(0)){
 442:	88 23       	and	r24, r24
 444:	7c f5       	brge	.+94     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
 446:	2c c0       	rjmp	.+88     	; 0x4a0 <TickFct_BluetoothReceiver+0xcc>
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
				lastReceivedChar = USART_Receive(0);
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	a9 df       	rcall	.-174    	; 0x39e <USART_Receive>
 44c:	80 93 66 02 	sts	0x0266, r24
				if(lastReceivedChar != '*'){
 450:	8a 32       	cpi	r24, 0x2A	; 42
 452:	59 f0       	breq	.+22     	; 0x46a <TickFct_BluetoothReceiver+0x96>
					inputPin[position++] = lastReceivedChar;
 454:	e0 91 3c 02 	lds	r30, 0x023C
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	9e 0f       	add	r25, r30
 45c:	90 93 3c 02 	sts	0x023C, r25
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	ef 5a       	subi	r30, 0xAF	; 175
 464:	fd 4f       	sbci	r31, 0xFD	; 253
 466:	80 83       	st	Z, r24
 468:	08 c0       	rjmp	.+16     	; 0x47a <TickFct_BluetoothReceiver+0xa6>
				}
				else{
					inputPin[position] = '\0';
 46a:	e0 91 3c 02 	lds	r30, 0x023C
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	ef 5a       	subi	r30, 0xAF	; 175
 472:	fd 4f       	sbci	r31, 0xFD	; 253
 474:	10 82       	st	Z, r1
					pinInputComplete = 1;
 476:	c0 93 3f 02 	sts	0x023F, r28
	}
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
 47a:	80 91 66 02 	lds	r24, 0x0266
 47e:	8a 32       	cpi	r24, 0x2A	; 42
 480:	19 f7       	brne	.-58     	; 0x448 <TickFct_BluetoothReceiver+0x74>
 482:	c1 e0       	ldi	r28, 0x01	; 1
 484:	d0 e0       	ldi	r29, 0x00	; 0
 486:	0e c0       	rjmp	.+28     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothReceived;
			}
			break;
		default:
			state = bluetoothWait;
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	d0 e0       	ldi	r29, 0x00	; 0
 48c:	0b c0       	rjmp	.+22     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
				state = bluetoothWait;
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			}
			else if(lastReceivedChar != '*'){
				state = bluetoothWaitForNext;
			}
			else{
				state = bluetoothWait;
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
				state = bluetoothWait;
 49a:	c0 e0       	ldi	r28, 0x00	; 0
 49c:	d0 e0       	ldi	r29, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
				if(lastReceivedChar != '*'){
					inputPin[position++] = lastReceivedChar;
				}
				else{
					inputPin[position] = '\0';
					pinInputComplete = 1;
 4a0:	c1 e0       	ldi	r28, 0x01	; 1
 4a2:	eb cf       	rjmp	.-42     	; 0x47a <TickFct_BluetoothReceiver+0xa6>
			break;
		case bluetoothWaitForNext:
			break;
	}
	return state;
}
 4a4:	ce 01       	movw	r24, r28
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <TickFct_KeypadReceiver>:

enum SM_KeypadReceiver{keypadWait1, keypadWait2, keypadPressed, keypadWaitRelease};
int TickFct_KeypadReceiver(int state){
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 4b6:	14 de       	rcall	.-984    	; 0xe0 <GetKeypadKey>
 4b8:	18 2f       	mov	r17, r24
	switch(state){
 4ba:	c1 30       	cpi	r28, 0x01	; 1
 4bc:	d1 05       	cpc	r29, r1
 4be:	51 f1       	breq	.+84     	; 0x514 <TickFct_KeypadReceiver+0x68>
 4c0:	1c f4       	brge	.+6      	; 0x4c8 <TickFct_KeypadReceiver+0x1c>
 4c2:	20 97       	sbiw	r28, 0x00	; 0
 4c4:	41 f0       	breq	.+16     	; 0x4d6 <TickFct_KeypadReceiver+0x2a>
 4c6:	85 c0       	rjmp	.+266    	; 0x5d2 <TickFct_KeypadReceiver+0x126>
 4c8:	c2 30       	cpi	r28, 0x02	; 2
 4ca:	d1 05       	cpc	r29, r1
 4cc:	81 f0       	breq	.+32     	; 0x4ee <TickFct_KeypadReceiver+0x42>
 4ce:	c3 30       	cpi	r28, 0x03	; 3
 4d0:	d1 05       	cpc	r29, r1
 4d2:	c1 f0       	breq	.+48     	; 0x504 <TickFct_KeypadReceiver+0x58>
 4d4:	7e c0       	rjmp	.+252    	; 0x5d2 <TickFct_KeypadReceiver+0x126>
		case keypadWait1:
			if(key == '\0' || !keypadEnable){
 4d6:	88 23       	and	r24, r24
 4d8:	09 f4       	brne	.+2      	; 0x4dc <TickFct_KeypadReceiver+0x30>
 4da:	94 c0       	rjmp	.+296    	; 0x604 <TickFct_KeypadReceiver+0x158>
 4dc:	80 91 65 02 	lds	r24, 0x0265
 4e0:	88 23       	and	r24, r24
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <TickFct_KeypadReceiver+0x3a>
 4e4:	8f c0       	rjmp	.+286    	; 0x604 <TickFct_KeypadReceiver+0x158>
				state = keypadWait1;
			}
			else{
				state = keypadPressed;
				position = 0;
 4e6:	10 92 3c 02 	sts	0x023C, r1
				clearInputPin();
 4ea:	6b df       	rcall	.-298    	; 0x3c2 <clearInputPin>
 4ec:	87 c0       	rjmp	.+270    	; 0x5fc <TickFct_KeypadReceiver+0x150>
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
 4ee:	80 91 65 02 	lds	r24, 0x0265
 4f2:	88 23       	and	r24, r24
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <TickFct_KeypadReceiver+0x4c>
 4f6:	73 c0       	rjmp	.+230    	; 0x5de <TickFct_KeypadReceiver+0x132>
				state = keypadWait1;
			}
			else if(key == '*'){
 4f8:	1a 32       	cpi	r17, 0x2A	; 42
 4fa:	09 f0       	breq	.+2      	; 0x4fe <TickFct_KeypadReceiver+0x52>
 4fc:	73 c0       	rjmp	.+230    	; 0x5e4 <TickFct_KeypadReceiver+0x138>
				state = keypadWait1;
 4fe:	c0 e0       	ldi	r28, 0x00	; 0
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	80 c0       	rjmp	.+256    	; 0x604 <TickFct_KeypadReceiver+0x158>
			else{
				state = keypadWaitRelease;
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
 504:	80 91 65 02 	lds	r24, 0x0265
 508:	88 23       	and	r24, r24
 50a:	09 f4       	brne	.+2      	; 0x50e <TickFct_KeypadReceiver+0x62>
 50c:	6e c0       	rjmp	.+220    	; 0x5ea <TickFct_KeypadReceiver+0x13e>
				state = keypadWait1;
			}
			else if(key !='\0'){
 50e:	11 11       	cpse	r17, r1
 510:	79 c0       	rjmp	.+242    	; 0x604 <TickFct_KeypadReceiver+0x158>
 512:	6e c0       	rjmp	.+220    	; 0x5f0 <TickFct_KeypadReceiver+0x144>
			else{
				state = keypadWait2;
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
 514:	80 91 65 02 	lds	r24, 0x0265
 518:	88 23       	and	r24, r24
 51a:	09 f4       	brne	.+2      	; 0x51e <TickFct_KeypadReceiver+0x72>
 51c:	6c c0       	rjmp	.+216    	; 0x5f6 <TickFct_KeypadReceiver+0x14a>
				state = keypadWait1;
			}
			else if(key == '\0'){
 51e:	11 11       	cpse	r17, r1
 520:	6d c0       	rjmp	.+218    	; 0x5fc <TickFct_KeypadReceiver+0x150>
 522:	70 c0       	rjmp	.+224    	; 0x604 <TickFct_KeypadReceiver+0x158>
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
				if(key != 'A' && key != 'C'){
 524:	81 2f       	mov	r24, r17
 526:	8d 7f       	andi	r24, 0xFD	; 253
 528:	81 34       	cpi	r24, 0x41	; 65
 52a:	09 f4       	brne	.+2      	; 0x52e <TickFct_KeypadReceiver+0x82>
 52c:	55 c0       	rjmp	.+170    	; 0x5d8 <TickFct_KeypadReceiver+0x12c>
					inputPin[position++] = key;
 52e:	e0 91 3c 02 	lds	r30, 0x023C
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	8e 0f       	add	r24, r30
 536:	80 93 3c 02 	sts	0x023C, r24
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ef 5a       	subi	r30, 0xAF	; 175
 53e:	fd 4f       	sbci	r31, 0xFD	; 253
 540:	10 83       	st	Z, r17
					if(showPin){
 542:	80 91 64 02 	lds	r24, 0x0264
 546:	88 23       	and	r24, r24
 548:	29 f0       	breq	.+10     	; 0x554 <TickFct_KeypadReceiver+0xa8>
						LCD_WriteData(key);
 54a:	81 2f       	mov	r24, r17
 54c:	75 de       	rcall	.-790    	; 0x238 <LCD_WriteData>
 54e:	c2 e0       	ldi	r28, 0x02	; 2
 550:	d0 e0       	ldi	r29, 0x00	; 0
 552:	58 c0       	rjmp	.+176    	; 0x604 <TickFct_KeypadReceiver+0x158>
					}
					else{
						LCD_WriteData('*');
 554:	8a e2       	ldi	r24, 0x2A	; 42
 556:	70 de       	rcall	.-800    	; 0x238 <LCD_WriteData>
 558:	c2 e0       	ldi	r28, 0x02	; 2
 55a:	d0 e0       	ldi	r29, 0x00	; 0
 55c:	53 c0       	rjmp	.+166    	; 0x604 <TickFct_KeypadReceiver+0x158>
					}
				}
			}
			else{
				if(showPin){
 55e:	80 91 64 02 	lds	r24, 0x0264
 562:	88 23       	and	r24, r24
 564:	51 f1       	breq	.+84     	; 0x5ba <TickFct_KeypadReceiver+0x10e>
					LCD_DisplayString(1, "Changing...");
 566:	68 e5       	ldi	r22, 0x58	; 88
 568:	71 e0       	ldi	r23, 0x01	; 1
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	6e de       	rcall	.-804    	; 0x24a <LCD_DisplayString>
					inputPin[position] = '\0';
 56e:	e0 91 3c 02 	lds	r30, 0x023C
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	ef 5a       	subi	r30, 0xAF	; 175
 576:	fd 4f       	sbci	r31, 0xFD	; 253
 578:	10 82       	st	Z, r1
					newPinInputComplete = 1;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 68 02 	sts	0x0268, r24
					unsigned char counter = 0;
					correctPinAddr = CORRECTPINSTARTADDR;
 580:	10 92 fb 01 	sts	0x01FB, r1
			else{
				if(showPin){
					LCD_DisplayString(1, "Changing...");
					inputPin[position] = '\0';
					newPinInputComplete = 1;
					unsigned char counter = 0;
 584:	10 e0       	ldi	r17, 0x00	; 0
					correctPinAddr = CORRECTPINSTARTADDR;
					while(1){
						PORTA = 1;
 586:	01 e0       	ldi	r16, 0x01	; 1
 588:	02 b9       	out	0x02, r16	; 2
						eeprom_write_byte(correctPinAddr++, inputPin[counter]);
 58a:	c1 2f       	mov	r28, r17
 58c:	d0 e0       	ldi	r29, 0x00	; 0
 58e:	cf 5a       	subi	r28, 0xAF	; 175
 590:	dd 4f       	sbci	r29, 0xFD	; 253
 592:	68 81       	ld	r22, Y
 594:	80 91 fb 01 	lds	r24, 0x01FB
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	98 0f       	add	r25, r24
 59c:	90 93 fb 01 	sts	0x01FB, r25
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	50 d3       	rcall	.+1696   	; 0xc44 <__eewr_byte_m1284>
						if(inputPin[counter] == '\0'){
 5a4:	88 81       	ld	r24, Y
 5a6:	88 23       	and	r24, r24
 5a8:	11 f0       	breq	.+4      	; 0x5ae <TickFct_KeypadReceiver+0x102>
							break;
						}
						++counter;
 5aa:	1f 5f       	subi	r17, 0xFF	; 255
					}
 5ac:	ed cf       	rjmp	.-38     	; 0x588 <TickFct_KeypadReceiver+0xdc>
					newPinInputComplete = 1;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	80 93 68 02 	sts	0x0268, r24
 5b4:	c2 e0       	ldi	r28, 0x02	; 2
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	25 c0       	rjmp	.+74     	; 0x604 <TickFct_KeypadReceiver+0x158>
				}
				else{
					inputPin[position] = '\0';
 5ba:	e0 91 3c 02 	lds	r30, 0x023C
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ef 5a       	subi	r30, 0xAF	; 175
 5c2:	fd 4f       	sbci	r31, 0xFD	; 253
 5c4:	10 82       	st	Z, r1
					pinInputComplete = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 3f 02 	sts	0x023F, r24
 5cc:	c2 e0       	ldi	r28, 0x02	; 2
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	19 c0       	rjmp	.+50     	; 0x604 <TickFct_KeypadReceiver+0x158>
			else{
				state = keypadPressed;
			}
			break;
		default:
			state = keypadWait1;
 5d2:	c0 e0       	ldi	r28, 0x00	; 0
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
 5d6:	16 c0       	rjmp	.+44     	; 0x604 <TickFct_KeypadReceiver+0x158>
 5d8:	c2 e0       	ldi	r28, 0x02	; 2
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	13 c0       	rjmp	.+38     	; 0x604 <TickFct_KeypadReceiver+0x158>
				clearInputPin();
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
				state = keypadWait1;
 5de:	c0 e0       	ldi	r28, 0x00	; 0
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	10 c0       	rjmp	.+32     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			else if(key == '*'){
				state = keypadWait1;
			}
			else{
				state = keypadWaitRelease;
 5e4:	c3 e0       	ldi	r28, 0x03	; 3
 5e6:	d0 e0       	ldi	r29, 0x00	; 0
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
				state = keypadWait1;
 5ea:	c0 e0       	ldi	r28, 0x00	; 0
 5ec:	d0 e0       	ldi	r29, 0x00	; 0
 5ee:	0a c0       	rjmp	.+20     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			else if(key !='\0'){
				state = keypadWaitRelease;
			}
			else{
				state = keypadWait2;
 5f0:	c1 e0       	ldi	r28, 0x01	; 1
 5f2:	d0 e0       	ldi	r29, 0x00	; 0
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
				state = keypadWait1;
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <TickFct_KeypadReceiver+0x158>
		case keypadWait1:
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
 5fc:	1a 32       	cpi	r17, 0x2A	; 42
 5fe:	09 f0       	breq	.+2      	; 0x602 <TickFct_KeypadReceiver+0x156>
 600:	91 cf       	rjmp	.-222    	; 0x524 <TickFct_KeypadReceiver+0x78>
 602:	ad cf       	rjmp	.-166    	; 0x55e <TickFct_KeypadReceiver+0xb2>
			break;
		case keypadWaitRelease:
			break;
	}
	return state;
}
 604:	ce 01       	movw	r24, r28
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <clearFlags>:
		inputPin[i] = '\0';
	}
}

void clearFlags(){
	checkPinFlag = 0;
 610:	10 92 ff 01 	sts	0x01FF, r1
	keypadEnable = 0;
 614:	10 92 65 02 	sts	0x0265, r1
	bluetoothEnable = 0;
 618:	10 92 40 02 	sts	0x0240, r1
	controlCounter = 0;
 61c:	10 92 63 02 	sts	0x0263, r1
 620:	10 92 62 02 	sts	0x0262, r1
	lockedFlag = 1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 fe 01 	sts	0x01FE, r24
	showPin = 0;
 62a:	10 92 64 02 	sts	0x0264, r1
	pinInputComplete = 0;
 62e:	10 92 3f 02 	sts	0x023F, r1
 632:	08 95       	ret

00000634 <TickFct_Controller>:
}

enum SM_Controller{controllerinit, controllerWait, controllerKeypad, controllerBluetooth, controllerCheck,
	 controllerUnlocked, controllerLocked, controllerLockWaitRelease, controllerChangePin, controllerIntrusionDetected, 
	 controllerIntrusionPin, controllerIntrusionCheck};
int TickFct_Controller(int state){
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 63a:	52 dd       	rcall	.-1372   	; 0xe0 <GetKeypadKey>
	unsigned char doorClosed = (~PIND & 0x10) >> 4;
 63c:	29 b1       	in	r18, 0x09	; 9
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	20 95       	com	r18
 642:	30 95       	com	r19
 644:	22 95       	swap	r18
 646:	21 70       	andi	r18, 0x01	; 1
	switch(state){
 648:	cc 30       	cpi	r28, 0x0C	; 12
 64a:	d1 05       	cpc	r29, r1
 64c:	08 f0       	brcs	.+2      	; 0x650 <TickFct_Controller+0x1c>
 64e:	4e c1       	rjmp	.+668    	; 0x8ec <TickFct_Controller+0x2b8>
 650:	fe 01       	movw	r30, r28
 652:	ea 5b       	subi	r30, 0xBA	; 186
 654:	ff 4f       	sbci	r31, 0xFF	; 255
 656:	e8 c2       	rjmp	.+1488   	; 0xc28 <__tablejump2__>
		case controllerinit:
			clearFlags();											
 658:	db df       	rcall	.-74     	; 0x610 <clearFlags>
			lockedFlag = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 fe 01 	sts	0x01FE, r24
			showPin = 0;
 660:	10 92 64 02 	sts	0x0264, r1
			state = controllerWait;
			clearInputPin();
 664:	ae de       	rcall	.-676    	; 0x3c2 <clearInputPin>
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 666:	68 e3       	ldi	r22, 0x38	; 56
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	ee dd       	rcall	.-1060   	; 0x24a <LCD_DisplayString>
	switch(state){
		case controllerinit:
			clearFlags();											
			lockedFlag = 1;
			showPin = 0;
			state = controllerWait;
 66e:	c1 e0       	ldi	r28, 0x01	; 1
 670:	d0 e0       	ldi	r29, 0x00	; 0
			clearInputPin();
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
			break;
 672:	59 c1       	rjmp	.+690    	; 0x926 <TickFct_Controller+0x2f2>
		case controllerWait:
			if(!doorClosed && lockedFlag ){
 674:	21 11       	cpse	r18, r1
 676:	0d c0       	rjmp	.+26     	; 0x692 <TickFct_Controller+0x5e>
 678:	90 91 fe 01 	lds	r25, 0x01FE
 67c:	99 23       	and	r25, r25
 67e:	49 f0       	breq	.+18     	; 0x692 <TickFct_Controller+0x5e>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 684:	64 e6       	ldi	r22, 0x64	; 100
 686:	71 e0       	ldi	r23, 0x01	; 1
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	df dd       	rcall	.-1090   	; 0x24a <LCD_DisplayString>
			clearInputPin();
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
			break;
		case controllerWait:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 68c:	c9 e0       	ldi	r28, 0x09	; 9
 68e:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 690:	4a c1       	rjmp	.+660    	; 0x926 <TickFct_Controller+0x2f2>
			}
			else if(key == 'A'){
 692:	81 34       	cpi	r24, 0x41	; 65
 694:	49 f4       	brne	.+18     	; 0x6a8 <TickFct_Controller+0x74>
				state = controllerKeypad;
				keypadEnable = 1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	80 93 65 02 	sts	0x0265, r24
				clearInputPin();
 69c:	92 de       	rcall	.-732    	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 69e:	61 e7       	ldi	r22, 0x71	; 113
 6a0:	71 e0       	ldi	r23, 0x01	; 1
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	d2 dd       	rcall	.-1116   	; 0x24a <LCD_DisplayString>
 6a6:	3a c1       	rjmp	.+628    	; 0x91c <TickFct_Controller+0x2e8>
			}
			else if(key == 'B'){
 6a8:	82 34       	cpi	r24, 0x42	; 66
 6aa:	09 f0       	breq	.+2      	; 0x6ae <TickFct_Controller+0x7a>
 6ac:	3c c1       	rjmp	.+632    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerBluetooth;
				bluetoothEnable = 1;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	80 93 40 02 	sts	0x0240, r24
				clearInputPin();
 6b4:	86 de       	rcall	.-756    	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "Waiting to Rec  C to Cancel");
 6b6:	67 e7       	ldi	r22, 0x77	; 119
 6b8:	71 e0       	ldi	r23, 0x01	; 1
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	c6 dd       	rcall	.-1140   	; 0x24a <LCD_DisplayString>
 6be:	19 c1       	rjmp	.+562    	; 0x8f2 <TickFct_Controller+0x2be>
			}
			break;
		case controllerBluetooth:
			if(!doorClosed && lockedFlag ){
 6c0:	21 11       	cpse	r18, r1
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <TickFct_Controller+0xaa>
 6c4:	90 91 fe 01 	lds	r25, 0x01FE
 6c8:	99 23       	and	r25, r25
 6ca:	49 f0       	breq	.+18     	; 0x6de <TickFct_Controller+0xaa>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6d0:	64 e6       	ldi	r22, 0x64	; 100
 6d2:	71 e0       	ldi	r23, 0x01	; 1
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	b9 dd       	rcall	.-1166   	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Waiting to Rec  C to Cancel");
			}
			break;
		case controllerBluetooth:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 6d8:	c9 e0       	ldi	r28, 0x09	; 9
 6da:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6dc:	24 c1       	rjmp	.+584    	; 0x926 <TickFct_Controller+0x2f2>
			}
			else if(key == 'C'){
 6de:	83 34       	cpi	r24, 0x43	; 67
 6e0:	51 f4       	brne	.+20     	; 0x6f6 <TickFct_Controller+0xc2>
				state = controllerWait;
				bluetoothEnable = 0;
 6e2:	10 92 40 02 	sts	0x0240, r1
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 6e6:	68 e3       	ldi	r22, 0x38	; 56
 6e8:	71 e0       	ldi	r23, 0x01	; 1
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	ae dd       	rcall	.-1188   	; 0x24a <LCD_DisplayString>
				clearFlags();
 6ee:	90 df       	rcall	.-224    	; 0x610 <clearFlags>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(key == 'C'){
				state = controllerWait;
 6f0:	c1 e0       	ldi	r28, 0x01	; 1
 6f2:	d0 e0       	ldi	r29, 0x00	; 0
 6f4:	18 c1       	rjmp	.+560    	; 0x926 <TickFct_Controller+0x2f2>
				bluetoothEnable = 0;
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
				clearFlags();
			}
			else if(pinInputComplete){
 6f6:	80 91 3f 02 	lds	r24, 0x023F
 6fa:	88 23       	and	r24, r24
 6fc:	09 f4       	brne	.+2      	; 0x700 <TickFct_Controller+0xcc>
 6fe:	f9 c0       	rjmp	.+498    	; 0x8f2 <TickFct_Controller+0x2be>
				state = controllerCheck;
				checkPinFlag = 1;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	80 93 ff 01 	sts	0x01FF, r24
				bluetoothEnable = 0;
 706:	10 92 40 02 	sts	0x0240, r1
				LCD_DisplayString(1, "Checking...     C to Cancel");
 70a:	63 e9       	ldi	r22, 0x93	; 147
 70c:	71 e0       	ldi	r23, 0x01	; 1
 70e:	9d dd       	rcall	.-1222   	; 0x24a <LCD_DisplayString>
				bluetoothEnable = 0;
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
				clearFlags();
			}
			else if(pinInputComplete){
				state = controllerCheck;
 710:	c4 e0       	ldi	r28, 0x04	; 4
 712:	d0 e0       	ldi	r29, 0x00	; 0
 714:	08 c1       	rjmp	.+528    	; 0x926 <TickFct_Controller+0x2f2>
			else{
				state = controllerBluetooth;
			}
			break;
		case controllerKeypad:
			if(!doorClosed && lockedFlag ){
 716:	21 11       	cpse	r18, r1
 718:	0d c0       	rjmp	.+26     	; 0x734 <TickFct_Controller+0x100>
 71a:	80 91 fe 01 	lds	r24, 0x01FE
 71e:	88 23       	and	r24, r24
 720:	49 f0       	breq	.+18     	; 0x734 <TickFct_Controller+0x100>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 722:	8f ef       	ldi	r24, 0xFF	; 255
 724:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 726:	64 e6       	ldi	r22, 0x64	; 100
 728:	71 e0       	ldi	r23, 0x01	; 1
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	8e dd       	rcall	.-1252   	; 0x24a <LCD_DisplayString>
				state = controllerBluetooth;
			}
			break;
		case controllerKeypad:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 72e:	c9 e0       	ldi	r28, 0x09	; 9
 730:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 732:	f9 c0       	rjmp	.+498    	; 0x926 <TickFct_Controller+0x2f2>
			}
			else if(pinInputComplete){
 734:	80 91 3f 02 	lds	r24, 0x023F
 738:	88 23       	and	r24, r24
 73a:	09 f4       	brne	.+2      	; 0x73e <TickFct_Controller+0x10a>
 73c:	ef c0       	rjmp	.+478    	; 0x91c <TickFct_Controller+0x2e8>
				state = controllerCheck;
				checkPinFlag = 1;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 93 ff 01 	sts	0x01FF, r24
				keypadEnable = 0;
 744:	10 92 65 02 	sts	0x0265, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 748:	6f ea       	ldi	r22, 0xAF	; 175
 74a:	71 e0       	ldi	r23, 0x01	; 1
 74c:	7e dd       	rcall	.-1284   	; 0x24a <LCD_DisplayString>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(pinInputComplete){
				state = controllerCheck;
 74e:	c4 e0       	ldi	r28, 0x04	; 4
 750:	d0 e0       	ldi	r29, 0x00	; 0
 752:	e9 c0       	rjmp	.+466    	; 0x926 <TickFct_Controller+0x2f2>
			else{
				state = controllerKeypad;
			}
			break;
		case controllerCheck:
			if(!doorClosed && lockedFlag ){
 754:	21 11       	cpse	r18, r1
 756:	0d c0       	rjmp	.+26     	; 0x772 <TickFct_Controller+0x13e>
 758:	90 91 fe 01 	lds	r25, 0x01FE
 75c:	99 23       	and	r25, r25
 75e:	49 f0       	breq	.+18     	; 0x772 <TickFct_Controller+0x13e>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 764:	64 e6       	ldi	r22, 0x64	; 100
 766:	71 e0       	ldi	r23, 0x01	; 1
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	6f dd       	rcall	.-1314   	; 0x24a <LCD_DisplayString>
				state = controllerKeypad;
			}
			break;
		case controllerCheck:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 76c:	c9 e0       	ldi	r28, 0x09	; 9
 76e:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 770:	da c0       	rjmp	.+436    	; 0x926 <TickFct_Controller+0x2f2>
			}
			else if(key == 'C'){
 772:	83 34       	cpi	r24, 0x43	; 67
 774:	49 f4       	brne	.+18     	; 0x788 <TickFct_Controller+0x154>
				state = controllerWait;
				clearInputPin();
 776:	25 de       	rcall	.-950    	; 0x3c2 <clearInputPin>
				clearFlags();
 778:	4b df       	rcall	.-362    	; 0x610 <clearFlags>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 77a:	68 e3       	ldi	r22, 0x38	; 56
 77c:	71 e0       	ldi	r23, 0x01	; 1
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	64 dd       	rcall	.-1336   	; 0x24a <LCD_DisplayString>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(key == 'C'){
				state = controllerWait;
 782:	c1 e0       	ldi	r28, 0x01	; 1
 784:	d0 e0       	ldi	r29, 0x00	; 0
 786:	cf c0       	rjmp	.+414    	; 0x926 <TickFct_Controller+0x2f2>
				clearInputPin();
				clearFlags();
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
			}
			else if(checkPinFlag){
 788:	80 91 ff 01 	lds	r24, 0x01FF
 78c:	81 11       	cpse	r24, r1
 78e:	cb c0       	rjmp	.+406    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerCheck;
			}
			else{
				if(lockedFlag){
 790:	80 91 fe 01 	lds	r24, 0x01FE
 794:	88 23       	and	r24, r24
 796:	49 f0       	breq	.+18     	; 0x7aa <TickFct_Controller+0x176>
					state = controllerLocked;
					controlCounter = 0;
 798:	10 92 63 02 	sts	0x0263, r1
 79c:	10 92 62 02 	sts	0x0262, r1
					LCD_DisplayString(1, "Incorrect Pin");
 7a0:	6b ec       	ldi	r22, 0xCB	; 203
 7a2:	71 e0       	ldi	r23, 0x01	; 1
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	51 dd       	rcall	.-1374   	; 0x24a <LCD_DisplayString>
 7a8:	aa c0       	rjmp	.+340    	; 0x8fe <TickFct_Controller+0x2ca>
				}
				else{
					state = controllerUnlocked;
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 7aa:	69 ed       	ldi	r22, 0xD9	; 217
 7ac:	71 e0       	ldi	r23, 0x01	; 1
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	4c dd       	rcall	.-1384   	; 0x24a <LCD_DisplayString>
					state = controllerLocked;
					controlCounter = 0;
					LCD_DisplayString(1, "Incorrect Pin");
				}
				else{
					state = controllerUnlocked;
 7b2:	c5 e0       	ldi	r28, 0x05	; 5
 7b4:	d0 e0       	ldi	r29, 0x00	; 0
 7b6:	b7 c0       	rjmp	.+366    	; 0x926 <TickFct_Controller+0x2f2>
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
				}
			}
			break;
		case controllerLocked:
			if(!doorClosed && lockedFlag ){
 7b8:	21 11       	cpse	r18, r1
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <TickFct_Controller+0x1a2>
 7bc:	80 91 fe 01 	lds	r24, 0x01FE
 7c0:	88 23       	and	r24, r24
 7c2:	49 f0       	breq	.+18     	; 0x7d6 <TickFct_Controller+0x1a2>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 7c4:	8f ef       	ldi	r24, 0xFF	; 255
 7c6:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 7c8:	64 e6       	ldi	r22, 0x64	; 100
 7ca:	71 e0       	ldi	r23, 0x01	; 1
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	3d dd       	rcall	.-1414   	; 0x24a <LCD_DisplayString>
				}
			}
			break;
		case controllerLocked:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 7d0:	c9 e0       	ldi	r28, 0x09	; 9
 7d2:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 7d4:	a8 c0       	rjmp	.+336    	; 0x926 <TickFct_Controller+0x2f2>
			}
			else if(controlCounter >= 750){
 7d6:	80 91 62 02 	lds	r24, 0x0262
 7da:	90 91 63 02 	lds	r25, 0x0263
 7de:	8e 3e       	cpi	r24, 0xEE	; 238
 7e0:	92 40       	sbci	r25, 0x02	; 2
 7e2:	08 f4       	brcc	.+2      	; 0x7e6 <TickFct_Controller+0x1b2>
 7e4:	8c c0       	rjmp	.+280    	; 0x8fe <TickFct_Controller+0x2ca>
				state = controllerWait;
				clearInputPin();
 7e6:	ed dd       	rcall	.-1062   	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 7e8:	68 e3       	ldi	r22, 0x38	; 56
 7ea:	71 e0       	ldi	r23, 0x01	; 1
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	2d dd       	rcall	.-1446   	; 0x24a <LCD_DisplayString>
				clearFlags();
 7f0:	0f df       	rcall	.-482    	; 0x610 <clearFlags>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(controlCounter >= 750){
				state = controllerWait;
 7f2:	c1 e0       	ldi	r28, 0x01	; 1
 7f4:	d0 e0       	ldi	r29, 0x00	; 0
 7f6:	97 c0       	rjmp	.+302    	; 0x926 <TickFct_Controller+0x2f2>
			else{
				state = controllerLocked;
			}
			break;
		case controllerUnlocked:
			if(key == 'A'){
 7f8:	81 34       	cpi	r24, 0x41	; 65
 7fa:	09 f4       	brne	.+2      	; 0x7fe <TickFct_Controller+0x1ca>
 7fc:	8c c0       	rjmp	.+280    	; 0x916 <TickFct_Controller+0x2e2>
				state = controllerLockWaitRelease;
			}
			else if(key == 'C'){
 7fe:	83 34       	cpi	r24, 0x43	; 67
 800:	09 f0       	breq	.+2      	; 0x804 <TickFct_Controller+0x1d0>
 802:	91 c0       	rjmp	.+290    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerChangePin;
				showPin = 1;
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	80 93 64 02 	sts	0x0264, r24
				keypadEnable = 1;
 80a:	80 93 65 02 	sts	0x0265, r24
				pinInputComplete = 0;
 80e:	10 92 3f 02 	sts	0x023F, r1
				clearInputPin();
 812:	d7 dd       	rcall	.-1106   	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 814:	61 e7       	ldi	r22, 0x71	; 113
 816:	71 e0       	ldi	r23, 0x01	; 1
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	17 dd       	rcall	.-1490   	; 0x24a <LCD_DisplayString>
		case controllerUnlocked:
			if(key == 'A'){
				state = controllerLockWaitRelease;
			}
			else if(key == 'C'){
				state = controllerChangePin;
 81c:	c8 e0       	ldi	r28, 0x08	; 8
 81e:	d0 e0       	ldi	r29, 0x00	; 0
 820:	82 c0       	rjmp	.+260    	; 0x926 <TickFct_Controller+0x2f2>
				clearInputPin();
				LCD_DisplayString(1, "Pin: ");
			}
			break;
		case controllerLockWaitRelease:
			if(!doorClosed && lockedFlag ){
 822:	21 11       	cpse	r18, r1
 824:	0d c0       	rjmp	.+26     	; 0x840 <TickFct_Controller+0x20c>
 826:	90 91 fe 01 	lds	r25, 0x01FE
 82a:	99 23       	and	r25, r25
 82c:	49 f0       	breq	.+18     	; 0x840 <TickFct_Controller+0x20c>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 832:	64 e6       	ldi	r22, 0x64	; 100
 834:	71 e0       	ldi	r23, 0x01	; 1
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	08 dd       	rcall	.-1520   	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Pin: ");
			}
			break;
		case controllerLockWaitRelease:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 83a:	c9 e0       	ldi	r28, 0x09	; 9
 83c:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 83e:	73 c0       	rjmp	.+230    	; 0x926 <TickFct_Controller+0x2f2>
			}
			else if(key != '\0'){
 840:	81 11       	cpse	r24, r1
 842:	71 c0       	rjmp	.+226    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerLockWaitRelease;
			}
			else{
				state = controllerWait;
				clearInputPin();
 844:	be dd       	rcall	.-1156   	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 846:	68 e3       	ldi	r22, 0x38	; 56
 848:	71 e0       	ldi	r23, 0x01	; 1
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	fe dc       	rcall	.-1540   	; 0x24a <LCD_DisplayString>
				clearFlags();
 84e:	e0 de       	rcall	.-576    	; 0x610 <clearFlags>
			}
			else if(key != '\0'){
				state = controllerLockWaitRelease;
			}
			else{
				state = controllerWait;
 850:	c1 e0       	ldi	r28, 0x01	; 1
 852:	d0 e0       	ldi	r29, 0x00	; 0
 854:	68 c0       	rjmp	.+208    	; 0x926 <TickFct_Controller+0x2f2>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
				clearFlags();
			}
			break;
		case controllerChangePin:
			if(!newPinInputComplete){
 856:	80 91 68 02 	lds	r24, 0x0268
 85a:	88 23       	and	r24, r24
 85c:	09 f4       	brne	.+2      	; 0x860 <TickFct_Controller+0x22c>
 85e:	63 c0       	rjmp	.+198    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerChangePin;
			}
			else{
				state = controllerUnlocked;
				keypadEnable = 0;
 860:	10 92 65 02 	sts	0x0265, r1
				showPin = 0;
 864:	10 92 64 02 	sts	0x0264, r1
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
 868:	69 ed       	ldi	r22, 0xD9	; 217
 86a:	71 e0       	ldi	r23, 0x01	; 1
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	ed dc       	rcall	.-1574   	; 0x24a <LCD_DisplayString>
		case controllerChangePin:
			if(!newPinInputComplete){
				state = controllerChangePin;
			}
			else{
				state = controllerUnlocked;
 870:	c5 e0       	ldi	r28, 0x05	; 5
 872:	d0 e0       	ldi	r29, 0x00	; 0
 874:	58 c0       	rjmp	.+176    	; 0x926 <TickFct_Controller+0x2f2>
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
			}
			break;
		case controllerIntrusionDetected:
			state = controllerIntrusionPin;
			keypadEnable = 1;
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	80 93 65 02 	sts	0x0265, r24
			pinInputComplete = 0;
 87c:	10 92 3f 02 	sts	0x023F, r1
			clearInputPin();
 880:	a0 dd       	rcall	.-1216   	; 0x3c2 <clearInputPin>
				showPin = 0;
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
			}
			break;
		case controllerIntrusionDetected:
			state = controllerIntrusionPin;
 882:	ca e0       	ldi	r28, 0x0A	; 10
 884:	d0 e0       	ldi	r29, 0x00	; 0
			keypadEnable = 1;
			pinInputComplete = 0;
			clearInputPin();
			break;
 886:	4f c0       	rjmp	.+158    	; 0x926 <TickFct_Controller+0x2f2>
		case controllerIntrusionPin:
			if(pinInputComplete){
 888:	80 91 3f 02 	lds	r24, 0x023F
 88c:	88 23       	and	r24, r24
 88e:	09 f4       	brne	.+2      	; 0x892 <TickFct_Controller+0x25e>
 890:	4a c0       	rjmp	.+148    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerIntrusionCheck;
				checkPinFlag = 1;
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	80 93 ff 01 	sts	0x01FF, r24
				keypadEnable = 0;
 898:	10 92 65 02 	sts	0x0265, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 89c:	6f ea       	ldi	r22, 0xAF	; 175
 89e:	71 e0       	ldi	r23, 0x01	; 1
 8a0:	d4 dc       	rcall	.-1624   	; 0x24a <LCD_DisplayString>
			pinInputComplete = 0;
			clearInputPin();
			break;
		case controllerIntrusionPin:
			if(pinInputComplete){
				state = controllerIntrusionCheck;
 8a2:	cb e0       	ldi	r28, 0x0B	; 11
 8a4:	d0 e0       	ldi	r29, 0x00	; 0
 8a6:	3f c0       	rjmp	.+126    	; 0x926 <TickFct_Controller+0x2f2>
			else{
				state = controllerIntrusionPin;
			}
			break;
		case controllerIntrusionCheck:
			if(checkPinFlag){
 8a8:	80 91 ff 01 	lds	r24, 0x01FF
 8ac:	81 11       	cpse	r24, r1
 8ae:	3b c0       	rjmp	.+118    	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerIntrusionCheck;
			}
			else{
				if(lockedFlag){
 8b0:	80 91 fe 01 	lds	r24, 0x01FE
 8b4:	88 23       	and	r24, r24
 8b6:	91 f0       	breq	.+36     	; 0x8dc <TickFct_Controller+0x2a8>
					state = controllerIntrusionDetected;
					controlCounter = 0;
 8b8:	10 92 63 02 	sts	0x0263, r1
 8bc:	10 92 62 02 	sts	0x0262, r1
					LCD_DisplayString(1, "Incorrect Pin");
 8c0:	6b ec       	ldi	r22, 0xCB	; 203
 8c2:	71 e0       	ldi	r23, 0x01	; 1
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	c1 dc       	rcall	.-1662   	; 0x24a <LCD_DisplayString>
					delay_ms(500);
 8c8:	84 ef       	ldi	r24, 0xF4	; 244
 8ca:	91 e0       	ldi	r25, 0x01	; 1
 8cc:	7b dc       	rcall	.-1802   	; 0x1c4 <delay_ms>
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
 8ce:	64 e6       	ldi	r22, 0x64	; 100
 8d0:	71 e0       	ldi	r23, 0x01	; 1
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	ba dc       	rcall	.-1676   	; 0x24a <LCD_DisplayString>
			if(checkPinFlag){
				state = controllerIntrusionCheck;
			}
			else{
				if(lockedFlag){
					state = controllerIntrusionDetected;
 8d6:	c9 e0       	ldi	r28, 0x09	; 9
 8d8:	d0 e0       	ldi	r29, 0x00	; 0
 8da:	25 c0       	rjmp	.+74     	; 0x926 <TickFct_Controller+0x2f2>
					delay_ms(500);
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
				}
				else{
					state = controllerUnlocked;
					PORTA = 0x00;
 8dc:	12 b8       	out	0x02, r1	; 2
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 8de:	69 ed       	ldi	r22, 0xD9	; 217
 8e0:	71 e0       	ldi	r23, 0x01	; 1
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	b2 dc       	rcall	.-1692   	; 0x24a <LCD_DisplayString>
					LCD_DisplayString(1, "Incorrect Pin");
					delay_ms(500);
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
				}
				else{
					state = controllerUnlocked;
 8e6:	c5 e0       	ldi	r28, 0x05	; 5
 8e8:	d0 e0       	ldi	r29, 0x00	; 0
 8ea:	1d c0       	rjmp	.+58     	; 0x926 <TickFct_Controller+0x2f2>
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
				}
			}
			break;
		default:
			state = controllerinit;
 8ec:	c0 e0       	ldi	r28, 0x00	; 0
 8ee:	d0 e0       	ldi	r29, 0x00	; 0
 8f0:	1a c0       	rjmp	.+52     	; 0x926 <TickFct_Controller+0x2f2>
			break;
		case controllerKeypad:
			keypadEnable = 1;
			break;
		case controllerBluetooth:
			bluetoothEnable = 1;
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	80 93 40 02 	sts	0x0240, r24
			break;
 8f8:	c3 e0       	ldi	r28, 0x03	; 3
 8fa:	d0 e0       	ldi	r29, 0x00	; 0
 8fc:	14 c0       	rjmp	.+40     	; 0x926 <TickFct_Controller+0x2f2>
		case controllerCheck:
			break;
		case controllerLocked:
			++controlCounter;
 8fe:	80 91 62 02 	lds	r24, 0x0262
 902:	90 91 63 02 	lds	r25, 0x0263
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	90 93 63 02 	sts	0x0263, r25
 90c:	80 93 62 02 	sts	0x0262, r24
			break;
 910:	c6 e0       	ldi	r28, 0x06	; 6
 912:	d0 e0       	ldi	r29, 0x00	; 0
 914:	08 c0       	rjmp	.+16     	; 0x926 <TickFct_Controller+0x2f2>
				state = controllerLocked;
			}
			break;
		case controllerUnlocked:
			if(key == 'A'){
				state = controllerLockWaitRelease;
 916:	c7 e0       	ldi	r28, 0x07	; 7
 918:	d0 e0       	ldi	r29, 0x00	; 0
 91a:	05 c0       	rjmp	.+10     	; 0x926 <TickFct_Controller+0x2f2>
		case controllerinit:
			break;
		case controllerWait:
			break;
		case controllerKeypad:
			keypadEnable = 1;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	80 93 65 02 	sts	0x0265, r24
			break;
 922:	c2 e0       	ldi	r28, 0x02	; 2
 924:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		case controllerIntrusionCheck:
			break;	
	}
	return state;
}
 926:	ce 01       	movw	r24, r28
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	08 95       	ret

0000092e <getInputPinLength>:
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 92e:	80 91 51 02 	lds	r24, 0x0251
 932:	88 23       	and	r24, r24
 934:	51 f0       	breq	.+20     	; 0x94a <getInputPinLength+0x1c>
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 936:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
 938:	8f 5f       	subi	r24, 0xFF	; 255
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 93a:	e8 2f       	mov	r30, r24
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	ef 5a       	subi	r30, 0xAF	; 175
 940:	fd 4f       	sbci	r31, 0xFD	; 253
 942:	90 81       	ld	r25, Z
 944:	91 11       	cpse	r25, r1
 946:	f8 cf       	rjmp	.-16     	; 0x938 <getInputPinLength+0xa>
 948:	08 95       	ret
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 94a:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
	}
	return i;
}
 94c:	08 95       	ret

0000094e <getCorrectPinLength>:

unsigned char getCorrectPinLength(){
 94e:	cf 93       	push	r28
	unsigned char i = CORRECTPINSTARTADDR;
 950:	c0 e0       	ldi	r28, 0x00	; 0
	while(eeprom_read_byte(i) != '\0'){
 952:	01 c0       	rjmp	.+2      	; 0x956 <getCorrectPinLength+0x8>
		++i;
 954:	cf 5f       	subi	r28, 0xFF	; 255
	return i;
}

unsigned char getCorrectPinLength(){
	unsigned char i = CORRECTPINSTARTADDR;
	while(eeprom_read_byte(i) != '\0'){
 956:	8c 2f       	mov	r24, r28
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	6c d1       	rcall	.+728    	; 0xc34 <__eerd_byte_m1284>
 95c:	81 11       	cpse	r24, r1
 95e:	fa cf       	rjmp	.-12     	; 0x954 <getCorrectPinLength+0x6>
		++i;
	}
	return i;
}
 960:	8c 2f       	mov	r24, r28
 962:	cf 91       	pop	r28
 964:	08 95       	ret

00000966 <TickFct_CheckPin>:
	}
	return state;
}

enum SM_CheckPin {checkInit, checkWait, checkCheck};
int TickFct_CheckPin(int state){
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
	switch(state){
 96e:	81 30       	cpi	r24, 0x01	; 1
 970:	91 05       	cpc	r25, r1
 972:	49 f0       	breq	.+18     	; 0x986 <TickFct_CheckPin+0x20>
 974:	82 30       	cpi	r24, 0x02	; 2
 976:	91 05       	cpc	r25, r1
 978:	19 f0       	breq	.+6      	; 0x980 <TickFct_CheckPin+0x1a>
 97a:	89 2b       	or	r24, r25
 97c:	09 f0       	breq	.+2      	; 0x980 <TickFct_CheckPin+0x1a>
 97e:	3c c0       	rjmp	.+120    	; 0x9f8 <TickFct_CheckPin+0x92>
		case checkInit:
			state = checkWait;
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	3b c0       	rjmp	.+118    	; 0x9fc <TickFct_CheckPin+0x96>
			break;
		case checkWait:
			if(checkPinFlag){
 986:	20 91 ff 01 	lds	r18, 0x01FF
 98a:	22 23       	and	r18, r18
 98c:	b9 f1       	breq	.+110    	; 0x9fc <TickFct_CheckPin+0x96>
				state = checkCheck;
				isCorrect = 1;
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	80 93 61 02 	sts	0x0261, r24
				checkCounter = 0;
 994:	10 92 67 02 	sts	0x0267, r1
				correctPinAddr = CORRECTPINSTARTADDR;
 998:	10 92 fb 01 	sts	0x01FB, r1
				if(getCorrectPinLength() != getInputPinLength()){
 99c:	d8 df       	rcall	.-80     	; 0x94e <getCorrectPinLength>
 99e:	c8 2f       	mov	r28, r24
 9a0:	c6 df       	rcall	.-116    	; 0x92e <getInputPinLength>
 9a2:	c8 13       	cpse	r28, r24
					isCorrect = 0;
 9a4:	10 92 61 02 	sts	0x0261, r1
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 9a8:	00 91 61 02 	lds	r16, 0x0261
 9ac:	0b c0       	rjmp	.+22     	; 0x9c4 <TickFct_CheckPin+0x5e>
					if(eeprom_read_byte(correctPinAddr + checkCounter) != inputPin[checkCounter]){
 9ae:	cf 5a       	subi	r28, 0xAF	; 175
 9b0:	dd 4f       	sbci	r29, 0xFD	; 253
 9b2:	98 81       	ld	r25, Y
 9b4:	89 17       	cp	r24, r25
 9b6:	19 f0       	breq	.+6      	; 0x9be <TickFct_CheckPin+0x58>
						isCorrect = 0;
 9b8:	10 92 61 02 	sts	0x0261, r1
						break;
 9bc:	15 c0       	rjmp	.+42     	; 0x9e8 <TickFct_CheckPin+0x82>
					}
					++checkCounter;
 9be:	1f 5f       	subi	r17, 0xFF	; 255
 9c0:	10 93 67 02 	sts	0x0267, r17
				checkCounter = 0;
				correctPinAddr = CORRECTPINSTARTADDR;
				if(getCorrectPinLength() != getInputPinLength()){
					isCorrect = 0;
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 9c4:	10 91 67 02 	lds	r17, 0x0267
 9c8:	c1 2f       	mov	r28, r17
 9ca:	d0 e0       	ldi	r29, 0x00	; 0
 9cc:	ce 01       	movw	r24, r28
 9ce:	32 d1       	rcall	.+612    	; 0xc34 <__eerd_byte_m1284>
 9d0:	88 23       	and	r24, r24
 9d2:	19 f0       	breq	.+6      	; 0x9da <TickFct_CheckPin+0x74>
 9d4:	01 11       	cpse	r16, r1
 9d6:	eb cf       	rjmp	.-42     	; 0x9ae <TickFct_CheckPin+0x48>
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <TickFct_CheckPin+0x82>
						isCorrect = 0;
						break;
					}
					++checkCounter;
				}
				if(isCorrect){
 9da:	80 91 61 02 	lds	r24, 0x0261
 9de:	88 23       	and	r24, r24
 9e0:	19 f0       	breq	.+6      	; 0x9e8 <TickFct_CheckPin+0x82>
					lockedFlag = 0;
 9e2:	10 92 fe 01 	sts	0x01FE, r1
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <TickFct_CheckPin+0x88>
				}
				else{
					lockedFlag = 1;
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	80 93 fe 01 	sts	0x01FE, r24
				}
				checkPinFlag = 0;
 9ee:	10 92 ff 01 	sts	0x01FF, r1
		case checkInit:
			state = checkWait;
			break;
		case checkWait:
			if(checkPinFlag){
				state = checkCheck;
 9f2:	82 e0       	ldi	r24, 0x02	; 2
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <TickFct_CheckPin+0x96>
			break;
		case checkCheck:
			state = checkWait;
			break;
		default:
			state = checkInit;
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case checkCheck:
			break;
	}
	return state;
}
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret

00000a06 <__vector_13>:
	}
	return state;
}

ISR(TIMER1_COMPA_vect)
{
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
 a10:	0b b6       	in	r0, 0x3b	; 59
 a12:	0f 92       	push	r0
 a14:	ef 92       	push	r14
 a16:	ff 92       	push	r15
 a18:	0f 93       	push	r16
 a1a:	1f 93       	push	r17
 a1c:	2f 93       	push	r18
 a1e:	3f 93       	push	r19
 a20:	4f 93       	push	r20
 a22:	5f 93       	push	r21
 a24:	6f 93       	push	r22
 a26:	7f 93       	push	r23
 a28:	8f 93       	push	r24
 a2a:	9f 93       	push	r25
 a2c:	af 93       	push	r26
 a2e:	bf 93       	push	r27
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	ef 93       	push	r30
 a36:	ff 93       	push	r31
 a38:	c0 e0       	ldi	r28, 0x00	; 0
 a3a:	d2 e0       	ldi	r29, 0x02	; 2
 a3c:	0f 2e       	mov	r0, r31
 a3e:	fc e3       	ldi	r31, 0x3C	; 60
 a40:	ef 2e       	mov	r14, r31
 a42:	f2 e0       	ldi	r31, 0x02	; 2
 a44:	ff 2e       	mov	r15, r31
 a46:	f0 2d       	mov	r31, r0
 a48:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < 5; ++i){
		if( tasks[i].elapsedTime >= tasks[i].period){
 a4a:	4e 81       	ldd	r20, Y+6	; 0x06
 a4c:	5f 81       	ldd	r21, Y+7	; 0x07
 a4e:	68 85       	ldd	r22, Y+8	; 0x08
 a50:	79 85       	ldd	r23, Y+9	; 0x09
 a52:	8a 81       	ldd	r24, Y+2	; 0x02
 a54:	9b 81       	ldd	r25, Y+3	; 0x03
 a56:	ac 81       	ldd	r26, Y+4	; 0x04
 a58:	bd 81       	ldd	r27, Y+5	; 0x05
 a5a:	48 17       	cp	r20, r24
 a5c:	59 07       	cpc	r21, r25
 a5e:	6a 07       	cpc	r22, r26
 a60:	7b 07       	cpc	r23, r27
 a62:	58 f0       	brcs	.+22     	; 0xa7a <__vector_13+0x74>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 a64:	ea 85       	ldd	r30, Y+10	; 0x0a
 a66:	fb 85       	ldd	r31, Y+11	; 0x0b
 a68:	88 81       	ld	r24, Y
 a6a:	99 81       	ldd	r25, Y+1	; 0x01
 a6c:	09 95       	icall
 a6e:	99 83       	std	Y+1, r25	; 0x01
 a70:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 a72:	1e 82       	std	Y+6, r1	; 0x06
 a74:	1f 82       	std	Y+7, r1	; 0x07
 a76:	18 86       	std	Y+8, r1	; 0x08
 a78:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += 1;
 a7a:	f8 01       	movw	r30, r16
 a7c:	86 81       	ldd	r24, Z+6	; 0x06
 a7e:	97 81       	ldd	r25, Z+7	; 0x07
 a80:	a0 85       	ldd	r26, Z+8	; 0x08
 a82:	b1 85       	ldd	r27, Z+9	; 0x09
 a84:	01 96       	adiw	r24, 0x01	; 1
 a86:	a1 1d       	adc	r26, r1
 a88:	b1 1d       	adc	r27, r1
 a8a:	86 83       	std	Z+6, r24	; 0x06
 a8c:	97 83       	std	Z+7, r25	; 0x07
 a8e:	a0 87       	std	Z+8, r26	; 0x08
 a90:	b1 87       	std	Z+9, r27	; 0x09
 a92:	2c 96       	adiw	r28, 0x0c	; 12
}

ISR(TIMER1_COMPA_vect)
{
	unsigned char i;
	for(i = 0; i < 5; ++i){
 a94:	ce 15       	cp	r28, r14
 a96:	df 05       	cpc	r29, r15
 a98:	b9 f6       	brne	.-82     	; 0xa48 <__vector_13+0x42>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 a9a:	ff 91       	pop	r31
 a9c:	ef 91       	pop	r30
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	bf 91       	pop	r27
 aa4:	af 91       	pop	r26
 aa6:	9f 91       	pop	r25
 aa8:	8f 91       	pop	r24
 aaa:	7f 91       	pop	r23
 aac:	6f 91       	pop	r22
 aae:	5f 91       	pop	r21
 ab0:	4f 91       	pop	r20
 ab2:	3f 91       	pop	r19
 ab4:	2f 91       	pop	r18
 ab6:	1f 91       	pop	r17
 ab8:	0f 91       	pop	r16
 aba:	ff 90       	pop	r15
 abc:	ef 90       	pop	r14
 abe:	0f 90       	pop	r0
 ac0:	0b be       	out	0x3b, r0	; 59
 ac2:	0f 90       	pop	r0
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	0f 90       	pop	r0
 ac8:	1f 90       	pop	r1
 aca:	18 95       	reti

00000acc <main>:

int main(void)
{
	DDRA = 0xFF;	PORTA = 0x00;
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	81 b9       	out	0x01, r24	; 1
 ad0:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xF0;	PORTB = 0x0F;
 ad2:	90 ef       	ldi	r25, 0xF0	; 240
 ad4:	94 b9       	out	0x04, r25	; 4
 ad6:	9f e0       	ldi	r25, 0x0F	; 15
 ad8:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 ada:	87 b9       	out	0x07, r24	; 7
 adc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0x00;	PORTD = 0xFF;
 ade:	1a b8       	out	0x0a, r1	; 10
 ae0:	8b b9       	out	0x0b, r24	; 11
	initUSART(0);
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	cc db       	rcall	.-2152   	; 0x27e <initUSART>
	initUSART(1);
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	ca db       	rcall	.-2156   	; 0x27e <initUSART>
	LCD_init();
 aea:	97 db       	rcall	.-2258   	; 0x21a <LCD_init>
	tasks[0].state = controllerinit;
 aec:	10 92 01 02 	sts	0x0201, r1
 af0:	10 92 00 02 	sts	0x0200, r1
	tasks[0].period = 1;
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	a0 e0       	ldi	r26, 0x00	; 0
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	80 93 02 02 	sts	0x0202, r24
 b00:	90 93 03 02 	sts	0x0203, r25
 b04:	a0 93 04 02 	sts	0x0204, r26
 b08:	b0 93 05 02 	sts	0x0205, r27
	tasks[0].elapsedTime = 1;
 b0c:	80 93 06 02 	sts	0x0206, r24
 b10:	90 93 07 02 	sts	0x0207, r25
 b14:	a0 93 08 02 	sts	0x0208, r26
 b18:	b0 93 09 02 	sts	0x0209, r27
	tasks[0].TickFct = &TickFct_Controller;
 b1c:	8a e1       	ldi	r24, 0x1A	; 26
 b1e:	93 e0       	ldi	r25, 0x03	; 3
 b20:	90 93 0b 02 	sts	0x020B, r25
 b24:	80 93 0a 02 	sts	0x020A, r24
	
	tasks[1].state = bluetoothWait;
 b28:	10 92 0d 02 	sts	0x020D, r1
 b2c:	10 92 0c 02 	sts	0x020C, r1
	tasks[1].period = 5;
 b30:	85 e0       	ldi	r24, 0x05	; 5
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	a0 e0       	ldi	r26, 0x00	; 0
 b36:	b0 e0       	ldi	r27, 0x00	; 0
 b38:	80 93 0e 02 	sts	0x020E, r24
 b3c:	90 93 0f 02 	sts	0x020F, r25
 b40:	a0 93 10 02 	sts	0x0210, r26
 b44:	b0 93 11 02 	sts	0x0211, r27
	tasks[1].elapsedTime = 5;
 b48:	80 93 12 02 	sts	0x0212, r24
 b4c:	90 93 13 02 	sts	0x0213, r25
 b50:	a0 93 14 02 	sts	0x0214, r26
 b54:	b0 93 15 02 	sts	0x0215, r27
	tasks[1].TickFct = &TickFct_BluetoothReceiver;
 b58:	2a ee       	ldi	r18, 0xEA	; 234
 b5a:	31 e0       	ldi	r19, 0x01	; 1
 b5c:	30 93 17 02 	sts	0x0217, r19
 b60:	20 93 16 02 	sts	0x0216, r18
	
	tasks[2].state = keypadWait1;
 b64:	10 92 19 02 	sts	0x0219, r1
 b68:	10 92 18 02 	sts	0x0218, r1
	tasks[2].period = 10;
 b6c:	4a e0       	ldi	r20, 0x0A	; 10
 b6e:	50 e0       	ldi	r21, 0x00	; 0
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	70 e0       	ldi	r23, 0x00	; 0
 b74:	40 93 1a 02 	sts	0x021A, r20
 b78:	50 93 1b 02 	sts	0x021B, r21
 b7c:	60 93 1c 02 	sts	0x021C, r22
 b80:	70 93 1d 02 	sts	0x021D, r23
	tasks[2].elapsedTime = 10;
 b84:	40 93 1e 02 	sts	0x021E, r20
 b88:	50 93 1f 02 	sts	0x021F, r21
 b8c:	60 93 20 02 	sts	0x0220, r22
 b90:	70 93 21 02 	sts	0x0221, r23
	tasks[2].TickFct = &TickFct_KeypadReceiver;
 b94:	26 e5       	ldi	r18, 0x56	; 86
 b96:	32 e0       	ldi	r19, 0x02	; 2
 b98:	30 93 23 02 	sts	0x0223, r19
 b9c:	20 93 22 02 	sts	0x0222, r18
	
	tasks[3].state = checkInit;
 ba0:	10 92 25 02 	sts	0x0225, r1
 ba4:	10 92 24 02 	sts	0x0224, r1
	tasks[3].period = 15;
 ba8:	4f e0       	ldi	r20, 0x0F	; 15
 baa:	50 e0       	ldi	r21, 0x00	; 0
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	40 93 26 02 	sts	0x0226, r20
 bb4:	50 93 27 02 	sts	0x0227, r21
 bb8:	60 93 28 02 	sts	0x0228, r22
 bbc:	70 93 29 02 	sts	0x0229, r23
	tasks[3].elapsedTime = 15;
 bc0:	40 93 2a 02 	sts	0x022A, r20
 bc4:	50 93 2b 02 	sts	0x022B, r21
 bc8:	60 93 2c 02 	sts	0x022C, r22
 bcc:	70 93 2d 02 	sts	0x022D, r23
	tasks[3].TickFct = &TickFct_CheckPin;
 bd0:	23 eb       	ldi	r18, 0xB3	; 179
 bd2:	34 e0       	ldi	r19, 0x04	; 4
 bd4:	30 93 2f 02 	sts	0x022F, r19
 bd8:	20 93 2e 02 	sts	0x022E, r18
	
	tasks[4].state = usartInit;
 bdc:	10 92 31 02 	sts	0x0231, r1
 be0:	10 92 30 02 	sts	0x0230, r1
	tasks[4].period = 5;
 be4:	80 93 32 02 	sts	0x0232, r24
 be8:	90 93 33 02 	sts	0x0233, r25
 bec:	a0 93 34 02 	sts	0x0234, r26
 bf0:	b0 93 35 02 	sts	0x0235, r27
	tasks[4].elapsedTime = 5;
 bf4:	80 93 36 02 	sts	0x0236, r24
 bf8:	90 93 37 02 	sts	0x0237, r25
 bfc:	a0 93 38 02 	sts	0x0238, r26
 c00:	b0 93 39 02 	sts	0x0239, r27
	tasks[4].TickFct = &TickFct_USART;
 c04:	84 e9       	ldi	r24, 0x94	; 148
 c06:	91 e0       	ldi	r25, 0x01	; 1
 c08:	90 93 3b 02 	sts	0x023B, r25
 c0c:	80 93 3a 02 	sts	0x023A, r24

unsigned short tasksNum;
unsigned short tasksPeriodGCD;

void TimerSet(unsigned long ms){
	TCNT1 = 0;		//Initialize avr counter
 c10:	10 92 85 00 	sts	0x0085, r1
 c14:	10 92 84 00 	sts	0x0084, r1
					
	OCR1A = 125 * ms;	// AVR output compare register OCR1A.
 c18:	8d e7       	ldi	r24, 0x7D	; 125
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	90 93 89 00 	sts	0x0089, r25
 c20:	80 93 88 00 	sts	0x0088, r24
	
	TimerSet(1);
	TimerOn();
 c24:	c5 da       	rcall	.-2678   	; 0x1b0 <TimerOn>
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <main+0x15a>

00000c28 <__tablejump2__>:
 c28:	ee 0f       	add	r30, r30
 c2a:	ff 1f       	adc	r31, r31

00000c2c <__tablejump__>:
 c2c:	05 90       	lpm	r0, Z+
 c2e:	f4 91       	lpm	r31, Z
 c30:	e0 2d       	mov	r30, r0
 c32:	09 94       	ijmp

00000c34 <__eerd_byte_m1284>:
 c34:	f9 99       	sbic	0x1f, 1	; 31
 c36:	fe cf       	rjmp	.-4      	; 0xc34 <__eerd_byte_m1284>
 c38:	92 bd       	out	0x22, r25	; 34
 c3a:	81 bd       	out	0x21, r24	; 33
 c3c:	f8 9a       	sbi	0x1f, 0	; 31
 c3e:	99 27       	eor	r25, r25
 c40:	80 b5       	in	r24, 0x20	; 32
 c42:	08 95       	ret

00000c44 <__eewr_byte_m1284>:
 c44:	26 2f       	mov	r18, r22

00000c46 <__eewr_r18_m1284>:
 c46:	f9 99       	sbic	0x1f, 1	; 31
 c48:	fe cf       	rjmp	.-4      	; 0xc46 <__eewr_r18_m1284>
 c4a:	1f ba       	out	0x1f, r1	; 31
 c4c:	92 bd       	out	0x22, r25	; 34
 c4e:	81 bd       	out	0x21, r24	; 33
 c50:	20 bd       	out	0x20, r18	; 32
 c52:	0f b6       	in	r0, 0x3f	; 63
 c54:	f8 94       	cli
 c56:	fa 9a       	sbi	0x1f, 2	; 31
 c58:	f9 9a       	sbi	0x1f, 1	; 31
 c5a:	0f be       	out	0x3f, r0	; 63
 c5c:	01 96       	adiw	r24, 0x01	; 1
 c5e:	08 95       	ret

00000c60 <_exit>:
 c60:	f8 94       	cli

00000c62 <__stop_program>:
 c62:	ff cf       	rjmp	.-2      	; 0xc62 <__stop_program>
