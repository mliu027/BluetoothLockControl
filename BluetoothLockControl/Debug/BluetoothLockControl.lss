
BluetoothLockControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00000b8e  00000c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  008001ec  008001ec  00000d0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f72  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036f  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d8c  00000000  00000000  00002137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000620  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e64  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	52 c4       	rjmp	.+2212   	; 0x8da <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 03       	mulsu	r18, r19
  8e:	2f 03       	fmul	r18, r23
  90:	5e 03       	fmul	r21, r22
  92:	46 03       	mulsu	r20, r22
  94:	6c 03       	fmul	r22, r20
  96:	9a 03       	fmulsu	r17, r18
  98:	8b 03       	fmulsu	r16, r19
  9a:	ac 03       	fmulsu	r18, r20
  9c:	b5 03       	fmuls	r19, r21

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ee e8       	ldi	r30, 0x8E	; 142
  b2:	fb e0       	ldi	r31, 0x0B	; 11
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	ac 3e       	cpi	r26, 0xEC	; 236
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	22 e0       	ldi	r18, 0x02	; 2
  c6:	ac ee       	ldi	r26, 0xEC	; 236
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ab 35       	cpi	r26, 0x5B	; 91
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	65 d4       	rcall	.+2250   	; 0x9a0 <main>
  d6:	59 c5       	rjmp	.+2738   	; 0xb8a <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <GetKeypadKey>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  da:	8f ee       	ldi	r24, 0xEF	; 239
  dc:	85 b9       	out	0x05, r24	; 5
  de:	00 00       	nop
  e0:	18 9b       	sbis	0x03, 0	; 3
  e2:	45 c0       	rjmp	.+138    	; 0x16e <GetKeypadKey+0x94>
  e4:	83 b1       	in	r24, 0x03	; 3
  e6:	80 95       	com	r24
  e8:	81 fd       	sbrc	r24, 1
  ea:	43 c0       	rjmp	.+134    	; 0x172 <GetKeypadKey+0x98>
  ec:	83 b1       	in	r24, 0x03	; 3
  ee:	80 95       	com	r24
  f0:	82 fd       	sbrc	r24, 2
  f2:	41 c0       	rjmp	.+130    	; 0x176 <GetKeypadKey+0x9c>
  f4:	83 b1       	in	r24, 0x03	; 3
  f6:	80 95       	com	r24
  f8:	83 fd       	sbrc	r24, 3
  fa:	3f c0       	rjmp	.+126    	; 0x17a <GetKeypadKey+0xa0>
  fc:	8f ed       	ldi	r24, 0xDF	; 223
  fe:	85 b9       	out	0x05, r24	; 5
 100:	00 00       	nop
 102:	18 9b       	sbis	0x03, 0	; 3
 104:	3c c0       	rjmp	.+120    	; 0x17e <GetKeypadKey+0xa4>
 106:	83 b1       	in	r24, 0x03	; 3
 108:	80 95       	com	r24
 10a:	81 fd       	sbrc	r24, 1
 10c:	3a c0       	rjmp	.+116    	; 0x182 <GetKeypadKey+0xa8>
 10e:	83 b1       	in	r24, 0x03	; 3
 110:	80 95       	com	r24
 112:	82 fd       	sbrc	r24, 2
 114:	38 c0       	rjmp	.+112    	; 0x186 <GetKeypadKey+0xac>
 116:	83 b1       	in	r24, 0x03	; 3
 118:	80 95       	com	r24
 11a:	83 fd       	sbrc	r24, 3
 11c:	36 c0       	rjmp	.+108    	; 0x18a <GetKeypadKey+0xb0>
 11e:	8f eb       	ldi	r24, 0xBF	; 191
 120:	85 b9       	out	0x05, r24	; 5
 122:	00 00       	nop
 124:	18 9b       	sbis	0x03, 0	; 3
 126:	33 c0       	rjmp	.+102    	; 0x18e <GetKeypadKey+0xb4>
 128:	83 b1       	in	r24, 0x03	; 3
 12a:	80 95       	com	r24
 12c:	81 fd       	sbrc	r24, 1
 12e:	31 c0       	rjmp	.+98     	; 0x192 <GetKeypadKey+0xb8>
 130:	83 b1       	in	r24, 0x03	; 3
 132:	80 95       	com	r24
 134:	82 fd       	sbrc	r24, 2
 136:	2f c0       	rjmp	.+94     	; 0x196 <GetKeypadKey+0xbc>
 138:	83 b1       	in	r24, 0x03	; 3
 13a:	80 95       	com	r24
 13c:	83 fd       	sbrc	r24, 3
 13e:	2d c0       	rjmp	.+90     	; 0x19a <GetKeypadKey+0xc0>
 140:	8f e7       	ldi	r24, 0x7F	; 127
 142:	85 b9       	out	0x05, r24	; 5
 144:	00 00       	nop
 146:	93 b1       	in	r25, 0x03	; 3
 148:	90 95       	com	r25
 14a:	89 2f       	mov	r24, r25
 14c:	81 70       	andi	r24, 0x01	; 1
 14e:	90 fd       	sbrc	r25, 0
 150:	26 c0       	rjmp	.+76     	; 0x19e <GetKeypadKey+0xc4>
 152:	93 b1       	in	r25, 0x03	; 3
 154:	90 95       	com	r25
 156:	91 fd       	sbrc	r25, 1
 158:	24 c0       	rjmp	.+72     	; 0x1a2 <GetKeypadKey+0xc8>
 15a:	93 b1       	in	r25, 0x03	; 3
 15c:	90 95       	com	r25
 15e:	92 fd       	sbrc	r25, 2
 160:	22 c0       	rjmp	.+68     	; 0x1a6 <GetKeypadKey+0xcc>
 162:	93 b1       	in	r25, 0x03	; 3
 164:	90 95       	com	r25
 166:	93 ff       	sbrs	r25, 3
 168:	1f c0       	rjmp	.+62     	; 0x1a8 <GetKeypadKey+0xce>
 16a:	84 e4       	ldi	r24, 0x44	; 68
 16c:	08 95       	ret
 16e:	81 e3       	ldi	r24, 0x31	; 49
 170:	08 95       	ret
 172:	84 e3       	ldi	r24, 0x34	; 52
 174:	08 95       	ret
 176:	87 e3       	ldi	r24, 0x37	; 55
 178:	08 95       	ret
 17a:	8a e2       	ldi	r24, 0x2A	; 42
 17c:	08 95       	ret
 17e:	82 e3       	ldi	r24, 0x32	; 50
 180:	08 95       	ret
 182:	85 e3       	ldi	r24, 0x35	; 53
 184:	08 95       	ret
 186:	88 e3       	ldi	r24, 0x38	; 56
 188:	08 95       	ret
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	08 95       	ret
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	08 95       	ret
 192:	86 e3       	ldi	r24, 0x36	; 54
 194:	08 95       	ret
 196:	89 e3       	ldi	r24, 0x39	; 57
 198:	08 95       	ret
 19a:	83 e2       	ldi	r24, 0x23	; 35
 19c:	08 95       	ret
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	08 95       	ret
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	08 95       	ret
 1a6:	83 e4       	ldi	r24, 0x43	; 67
 1a8:	08 95       	ret

000001aa <TimerOn>:
 1aa:	8b e0       	ldi	r24, 0x0B	; 11
 1ac:	80 93 81 00 	sts	0x0081, r24
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	80 93 6f 00 	sts	0x006F, r24
 1b6:	8f b7       	in	r24, 0x3f	; 63
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	08 95       	ret

000001be <delay_ms>:
 1be:	18 16       	cp	r1, r24
 1c0:	19 06       	cpc	r1, r25
 1c2:	9c f4       	brge	.+38     	; 0x1ea <delay_ms+0x2c>
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	77 e0       	ldi	r23, 0x07	; 7
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <delay_ms+0x26>
 1ce:	00 00       	nop
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	31 09       	sbc	r19, r1
 1d4:	21 15       	cp	r18, r1
 1d6:	31 05       	cpc	r19, r1
 1d8:	d1 f7       	brne	.-12     	; 0x1ce <delay_ms+0x10>
 1da:	4f 5f       	subi	r20, 0xFF	; 255
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
 1de:	48 17       	cp	r20, r24
 1e0:	59 07       	cpc	r21, r25
 1e2:	19 f0       	breq	.+6      	; 0x1ea <delay_ms+0x2c>
 1e4:	27 2f       	mov	r18, r23
 1e6:	36 2f       	mov	r19, r22
 1e8:	f2 cf       	rjmp	.-28     	; 0x1ce <delay_ms+0x10>
 1ea:	08 95       	ret

000001ec <LCD_WriteCommand>:
 1ec:	16 98       	cbi	0x02, 6	; 2
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	17 9a       	sbi	0x02, 7	; 2
 1f2:	00 00       	nop
 1f4:	17 98       	cbi	0x02, 7	; 2
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	e1 cf       	rjmp	.-62     	; 0x1be <delay_ms>
 1fc:	08 95       	ret

000001fe <LCD_ClearScreen>:
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	f5 cf       	rjmp	.-22     	; 0x1ec <LCD_WriteCommand>
 202:	08 95       	ret

00000204 <LCD_Cursor>:
 204:	81 31       	cpi	r24, 0x11	; 17
 206:	18 f4       	brcc	.+6      	; 0x20e <LCD_Cursor+0xa>
 208:	81 58       	subi	r24, 0x81	; 129
 20a:	f0 cf       	rjmp	.-32     	; 0x1ec <LCD_WriteCommand>
 20c:	08 95       	ret
 20e:	81 55       	subi	r24, 0x51	; 81
 210:	ed cf       	rjmp	.-38     	; 0x1ec <LCD_WriteCommand>
 212:	08 95       	ret

00000214 <LCD_init>:
 214:	84 e6       	ldi	r24, 0x64	; 100
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	d2 df       	rcall	.-92     	; 0x1be <delay_ms>
 21a:	88 e3       	ldi	r24, 0x38	; 56
 21c:	e7 df       	rcall	.-50     	; 0x1ec <LCD_WriteCommand>
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	e5 df       	rcall	.-54     	; 0x1ec <LCD_WriteCommand>
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	e3 df       	rcall	.-58     	; 0x1ec <LCD_WriteCommand>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	e1 df       	rcall	.-62     	; 0x1ec <LCD_WriteCommand>
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	c7 cf       	rjmp	.-114    	; 0x1be <delay_ms>
 230:	08 95       	ret

00000232 <LCD_WriteData>:
 232:	16 9a       	sbi	0x02, 6	; 2
 234:	88 b9       	out	0x08, r24	; 8
 236:	17 9a       	sbi	0x02, 7	; 2
 238:	00 00       	nop
 23a:	17 98       	cbi	0x02, 7	; 2
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	be cf       	rjmp	.-132    	; 0x1be <delay_ms>
 242:	08 95       	ret

00000244 <LCD_DisplayString>:
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	18 2f       	mov	r17, r24
 24e:	eb 01       	movw	r28, r22
 250:	d6 df       	rcall	.-84     	; 0x1fe <LCD_ClearScreen>
 252:	88 81       	ld	r24, Y
 254:	88 23       	and	r24, r24
 256:	59 f0       	breq	.+22     	; 0x26e <LCD_DisplayString+0x2a>
 258:	01 e0       	ldi	r16, 0x01	; 1
 25a:	01 0f       	add	r16, r17
 25c:	81 2f       	mov	r24, r17
 25e:	d2 df       	rcall	.-92     	; 0x204 <LCD_Cursor>
 260:	89 91       	ld	r24, Y+
 262:	e7 df       	rcall	.-50     	; 0x232 <LCD_WriteData>
 264:	88 81       	ld	r24, Y
 266:	88 23       	and	r24, r24
 268:	11 f0       	breq	.+4      	; 0x26e <LCD_DisplayString+0x2a>
 26a:	10 2f       	mov	r17, r16
 26c:	f5 cf       	rjmp	.-22     	; 0x258 <LCD_DisplayString+0x14>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <initUSART>:
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	81 f0       	breq	.+32     	; 0x29c <initUSART+0x24>
 27c:	e1 ec       	ldi	r30, 0xC1	; 193
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	88 61       	ori	r24, 0x18	; 24
 284:	80 83       	st	Z, r24
 286:	e2 ec       	ldi	r30, 0xC2	; 194
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	86 60       	ori	r24, 0x06	; 6
 28e:	80 83       	st	Z, r24
 290:	87 e6       	ldi	r24, 0x67	; 103
 292:	80 93 c4 00 	sts	0x00C4, r24
 296:	10 92 c5 00 	sts	0x00C5, r1
 29a:	08 95       	ret
 29c:	e9 ec       	ldi	r30, 0xC9	; 201
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 61       	ori	r24, 0x18	; 24
 2a4:	80 83       	st	Z, r24
 2a6:	ea ec       	ldi	r30, 0xCA	; 202
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	86 60       	ori	r24, 0x06	; 6
 2ae:	80 83       	st	Z, r24
 2b0:	87 e6       	ldi	r24, 0x67	; 103
 2b2:	80 93 cc 00 	sts	0x00CC, r24
 2b6:	10 92 cd 00 	sts	0x00CD, r1
 2ba:	08 95       	ret

000002bc <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	29 f4       	brne	.+10     	; 0x2ca <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c0:	80 91 c8 00 	lds	r24, 0x00C8
 2c4:	88 23       	and	r24, r24
 2c6:	84 f0       	brlt	.+32     	; 0x2e8 <USART_Flush+0x2c>
 2c8:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2ca:	80 91 c0 00 	lds	r24, 0x00C0
 2ce:	88 23       	and	r24, r24
 2d0:	ac f4       	brge	.+42     	; 0x2fc <USART_Flush+0x40>
 2d2:	a6 ec       	ldi	r26, 0xC6	; 198
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	e0 ec       	ldi	r30, 0xC0	; 192
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	8c 91       	ld	r24, X
 2dc:	80 93 ec 01 	sts	0x01EC, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	88 23       	and	r24, r24
 2e4:	d4 f3       	brlt	.-12     	; 0x2da <USART_Flush+0x1e>
 2e6:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2e8:	ae ec       	ldi	r26, 0xCE	; 206
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e8 ec       	ldi	r30, 0xC8	; 200
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	8c 91       	ld	r24, X
 2f2:	80 93 ec 01 	sts	0x01EC, r24
 2f6:	80 81       	ld	r24, Z
 2f8:	88 23       	and	r24, r24
 2fa:	d4 f3       	brlt	.-12     	; 0x2f0 <USART_Flush+0x34>
 2fc:	08 95       	ret

000002fe <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 2fe:	61 30       	cpi	r22, 0x01	; 1
 300:	41 f0       	breq	.+16     	; 0x312 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 302:	e0 ec       	ldi	r30, 0xC0	; 192
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	90 81       	ld	r25, Z
 308:	95 ff       	sbrs	r25, 5
 30a:	fd cf       	rjmp	.-6      	; 0x306 <USART_Send+0x8>
		UDR0 = sendMe;
 30c:	80 93 c6 00 	sts	0x00C6, r24
 310:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 312:	e8 ec       	ldi	r30, 0xC8	; 200
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	90 81       	ld	r25, Z
 318:	95 ff       	sbrs	r25, 5
 31a:	fd cf       	rjmp	.-6      	; 0x316 <USART_Send+0x18>
		UDR1 = sendMe;
 31c:	80 93 ce 00 	sts	0x00CE, r24
 320:	08 95       	ret

00000322 <TickFct_USART>:
	return state;
}

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	switch(state){
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	91 05       	cpc	r25, r1
 326:	59 f0       	breq	.+22     	; 0x33e <TickFct_USART+0x1c>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	91 05       	cpc	r25, r1
 32c:	e9 f0       	breq	.+58     	; 0x368 <TickFct_USART+0x46>
 32e:	89 2b       	or	r24, r25
 330:	81 f5       	brne	.+96     	; 0x392 <TickFct_USART+0x70>
		case usartInit:
			state = usartLocked;
			USART_Send(0x01, 1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	e3 df       	rcall	.-58     	; 0x2fe <USART_Send>

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	switch(state){
		case usartInit:
			state = usartLocked;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
			USART_Send(0x01, 1);
			break;
 33c:	08 95       	ret
		case usartLocked:
			if(lockedFlag){
 33e:	20 91 f0 01 	lds	r18, 0x01F0
 342:	21 11       	cpse	r18, r1
 344:	28 c0       	rjmp	.+80     	; 0x396 <TickFct_USART+0x74>
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
				USART_Send(0x00, 1);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	d9 df       	rcall	.-78     	; 0x2fe <USART_Send>
				LCD_DisplayString(1, "Unlocking...");
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	71 e0       	ldi	r23, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	78 df       	rcall	.-272    	; 0x244 <LCD_DisplayString>
				delay_ms(5000);
 354:	88 e8       	ldi	r24, 0x88	; 136
 356:	93 e1       	ldi	r25, 0x13	; 19
 358:	32 df       	rcall	.-412    	; 0x1be <delay_ms>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
 35a:	6d e0       	ldi	r22, 0x0D	; 13
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	71 df       	rcall	.-286    	; 0x244 <LCD_DisplayString>
		case usartLocked:
			if(lockedFlag){
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	08 95       	ret
				delay_ms(5000);
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
 368:	20 91 f0 01 	lds	r18, 0x01F0
 36c:	22 23       	and	r18, r18
 36e:	99 f0       	breq	.+38     	; 0x396 <TickFct_USART+0x74>
				state = usartLocked;
				USART_Send(0x01, 1);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	c4 df       	rcall	.-120    	; 0x2fe <USART_Send>
				LCD_DisplayString(1, "Locking...");
 376:	6d e2       	ldi	r22, 0x2D	; 45
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	63 df       	rcall	.-314    	; 0x244 <LCD_DisplayString>
				delay_ms(5000);
 37e:	88 e8       	ldi	r24, 0x88	; 136
 380:	93 e1       	ldi	r25, 0x13	; 19
 382:	1d df       	rcall	.-454    	; 0x1be <delay_ms>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 384:	68 e3       	ldi	r22, 0x38	; 56
 386:	71 e0       	ldi	r23, 0x01	; 1
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	5c df       	rcall	.-328    	; 0x244 <LCD_DisplayString>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
				state = usartLocked;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	08 95       	ret
			else{
				state = usartUnlocked;
			}
			break;
		default:
			state = usartInit;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	return state;
}
 396:	08 95       	ret

00000398 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	41 f0       	breq	.+16     	; 0x3ac <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 39c:	e0 ec       	ldi	r30, 0xC0	; 192
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	88 23       	and	r24, r24
 3a4:	ec f7       	brge	.-6      	; 0x3a0 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 3a6:	80 91 c6 00 	lds	r24, 0x00C6
 3aa:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 3ac:	e8 ec       	ldi	r30, 0xC8	; 200
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	88 23       	and	r24, r24
 3b4:	ec f7       	brge	.-6      	; 0x3b0 <USART_Receive+0x18>
		return UDR1;
 3b6:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 3ba:	08 95       	ret

000003bc <clearInputPin>:
unsigned char pinInputComplete;
//---------------Flags---------------


void clearInputPin()
{
 3bc:	e3 e4       	ldi	r30, 0x43	; 67
 3be:	f2 e0       	ldi	r31, 0x02	; 2
 3c0:	8b e4       	ldi	r24, 0x4B	; 75
 3c2:	92 e0       	ldi	r25, 0x02	; 2
	for(unsigned char i = 0; i < 8; ++i){
		inputPin[i] = '\0';
 3c4:	11 92       	st	Z+, r1
//---------------Flags---------------


void clearInputPin()
{
	for(unsigned char i = 0; i < 8; ++i){
 3c6:	e8 17       	cp	r30, r24
 3c8:	f9 07       	cpc	r31, r25
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <clearInputPin+0x8>
		inputPin[i] = '\0';
	}
}
 3cc:	08 95       	ret

000003ce <TickFct_BluetoothReceiver>:
	}
	return state;
}

enum SM_BluetoothReceiver{bluetoothWait, bluetoothReceived, bluetoothWaitForNext};
int TickFct_BluetoothReceiver(int state){
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
	switch(state){
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	91 05       	cpc	r25, r1
 3d8:	01 f1       	breq	.+64     	; 0x41a <TickFct_BluetoothReceiver+0x4c>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	91 05       	cpc	r25, r1
 3de:	41 f1       	breq	.+80     	; 0x430 <TickFct_BluetoothReceiver+0x62>
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <TickFct_BluetoothReceiver+0x18>
 3e4:	4e c0       	rjmp	.+156    	; 0x482 <TickFct_BluetoothReceiver+0xb4>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 3e6:	80 91 c0 00 	lds	r24, 0x00C0
		case bluetoothWait:
			if(USART_HasReceived(0) && !bluetoothEnable){
 3ea:	88 23       	and	r24, r24
 3ec:	34 f4       	brge	.+12     	; 0x3fa <TickFct_BluetoothReceiver+0x2c>
 3ee:	80 91 32 02 	lds	r24, 0x0232
 3f2:	81 11       	cpse	r24, r1
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <TickFct_BluetoothReceiver+0x2c>
				USART_Flush(0);
 3f6:	62 df       	rcall	.-316    	; 0x2bc <USART_Flush>
				state = bluetoothWait;
 3f8:	52 c0       	rjmp	.+164    	; 0x49e <TickFct_BluetoothReceiver+0xd0>
 3fa:	80 91 c0 00 	lds	r24, 0x00C0
			}
			else if(USART_HasReceived(0) && bluetoothEnable){
 3fe:	88 23       	and	r24, r24
 400:	0c f0       	brlt	.+2      	; 0x404 <TickFct_BluetoothReceiver+0x36>
 402:	4d c0       	rjmp	.+154    	; 0x49e <TickFct_BluetoothReceiver+0xd0>
 404:	80 91 32 02 	lds	r24, 0x0232
 408:	88 23       	and	r24, r24
 40a:	09 f4       	brne	.+2      	; 0x40e <TickFct_BluetoothReceiver+0x40>
 40c:	48 c0       	rjmp	.+144    	; 0x49e <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothReceived;
				position = 0;
 40e:	10 92 2e 02 	sts	0x022E, r1
				lastReceivedChar = 0;
 412:	10 92 58 02 	sts	0x0258, r1
				clearInputPin();
 416:	d2 df       	rcall	.-92     	; 0x3bc <clearInputPin>
 418:	40 c0       	rjmp	.+128    	; 0x49a <TickFct_BluetoothReceiver+0xcc>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
 41a:	80 91 32 02 	lds	r24, 0x0232
 41e:	88 23       	and	r24, r24
 420:	99 f1       	breq	.+102    	; 0x488 <TickFct_BluetoothReceiver+0xba>
				state = bluetoothWait;
			}
			else if(lastReceivedChar != '*'){
 422:	80 91 58 02 	lds	r24, 0x0258
 426:	8a 32       	cpi	r24, 0x2A	; 42
 428:	91 f1       	breq	.+100    	; 0x48e <TickFct_BluetoothReceiver+0xc0>
				state = bluetoothWaitForNext;
 42a:	c2 e0       	ldi	r28, 0x02	; 2
 42c:	d0 e0       	ldi	r29, 0x00	; 0
 42e:	37 c0       	rjmp	.+110    	; 0x49e <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
 430:	80 91 32 02 	lds	r24, 0x0232
 434:	88 23       	and	r24, r24
 436:	71 f1       	breq	.+92     	; 0x494 <TickFct_BluetoothReceiver+0xc6>
 438:	80 91 c0 00 	lds	r24, 0x00C0
				state = bluetoothWait;
			}
			else if(!USART_HasReceived(0)){
 43c:	88 23       	and	r24, r24
 43e:	7c f5       	brge	.+94     	; 0x49e <TickFct_BluetoothReceiver+0xd0>
 440:	2c c0       	rjmp	.+88     	; 0x49a <TickFct_BluetoothReceiver+0xcc>
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
				lastReceivedChar = USART_Receive(0);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	a9 df       	rcall	.-174    	; 0x398 <USART_Receive>
 446:	80 93 58 02 	sts	0x0258, r24
				if(lastReceivedChar != '*'){
 44a:	8a 32       	cpi	r24, 0x2A	; 42
 44c:	59 f0       	breq	.+22     	; 0x464 <TickFct_BluetoothReceiver+0x96>
					inputPin[position++] = lastReceivedChar;
 44e:	e0 91 2e 02 	lds	r30, 0x022E
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	9e 0f       	add	r25, r30
 456:	90 93 2e 02 	sts	0x022E, r25
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	ed 5b       	subi	r30, 0xBD	; 189
 45e:	fd 4f       	sbci	r31, 0xFD	; 253
 460:	80 83       	st	Z, r24
 462:	08 c0       	rjmp	.+16     	; 0x474 <TickFct_BluetoothReceiver+0xa6>
				}
				else{
					inputPin[position] = '\0';
 464:	e0 91 2e 02 	lds	r30, 0x022E
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ed 5b       	subi	r30, 0xBD	; 189
 46c:	fd 4f       	sbci	r31, 0xFD	; 253
 46e:	10 82       	st	Z, r1
					pinInputComplete = 1;
 470:	c0 93 31 02 	sts	0x0231, r28
	}
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
 474:	80 91 58 02 	lds	r24, 0x0258
 478:	8a 32       	cpi	r24, 0x2A	; 42
 47a:	19 f7       	brne	.-58     	; 0x442 <TickFct_BluetoothReceiver+0x74>
 47c:	c1 e0       	ldi	r28, 0x01	; 1
 47e:	d0 e0       	ldi	r29, 0x00	; 0
 480:	0e c0       	rjmp	.+28     	; 0x49e <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothReceived;
			}
			break;
		default:
			state = bluetoothWait;
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
 486:	0b c0       	rjmp	.+22     	; 0x49e <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
				state = bluetoothWait;
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	d0 e0       	ldi	r29, 0x00	; 0
 48c:	08 c0       	rjmp	.+16     	; 0x49e <TickFct_BluetoothReceiver+0xd0>
			}
			else if(lastReceivedChar != '*'){
				state = bluetoothWaitForNext;
			}
			else{
				state = bluetoothWait;
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	05 c0       	rjmp	.+10     	; 0x49e <TickFct_BluetoothReceiver+0xd0>
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
				state = bluetoothWait;
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <TickFct_BluetoothReceiver+0xd0>
				if(lastReceivedChar != '*'){
					inputPin[position++] = lastReceivedChar;
				}
				else{
					inputPin[position] = '\0';
					pinInputComplete = 1;
 49a:	c1 e0       	ldi	r28, 0x01	; 1
 49c:	eb cf       	rjmp	.-42     	; 0x474 <TickFct_BluetoothReceiver+0xa6>
			break;
		case bluetoothWaitForNext:
			break;
	}
	return state;
}
 49e:	ce 01       	movw	r24, r28
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <TickFct_KeypadReceiver>:

enum SM_KeypadReceiver{keypadWait1, keypadWait2, keypadPressed, keypadWaitRelease};
int TickFct_KeypadReceiver(int state){
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 4b0:	14 de       	rcall	.-984    	; 0xda <GetKeypadKey>
 4b2:	18 2f       	mov	r17, r24
	switch(state){
 4b4:	c1 30       	cpi	r28, 0x01	; 1
 4b6:	d1 05       	cpc	r29, r1
 4b8:	51 f1       	breq	.+84     	; 0x50e <TickFct_KeypadReceiver+0x68>
 4ba:	1c f4       	brge	.+6      	; 0x4c2 <TickFct_KeypadReceiver+0x1c>
 4bc:	20 97       	sbiw	r28, 0x00	; 0
 4be:	41 f0       	breq	.+16     	; 0x4d0 <TickFct_KeypadReceiver+0x2a>
 4c0:	85 c0       	rjmp	.+266    	; 0x5cc <TickFct_KeypadReceiver+0x126>
 4c2:	c2 30       	cpi	r28, 0x02	; 2
 4c4:	d1 05       	cpc	r29, r1
 4c6:	81 f0       	breq	.+32     	; 0x4e8 <TickFct_KeypadReceiver+0x42>
 4c8:	c3 30       	cpi	r28, 0x03	; 3
 4ca:	d1 05       	cpc	r29, r1
 4cc:	c1 f0       	breq	.+48     	; 0x4fe <TickFct_KeypadReceiver+0x58>
 4ce:	7e c0       	rjmp	.+252    	; 0x5cc <TickFct_KeypadReceiver+0x126>
		case keypadWait1:
			if(key == '\0' || !keypadEnable){
 4d0:	88 23       	and	r24, r24
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <TickFct_KeypadReceiver+0x30>
 4d4:	94 c0       	rjmp	.+296    	; 0x5fe <TickFct_KeypadReceiver+0x158>
 4d6:	80 91 57 02 	lds	r24, 0x0257
 4da:	88 23       	and	r24, r24
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <TickFct_KeypadReceiver+0x3a>
 4de:	8f c0       	rjmp	.+286    	; 0x5fe <TickFct_KeypadReceiver+0x158>
				state = keypadWait1;
			}
			else{
				state = keypadPressed;
				position = 0;
 4e0:	10 92 2e 02 	sts	0x022E, r1
				clearInputPin();
 4e4:	6b df       	rcall	.-298    	; 0x3bc <clearInputPin>
 4e6:	87 c0       	rjmp	.+270    	; 0x5f6 <TickFct_KeypadReceiver+0x150>
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
 4e8:	80 91 57 02 	lds	r24, 0x0257
 4ec:	88 23       	and	r24, r24
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <TickFct_KeypadReceiver+0x4c>
 4f0:	73 c0       	rjmp	.+230    	; 0x5d8 <TickFct_KeypadReceiver+0x132>
				state = keypadWait1;
			}
			else if(key == '*'){
 4f2:	1a 32       	cpi	r17, 0x2A	; 42
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <TickFct_KeypadReceiver+0x52>
 4f6:	73 c0       	rjmp	.+230    	; 0x5de <TickFct_KeypadReceiver+0x138>
				state = keypadWait1;
 4f8:	c0 e0       	ldi	r28, 0x00	; 0
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	80 c0       	rjmp	.+256    	; 0x5fe <TickFct_KeypadReceiver+0x158>
			else{
				state = keypadWaitRelease;
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
 4fe:	80 91 57 02 	lds	r24, 0x0257
 502:	88 23       	and	r24, r24
 504:	09 f4       	brne	.+2      	; 0x508 <TickFct_KeypadReceiver+0x62>
 506:	6e c0       	rjmp	.+220    	; 0x5e4 <TickFct_KeypadReceiver+0x13e>
				state = keypadWait1;
			}
			else if(key !='\0'){
 508:	11 11       	cpse	r17, r1
 50a:	79 c0       	rjmp	.+242    	; 0x5fe <TickFct_KeypadReceiver+0x158>
 50c:	6e c0       	rjmp	.+220    	; 0x5ea <TickFct_KeypadReceiver+0x144>
			else{
				state = keypadWait2;
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
 50e:	80 91 57 02 	lds	r24, 0x0257
 512:	88 23       	and	r24, r24
 514:	09 f4       	brne	.+2      	; 0x518 <TickFct_KeypadReceiver+0x72>
 516:	6c c0       	rjmp	.+216    	; 0x5f0 <TickFct_KeypadReceiver+0x14a>
				state = keypadWait1;
			}
			else if(key == '\0'){
 518:	11 11       	cpse	r17, r1
 51a:	6d c0       	rjmp	.+218    	; 0x5f6 <TickFct_KeypadReceiver+0x150>
 51c:	70 c0       	rjmp	.+224    	; 0x5fe <TickFct_KeypadReceiver+0x158>
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
				if(key != 'A' && key != 'C'){
 51e:	81 2f       	mov	r24, r17
 520:	8d 7f       	andi	r24, 0xFD	; 253
 522:	81 34       	cpi	r24, 0x41	; 65
 524:	09 f4       	brne	.+2      	; 0x528 <TickFct_KeypadReceiver+0x82>
 526:	55 c0       	rjmp	.+170    	; 0x5d2 <TickFct_KeypadReceiver+0x12c>
					inputPin[position++] = key;
 528:	e0 91 2e 02 	lds	r30, 0x022E
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	8e 0f       	add	r24, r30
 530:	80 93 2e 02 	sts	0x022E, r24
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	ed 5b       	subi	r30, 0xBD	; 189
 538:	fd 4f       	sbci	r31, 0xFD	; 253
 53a:	10 83       	st	Z, r17
					if(showPin){
 53c:	80 91 56 02 	lds	r24, 0x0256
 540:	88 23       	and	r24, r24
 542:	29 f0       	breq	.+10     	; 0x54e <TickFct_KeypadReceiver+0xa8>
						LCD_WriteData(key);
 544:	81 2f       	mov	r24, r17
 546:	75 de       	rcall	.-790    	; 0x232 <LCD_WriteData>
 548:	c2 e0       	ldi	r28, 0x02	; 2
 54a:	d0 e0       	ldi	r29, 0x00	; 0
 54c:	58 c0       	rjmp	.+176    	; 0x5fe <TickFct_KeypadReceiver+0x158>
					}
					else{
						LCD_WriteData('*');
 54e:	8a e2       	ldi	r24, 0x2A	; 42
 550:	70 de       	rcall	.-800    	; 0x232 <LCD_WriteData>
 552:	c2 e0       	ldi	r28, 0x02	; 2
 554:	d0 e0       	ldi	r29, 0x00	; 0
 556:	53 c0       	rjmp	.+166    	; 0x5fe <TickFct_KeypadReceiver+0x158>
					}
				}
			}
			else{
				if(showPin){
 558:	80 91 56 02 	lds	r24, 0x0256
 55c:	88 23       	and	r24, r24
 55e:	51 f1       	breq	.+84     	; 0x5b4 <TickFct_KeypadReceiver+0x10e>
					LCD_DisplayString(1, "Changing...");
 560:	68 e5       	ldi	r22, 0x58	; 88
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	6e de       	rcall	.-804    	; 0x244 <LCD_DisplayString>
					inputPin[position] = '\0';
 568:	e0 91 2e 02 	lds	r30, 0x022E
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	ed 5b       	subi	r30, 0xBD	; 189
 570:	fd 4f       	sbci	r31, 0xFD	; 253
 572:	10 82       	st	Z, r1
					newPinInputComplete = 1;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	80 93 5a 02 	sts	0x025A, r24
					unsigned char counter = 0;
					correctPinAddr = CORRECTPINSTARTADDR;
 57a:	10 92 ed 01 	sts	0x01ED, r1
			else{
				if(showPin){
					LCD_DisplayString(1, "Changing...");
					inputPin[position] = '\0';
					newPinInputComplete = 1;
					unsigned char counter = 0;
 57e:	10 e0       	ldi	r17, 0x00	; 0
					correctPinAddr = CORRECTPINSTARTADDR;
					while(1){
						PORTA = 1;
 580:	01 e0       	ldi	r16, 0x01	; 1
 582:	02 b9       	out	0x02, r16	; 2
						eeprom_write_byte(correctPinAddr++, inputPin[counter]);
 584:	c1 2f       	mov	r28, r17
 586:	d0 e0       	ldi	r29, 0x00	; 0
 588:	cd 5b       	subi	r28, 0xBD	; 189
 58a:	dd 4f       	sbci	r29, 0xFD	; 253
 58c:	68 81       	ld	r22, Y
 58e:	80 91 ed 01 	lds	r24, 0x01ED
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	98 0f       	add	r25, r24
 596:	90 93 ed 01 	sts	0x01ED, r25
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	e8 d2       	rcall	.+1488   	; 0xb6e <__eewr_byte_m1284>
						if(inputPin[counter] == '\0'){
 59e:	88 81       	ld	r24, Y
 5a0:	88 23       	and	r24, r24
 5a2:	11 f0       	breq	.+4      	; 0x5a8 <TickFct_KeypadReceiver+0x102>
							break;
						}
						++counter;
 5a4:	1f 5f       	subi	r17, 0xFF	; 255
					}
 5a6:	ed cf       	rjmp	.-38     	; 0x582 <TickFct_KeypadReceiver+0xdc>
					newPinInputComplete = 1;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 5a 02 	sts	0x025A, r24
 5ae:	c2 e0       	ldi	r28, 0x02	; 2
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	25 c0       	rjmp	.+74     	; 0x5fe <TickFct_KeypadReceiver+0x158>
				}
				else{
					inputPin[position] = '\0';
 5b4:	e0 91 2e 02 	lds	r30, 0x022E
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	ed 5b       	subi	r30, 0xBD	; 189
 5bc:	fd 4f       	sbci	r31, 0xFD	; 253
 5be:	10 82       	st	Z, r1
					pinInputComplete = 1;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 93 31 02 	sts	0x0231, r24
 5c6:	c2 e0       	ldi	r28, 0x02	; 2
 5c8:	d0 e0       	ldi	r29, 0x00	; 0
 5ca:	19 c0       	rjmp	.+50     	; 0x5fe <TickFct_KeypadReceiver+0x158>
			else{
				state = keypadPressed;
			}
			break;
		default:
			state = keypadWait1;
 5cc:	c0 e0       	ldi	r28, 0x00	; 0
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	16 c0       	rjmp	.+44     	; 0x5fe <TickFct_KeypadReceiver+0x158>
 5d2:	c2 e0       	ldi	r28, 0x02	; 2
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
 5d6:	13 c0       	rjmp	.+38     	; 0x5fe <TickFct_KeypadReceiver+0x158>
				clearInputPin();
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
				state = keypadWait1;
 5d8:	c0 e0       	ldi	r28, 0x00	; 0
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	10 c0       	rjmp	.+32     	; 0x5fe <TickFct_KeypadReceiver+0x158>
			}
			else if(key == '*'){
				state = keypadWait1;
			}
			else{
				state = keypadWaitRelease;
 5de:	c3 e0       	ldi	r28, 0x03	; 3
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	0d c0       	rjmp	.+26     	; 0x5fe <TickFct_KeypadReceiver+0x158>
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
				state = keypadWait1;
 5e4:	c0 e0       	ldi	r28, 0x00	; 0
 5e6:	d0 e0       	ldi	r29, 0x00	; 0
 5e8:	0a c0       	rjmp	.+20     	; 0x5fe <TickFct_KeypadReceiver+0x158>
			}
			else if(key !='\0'){
				state = keypadWaitRelease;
			}
			else{
				state = keypadWait2;
 5ea:	c1 e0       	ldi	r28, 0x01	; 1
 5ec:	d0 e0       	ldi	r29, 0x00	; 0
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <TickFct_KeypadReceiver+0x158>
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
				state = keypadWait1;
 5f0:	c0 e0       	ldi	r28, 0x00	; 0
 5f2:	d0 e0       	ldi	r29, 0x00	; 0
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <TickFct_KeypadReceiver+0x158>
		case keypadWait1:
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
 5f6:	1a 32       	cpi	r17, 0x2A	; 42
 5f8:	09 f0       	breq	.+2      	; 0x5fc <TickFct_KeypadReceiver+0x156>
 5fa:	91 cf       	rjmp	.-222    	; 0x51e <TickFct_KeypadReceiver+0x78>
 5fc:	ad cf       	rjmp	.-166    	; 0x558 <TickFct_KeypadReceiver+0xb2>
			break;
		case keypadWaitRelease:
			break;
	}
	return state;
}
 5fe:	ce 01       	movw	r24, r28
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <clearFlags>:
		inputPin[i] = '\0';
	}
}

void clearFlags(){
	checkPinFlag = 0;
 60a:	10 92 f1 01 	sts	0x01F1, r1
	keypadEnable = 0;
 60e:	10 92 57 02 	sts	0x0257, r1
	bluetoothEnable = 0;
 612:	10 92 32 02 	sts	0x0232, r1
	controlCounter = 0;
 616:	10 92 55 02 	sts	0x0255, r1
 61a:	10 92 54 02 	sts	0x0254, r1
	lockedFlag = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 f0 01 	sts	0x01F0, r24
	showPin = 0;
 624:	10 92 56 02 	sts	0x0256, r1
	pinInputComplete = 0;
 628:	10 92 31 02 	sts	0x0231, r1
 62c:	08 95       	ret

0000062e <TickFct_Controller>:
	}
	return i;
}

enum SM_Controller{controllerinit, controllerWait, controllerKeypad, controllerBluetooth, controllerCheck, controllerUnlocked, controllerLocked, controllerLockWaitRelease, controllerChangePin};
int TickFct_Controller(int state){
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 634:	52 dd       	rcall	.-1372   	; 0xda <GetKeypadKey>
	switch(state){
 636:	c9 30       	cpi	r28, 0x09	; 9
 638:	d1 05       	cpc	r29, r1
 63a:	08 f0       	brcs	.+2      	; 0x63e <TickFct_Controller+0x10>
 63c:	a4 c0       	rjmp	.+328    	; 0x786 <TickFct_Controller+0x158>
 63e:	fe 01       	movw	r30, r28
 640:	ea 5b       	subi	r30, 0xBA	; 186
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	86 c2       	rjmp	.+1292   	; 0xb52 <__tablejump2__>
		case controllerinit:
			clearFlags();
 646:	e1 df       	rcall	.-62     	; 0x60a <clearFlags>
			lockedFlag = 1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 f0 01 	sts	0x01F0, r24
			showPin = 0;
 64e:	10 92 56 02 	sts	0x0256, r1
			state = controllerWait;
			clearInputPin();
 652:	b4 de       	rcall	.-664    	; 0x3bc <clearInputPin>
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 654:	68 e3       	ldi	r22, 0x38	; 56
 656:	71 e0       	ldi	r23, 0x01	; 1
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	f4 dd       	rcall	.-1048   	; 0x244 <LCD_DisplayString>
			break;
 65c:	9e c0       	rjmp	.+316    	; 0x79a <TickFct_Controller+0x16c>
		case controllerWait:
			if(key == 'A'){
 65e:	81 34       	cpi	r24, 0x41	; 65
 660:	49 f4       	brne	.+18     	; 0x674 <TickFct_Controller+0x46>
				state = controllerKeypad;
				keypadEnable = 1;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	80 93 57 02 	sts	0x0257, r24
				clearInputPin();
 668:	a9 de       	rcall	.-686    	; 0x3bc <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 66a:	64 e6       	ldi	r22, 0x64	; 100
 66c:	71 e0       	ldi	r23, 0x01	; 1
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	e9 dd       	rcall	.-1070   	; 0x244 <LCD_DisplayString>
 672:	98 c0       	rjmp	.+304    	; 0x7a4 <TickFct_Controller+0x176>
			}
			else if(key == 'B'){
 674:	82 34       	cpi	r24, 0x42	; 66
 676:	09 f0       	breq	.+2      	; 0x67a <TickFct_Controller+0x4c>
 678:	90 c0       	rjmp	.+288    	; 0x79a <TickFct_Controller+0x16c>
				state = controllerBluetooth;
				bluetoothEnable = 1;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	80 93 32 02 	sts	0x0232, r24
				clearInputPin();
 680:	9d de       	rcall	.-710    	; 0x3bc <clearInputPin>
				LCD_DisplayString(1, "Waiting to Rec  C to Cancel");
 682:	6a e6       	ldi	r22, 0x6A	; 106
 684:	71 e0       	ldi	r23, 0x01	; 1
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	dd dd       	rcall	.-1094   	; 0x244 <LCD_DisplayString>
 68a:	94 c0       	rjmp	.+296    	; 0x7b4 <TickFct_Controller+0x186>
			}
			break;
		case controllerBluetooth:
			if(key == 'C'){
 68c:	83 34       	cpi	r24, 0x43	; 67
 68e:	41 f4       	brne	.+16     	; 0x6a0 <TickFct_Controller+0x72>
				state = controllerWait;
				bluetoothEnable = 0;
 690:	10 92 32 02 	sts	0x0232, r1
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 694:	68 e3       	ldi	r22, 0x38	; 56
 696:	71 e0       	ldi	r23, 0x01	; 1
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	d4 dd       	rcall	.-1112   	; 0x244 <LCD_DisplayString>
				clearFlags();
 69c:	b6 df       	rcall	.-148    	; 0x60a <clearFlags>
 69e:	7d c0       	rjmp	.+250    	; 0x79a <TickFct_Controller+0x16c>
			}
			else if(pinInputComplete){
 6a0:	80 91 31 02 	lds	r24, 0x0231
 6a4:	88 23       	and	r24, r24
 6a6:	09 f4       	brne	.+2      	; 0x6aa <TickFct_Controller+0x7c>
 6a8:	85 c0       	rjmp	.+266    	; 0x7b4 <TickFct_Controller+0x186>
				state = controllerCheck;
				checkPinFlag = 1;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	80 93 f1 01 	sts	0x01F1, r24
				bluetoothEnable = 0;
 6b0:	10 92 32 02 	sts	0x0232, r1
				LCD_DisplayString(1, "Checking...     C to Cancel");
 6b4:	66 e8       	ldi	r22, 0x86	; 134
 6b6:	71 e0       	ldi	r23, 0x01	; 1
 6b8:	c5 dd       	rcall	.-1142   	; 0x244 <LCD_DisplayString>
 6ba:	84 c0       	rjmp	.+264    	; 0x7c4 <TickFct_Controller+0x196>
			else{
				state = controllerBluetooth;
			}
			break;
		case controllerKeypad:
			if(pinInputComplete){
 6bc:	80 91 31 02 	lds	r24, 0x0231
 6c0:	88 23       	and	r24, r24
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <TickFct_Controller+0x98>
 6c4:	6f c0       	rjmp	.+222    	; 0x7a4 <TickFct_Controller+0x176>
				state = controllerCheck;
				checkPinFlag = 1;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 f1 01 	sts	0x01F1, r24
				keypadEnable = 0;
 6cc:	10 92 57 02 	sts	0x0257, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 6d0:	62 ea       	ldi	r22, 0xA2	; 162
 6d2:	71 e0       	ldi	r23, 0x01	; 1
 6d4:	b7 dd       	rcall	.-1170   	; 0x244 <LCD_DisplayString>
 6d6:	76 c0       	rjmp	.+236    	; 0x7c4 <TickFct_Controller+0x196>
			else{
				state = controllerKeypad;
			}
			break;
		case controllerCheck:
			if(key == 'C'){
 6d8:	83 34       	cpi	r24, 0x43	; 67
 6da:	39 f4       	brne	.+14     	; 0x6ea <TickFct_Controller+0xbc>
				state = controllerWait;
				clearInputPin();
 6dc:	6f de       	rcall	.-802    	; 0x3bc <clearInputPin>
				clearFlags();
 6de:	95 df       	rcall	.-214    	; 0x60a <clearFlags>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 6e0:	68 e3       	ldi	r22, 0x38	; 56
 6e2:	71 e0       	ldi	r23, 0x01	; 1
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	ae dd       	rcall	.-1188   	; 0x244 <LCD_DisplayString>
 6e8:	58 c0       	rjmp	.+176    	; 0x79a <TickFct_Controller+0x16c>
			}
			else if(checkPinFlag){
 6ea:	80 91 f1 01 	lds	r24, 0x01F1
 6ee:	81 11       	cpse	r24, r1
 6f0:	69 c0       	rjmp	.+210    	; 0x7c4 <TickFct_Controller+0x196>
				state = controllerCheck;
			}
			else{
				if(lockedFlag){
 6f2:	80 91 f0 01 	lds	r24, 0x01F0
 6f6:	88 23       	and	r24, r24
 6f8:	49 f0       	breq	.+18     	; 0x70c <TickFct_Controller+0xde>
					state = controllerLocked;
					controlCounter = 0;
 6fa:	10 92 55 02 	sts	0x0255, r1
 6fe:	10 92 54 02 	sts	0x0254, r1
					LCD_DisplayString(1, "Incorrect Pin");
 702:	6e eb       	ldi	r22, 0xBE	; 190
 704:	71 e0       	ldi	r23, 0x01	; 1
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	9d dd       	rcall	.-1222   	; 0x244 <LCD_DisplayString>
 70a:	61 c0       	rjmp	.+194    	; 0x7ce <TickFct_Controller+0x1a0>
				}
				else{
					state = controllerUnlocked;
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 70c:	6c ec       	ldi	r22, 0xCC	; 204
 70e:	71 e0       	ldi	r23, 0x01	; 1
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	98 dd       	rcall	.-1232   	; 0x244 <LCD_DisplayString>
 714:	6a c0       	rjmp	.+212    	; 0x7ea <TickFct_Controller+0x1bc>
				}
			}
			break;
		case controllerLocked:
			if(controlCounter >= 750){
 716:	80 91 54 02 	lds	r24, 0x0254
 71a:	90 91 55 02 	lds	r25, 0x0255
 71e:	8e 3e       	cpi	r24, 0xEE	; 238
 720:	92 40       	sbci	r25, 0x02	; 2
 722:	08 f4       	brcc	.+2      	; 0x726 <TickFct_Controller+0xf8>
 724:	54 c0       	rjmp	.+168    	; 0x7ce <TickFct_Controller+0x1a0>
				state = controllerWait;
				clearInputPin();
 726:	4a de       	rcall	.-876    	; 0x3bc <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 728:	68 e3       	ldi	r22, 0x38	; 56
 72a:	71 e0       	ldi	r23, 0x01	; 1
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	8a dd       	rcall	.-1260   	; 0x244 <LCD_DisplayString>
				clearFlags();
 730:	6c df       	rcall	.-296    	; 0x60a <clearFlags>
 732:	33 c0       	rjmp	.+102    	; 0x79a <TickFct_Controller+0x16c>
			else{
				state = controllerLocked;
			}
			break;
		case controllerUnlocked:
			if(key == 'A'){
 734:	81 34       	cpi	r24, 0x41	; 65
 736:	61 f1       	breq	.+88     	; 0x790 <TickFct_Controller+0x162>
				state = controllerLockWaitRelease;
			}
			else if(key == 'C'){
 738:	83 34       	cpi	r24, 0x43	; 67
 73a:	09 f0       	breq	.+2      	; 0x73e <TickFct_Controller+0x110>
 73c:	56 c0       	rjmp	.+172    	; 0x7ea <TickFct_Controller+0x1bc>
				state = controllerChangePin;
				showPin = 1;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 93 56 02 	sts	0x0256, r24
				keypadEnable = 1;
 744:	80 93 57 02 	sts	0x0257, r24
				pinInputComplete = 0;
 748:	10 92 31 02 	sts	0x0231, r1
				clearInputPin();
 74c:	37 de       	rcall	.-914    	; 0x3bc <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 74e:	64 e6       	ldi	r22, 0x64	; 100
 750:	71 e0       	ldi	r23, 0x01	; 1
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	77 dd       	rcall	.-1298   	; 0x244 <LCD_DisplayString>
 756:	4e c0       	rjmp	.+156    	; 0x7f4 <TickFct_Controller+0x1c6>
			}
			break;
		case controllerLockWaitRelease:
			if(key != '\0'){
 758:	81 11       	cpse	r24, r1
 75a:	1a c0       	rjmp	.+52     	; 0x790 <TickFct_Controller+0x162>
				state = controllerLockWaitRelease;
			}
			else{
				state = controllerWait;
				clearInputPin();
 75c:	2f de       	rcall	.-930    	; 0x3bc <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 75e:	68 e3       	ldi	r22, 0x38	; 56
 760:	71 e0       	ldi	r23, 0x01	; 1
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	6f dd       	rcall	.-1314   	; 0x244 <LCD_DisplayString>
				clearFlags();
 766:	51 df       	rcall	.-350    	; 0x60a <clearFlags>
 768:	18 c0       	rjmp	.+48     	; 0x79a <TickFct_Controller+0x16c>
			}
			break;
		case controllerChangePin:
			if(!newPinInputComplete){
 76a:	80 91 5a 02 	lds	r24, 0x025A
 76e:	88 23       	and	r24, r24
 770:	09 f4       	brne	.+2      	; 0x774 <TickFct_Controller+0x146>
 772:	40 c0       	rjmp	.+128    	; 0x7f4 <TickFct_Controller+0x1c6>
				state = controllerChangePin;
			}
			else{
				state = controllerUnlocked;
				keypadEnable = 0;
 774:	10 92 57 02 	sts	0x0257, r1
				showPin = 0;
 778:	10 92 56 02 	sts	0x0256, r1
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
 77c:	6c ec       	ldi	r22, 0xCC	; 204
 77e:	71 e0       	ldi	r23, 0x01	; 1
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	60 dd       	rcall	.-1344   	; 0x244 <LCD_DisplayString>
 784:	32 c0       	rjmp	.+100    	; 0x7ea <TickFct_Controller+0x1bc>
			state = controllerinit;
			break;
	}
	switch(state){
		case controllerinit:
			PORTA = 1;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	82 b9       	out	0x02, r24	; 2
				showPin = 0;
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
			}
			break;
		default:
			state = controllerinit;
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	switch(state){
		case controllerinit:
			PORTA = 1;
			break;
 78e:	36 c0       	rjmp	.+108    	; 0x7fc <TickFct_Controller+0x1ce>
			break;
		case controllerUnlocked:
			PORTA = 7;
			break;
		case controllerLockWaitRelease:
			PORTA = 8;
 790:	88 e0       	ldi	r24, 0x08	; 8
 792:	82 b9       	out	0x02, r24	; 2
			break;
 794:	87 e0       	ldi	r24, 0x07	; 7
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	31 c0       	rjmp	.+98     	; 0x7fc <TickFct_Controller+0x1ce>
	switch(state){
		case controllerinit:
			PORTA = 1;
			break;
		case controllerWait:
			PORTA = 2;
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	82 b9       	out	0x02, r24	; 2
			break;
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	2c c0       	rjmp	.+88     	; 0x7fc <TickFct_Controller+0x1ce>
		case controllerKeypad:
			PORTA = 3;
 7a4:	83 e0       	ldi	r24, 0x03	; 3
 7a6:	82 b9       	out	0x02, r24	; 2
			keypadEnable = 1;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	80 93 57 02 	sts	0x0257, r24
			break;
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	24 c0       	rjmp	.+72     	; 0x7fc <TickFct_Controller+0x1ce>
		case controllerBluetooth:
			PORTA = 4;
 7b4:	84 e0       	ldi	r24, 0x04	; 4
 7b6:	82 b9       	out	0x02, r24	; 2
			bluetoothEnable = 1;
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	80 93 32 02 	sts	0x0232, r24
			break;
 7be:	83 e0       	ldi	r24, 0x03	; 3
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	1c c0       	rjmp	.+56     	; 0x7fc <TickFct_Controller+0x1ce>
		case controllerCheck:
			PORTA = 5;
 7c4:	85 e0       	ldi	r24, 0x05	; 5
 7c6:	82 b9       	out	0x02, r24	; 2
			break;
 7c8:	84 e0       	ldi	r24, 0x04	; 4
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	17 c0       	rjmp	.+46     	; 0x7fc <TickFct_Controller+0x1ce>
		case controllerLocked:
			PORTA = 6;
 7ce:	86 e0       	ldi	r24, 0x06	; 6
 7d0:	82 b9       	out	0x02, r24	; 2
			++controlCounter;
 7d2:	80 91 54 02 	lds	r24, 0x0254
 7d6:	90 91 55 02 	lds	r25, 0x0255
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	90 93 55 02 	sts	0x0255, r25
 7e0:	80 93 54 02 	sts	0x0254, r24
			break;
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <TickFct_Controller+0x1ce>
		case controllerUnlocked:
			PORTA = 7;
 7ea:	87 e0       	ldi	r24, 0x07	; 7
 7ec:	82 b9       	out	0x02, r24	; 2
			break;
 7ee:	85 e0       	ldi	r24, 0x05	; 5
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <TickFct_Controller+0x1ce>
		case controllerLockWaitRelease:
			PORTA = 8;
			break;
		case controllerChangePin:
			PORTA = 9;
 7f4:	89 e0       	ldi	r24, 0x09	; 9
 7f6:	82 b9       	out	0x02, r24	; 2
			break;
 7f8:	88 e0       	ldi	r24, 0x08	; 8
 7fa:	90 e0       	ldi	r25, 0x00	; 0
	}
	return state;
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	08 95       	ret

00000802 <getInputPinLength>:
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 802:	80 91 43 02 	lds	r24, 0x0243
 806:	88 23       	and	r24, r24
 808:	51 f0       	breq	.+20     	; 0x81e <getInputPinLength+0x1c>
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 80a:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
 80c:	8f 5f       	subi	r24, 0xFF	; 255
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 80e:	e8 2f       	mov	r30, r24
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	ed 5b       	subi	r30, 0xBD	; 189
 814:	fd 4f       	sbci	r31, 0xFD	; 253
 816:	90 81       	ld	r25, Z
 818:	91 11       	cpse	r25, r1
 81a:	f8 cf       	rjmp	.-16     	; 0x80c <getInputPinLength+0xa>
 81c:	08 95       	ret
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 81e:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
	}
	return i;
}
 820:	08 95       	ret

00000822 <getCorrectPinLength>:

unsigned char getCorrectPinLength(){
 822:	cf 93       	push	r28
	unsigned char i = CORRECTPINSTARTADDR;
 824:	c0 e0       	ldi	r28, 0x00	; 0
	while(eeprom_read_byte(i) != '\0'){
 826:	01 c0       	rjmp	.+2      	; 0x82a <getCorrectPinLength+0x8>
		++i;
 828:	cf 5f       	subi	r28, 0xFF	; 255
	return i;
}

unsigned char getCorrectPinLength(){
	unsigned char i = CORRECTPINSTARTADDR;
	while(eeprom_read_byte(i) != '\0'){
 82a:	8c 2f       	mov	r24, r28
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	97 d1       	rcall	.+814    	; 0xb5e <__eerd_byte_m1284>
 830:	81 11       	cpse	r24, r1
 832:	fa cf       	rjmp	.-12     	; 0x828 <getCorrectPinLength+0x6>
		++i;
	}
	return i;
}
 834:	8c 2f       	mov	r24, r28
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <TickFct_CheckPin>:
	}
	return state;
}

enum SM_CheckPin {checkInit, checkWait, checkCheck};
int TickFct_CheckPin(int state){
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
	switch(state){
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	91 05       	cpc	r25, r1
 846:	49 f0       	breq	.+18     	; 0x85a <TickFct_CheckPin+0x20>
 848:	82 30       	cpi	r24, 0x02	; 2
 84a:	91 05       	cpc	r25, r1
 84c:	19 f0       	breq	.+6      	; 0x854 <TickFct_CheckPin+0x1a>
 84e:	89 2b       	or	r24, r25
 850:	09 f0       	breq	.+2      	; 0x854 <TickFct_CheckPin+0x1a>
 852:	3c c0       	rjmp	.+120    	; 0x8cc <TickFct_CheckPin+0x92>
		case checkInit:
			state = checkWait;
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	3b c0       	rjmp	.+118    	; 0x8d0 <TickFct_CheckPin+0x96>
			break;
		case checkWait:
			if(checkPinFlag){
 85a:	20 91 f1 01 	lds	r18, 0x01F1
 85e:	22 23       	and	r18, r18
 860:	b9 f1       	breq	.+110    	; 0x8d0 <TickFct_CheckPin+0x96>
				state = checkCheck;
				isCorrect = 1;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 53 02 	sts	0x0253, r24
				checkCounter = 0;
 868:	10 92 59 02 	sts	0x0259, r1
				correctPinAddr = CORRECTPINSTARTADDR;
 86c:	10 92 ed 01 	sts	0x01ED, r1
				if(getCorrectPinLength() != getInputPinLength()){
 870:	d8 df       	rcall	.-80     	; 0x822 <getCorrectPinLength>
 872:	c8 2f       	mov	r28, r24
 874:	c6 df       	rcall	.-116    	; 0x802 <getInputPinLength>
 876:	c8 13       	cpse	r28, r24
					isCorrect = 0;
 878:	10 92 53 02 	sts	0x0253, r1
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 87c:	00 91 53 02 	lds	r16, 0x0253
 880:	0b c0       	rjmp	.+22     	; 0x898 <TickFct_CheckPin+0x5e>
					if(eeprom_read_byte(correctPinAddr + checkCounter) != inputPin[checkCounter]){
 882:	cd 5b       	subi	r28, 0xBD	; 189
 884:	dd 4f       	sbci	r29, 0xFD	; 253
 886:	98 81       	ld	r25, Y
 888:	89 17       	cp	r24, r25
 88a:	19 f0       	breq	.+6      	; 0x892 <TickFct_CheckPin+0x58>
						isCorrect = 0;
 88c:	10 92 53 02 	sts	0x0253, r1
						break;
 890:	15 c0       	rjmp	.+42     	; 0x8bc <TickFct_CheckPin+0x82>
					}
					++checkCounter;
 892:	1f 5f       	subi	r17, 0xFF	; 255
 894:	10 93 59 02 	sts	0x0259, r17
				checkCounter = 0;
				correctPinAddr = CORRECTPINSTARTADDR;
				if(getCorrectPinLength() != getInputPinLength()){
					isCorrect = 0;
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 898:	10 91 59 02 	lds	r17, 0x0259
 89c:	c1 2f       	mov	r28, r17
 89e:	d0 e0       	ldi	r29, 0x00	; 0
 8a0:	ce 01       	movw	r24, r28
 8a2:	5d d1       	rcall	.+698    	; 0xb5e <__eerd_byte_m1284>
 8a4:	88 23       	and	r24, r24
 8a6:	19 f0       	breq	.+6      	; 0x8ae <TickFct_CheckPin+0x74>
 8a8:	01 11       	cpse	r16, r1
 8aa:	eb cf       	rjmp	.-42     	; 0x882 <TickFct_CheckPin+0x48>
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <TickFct_CheckPin+0x82>
						isCorrect = 0;
						break;
					}
					++checkCounter;
				}
				if(isCorrect){
 8ae:	80 91 53 02 	lds	r24, 0x0253
 8b2:	88 23       	and	r24, r24
 8b4:	19 f0       	breq	.+6      	; 0x8bc <TickFct_CheckPin+0x82>
					lockedFlag = 0;
 8b6:	10 92 f0 01 	sts	0x01F0, r1
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <TickFct_CheckPin+0x88>
				}
				else{
					lockedFlag = 1;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	80 93 f0 01 	sts	0x01F0, r24
				}
				checkPinFlag = 0;
 8c2:	10 92 f1 01 	sts	0x01F1, r1
		case checkInit:
			state = checkWait;
			break;
		case checkWait:
			if(checkPinFlag){
				state = checkCheck;
 8c6:	82 e0       	ldi	r24, 0x02	; 2
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <TickFct_CheckPin+0x96>
			break;
		case checkCheck:
			state = checkWait;
			break;
		default:
			state = checkInit;
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case checkCheck:
			break;
	}
	return state;
}
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	08 95       	ret

000008da <__vector_13>:
	}
	return state;
}

ISR(TIMER1_COMPA_vect)
{
 8da:	1f 92       	push	r1
 8dc:	0f 92       	push	r0
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	0f 92       	push	r0
 8e2:	11 24       	eor	r1, r1
 8e4:	0b b6       	in	r0, 0x3b	; 59
 8e6:	0f 92       	push	r0
 8e8:	ef 92       	push	r14
 8ea:	ff 92       	push	r15
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	2f 93       	push	r18
 8f2:	3f 93       	push	r19
 8f4:	4f 93       	push	r20
 8f6:	5f 93       	push	r21
 8f8:	6f 93       	push	r22
 8fa:	7f 93       	push	r23
 8fc:	8f 93       	push	r24
 8fe:	9f 93       	push	r25
 900:	af 93       	push	r26
 902:	bf 93       	push	r27
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	ef 93       	push	r30
 90a:	ff 93       	push	r31
 90c:	c2 ef       	ldi	r28, 0xF2	; 242
 90e:	d1 e0       	ldi	r29, 0x01	; 1
 910:	0f 2e       	mov	r0, r31
 912:	fe e2       	ldi	r31, 0x2E	; 46
 914:	ef 2e       	mov	r14, r31
 916:	f2 e0       	ldi	r31, 0x02	; 2
 918:	ff 2e       	mov	r15, r31
 91a:	f0 2d       	mov	r31, r0
 91c:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < 5; ++i){
		if( tasks[i].elapsedTime >= tasks[i].period){
 91e:	4e 81       	ldd	r20, Y+6	; 0x06
 920:	5f 81       	ldd	r21, Y+7	; 0x07
 922:	68 85       	ldd	r22, Y+8	; 0x08
 924:	79 85       	ldd	r23, Y+9	; 0x09
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	9b 81       	ldd	r25, Y+3	; 0x03
 92a:	ac 81       	ldd	r26, Y+4	; 0x04
 92c:	bd 81       	ldd	r27, Y+5	; 0x05
 92e:	48 17       	cp	r20, r24
 930:	59 07       	cpc	r21, r25
 932:	6a 07       	cpc	r22, r26
 934:	7b 07       	cpc	r23, r27
 936:	58 f0       	brcs	.+22     	; 0x94e <__vector_13+0x74>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 938:	ea 85       	ldd	r30, Y+10	; 0x0a
 93a:	fb 85       	ldd	r31, Y+11	; 0x0b
 93c:	88 81       	ld	r24, Y
 93e:	99 81       	ldd	r25, Y+1	; 0x01
 940:	09 95       	icall
 942:	99 83       	std	Y+1, r25	; 0x01
 944:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 946:	1e 82       	std	Y+6, r1	; 0x06
 948:	1f 82       	std	Y+7, r1	; 0x07
 94a:	18 86       	std	Y+8, r1	; 0x08
 94c:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += 1;
 94e:	f8 01       	movw	r30, r16
 950:	86 81       	ldd	r24, Z+6	; 0x06
 952:	97 81       	ldd	r25, Z+7	; 0x07
 954:	a0 85       	ldd	r26, Z+8	; 0x08
 956:	b1 85       	ldd	r27, Z+9	; 0x09
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	a1 1d       	adc	r26, r1
 95c:	b1 1d       	adc	r27, r1
 95e:	86 83       	std	Z+6, r24	; 0x06
 960:	97 83       	std	Z+7, r25	; 0x07
 962:	a0 87       	std	Z+8, r26	; 0x08
 964:	b1 87       	std	Z+9, r27	; 0x09
 966:	2c 96       	adiw	r28, 0x0c	; 12
}

ISR(TIMER1_COMPA_vect)
{
	unsigned char i;
	for(i = 0; i < 5; ++i){
 968:	ce 15       	cp	r28, r14
 96a:	df 05       	cpc	r29, r15
 96c:	b9 f6       	brne	.-82     	; 0x91c <__vector_13+0x42>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 96e:	ff 91       	pop	r31
 970:	ef 91       	pop	r30
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	9f 91       	pop	r25
 97c:	8f 91       	pop	r24
 97e:	7f 91       	pop	r23
 980:	6f 91       	pop	r22
 982:	5f 91       	pop	r21
 984:	4f 91       	pop	r20
 986:	3f 91       	pop	r19
 988:	2f 91       	pop	r18
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	ff 90       	pop	r15
 990:	ef 90       	pop	r14
 992:	0f 90       	pop	r0
 994:	0b be       	out	0x3b, r0	; 59
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	1f 90       	pop	r1
 99e:	18 95       	reti

000009a0 <main>:

int main(void)
{
	DDRA = 0xFF;	PORTA = 0x00;
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	81 b9       	out	0x01, r24	; 1
 9a4:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xF0;	PORTB = 0x0F;
 9a6:	90 ef       	ldi	r25, 0xF0	; 240
 9a8:	94 b9       	out	0x04, r25	; 4
 9aa:	9f e0       	ldi	r25, 0x0F	; 15
 9ac:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 9ae:	87 b9       	out	0x07, r24	; 7
 9b0:	18 b8       	out	0x08, r1	; 8
	eeprom_write_byte(correctPinAddr++, '0');
 9b2:	80 91 ed 01 	lds	r24, 0x01ED
 9b6:	91 e0       	ldi	r25, 0x01	; 1
 9b8:	98 0f       	add	r25, r24
 9ba:	90 93 ed 01 	sts	0x01ED, r25
 9be:	60 e3       	ldi	r22, 0x30	; 48
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	d5 d0       	rcall	.+426    	; 0xb6e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '0');
 9c4:	80 91 ed 01 	lds	r24, 0x01ED
 9c8:	91 e0       	ldi	r25, 0x01	; 1
 9ca:	98 0f       	add	r25, r24
 9cc:	90 93 ed 01 	sts	0x01ED, r25
 9d0:	60 e3       	ldi	r22, 0x30	; 48
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	cc d0       	rcall	.+408    	; 0xb6e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '0');
 9d6:	80 91 ed 01 	lds	r24, 0x01ED
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	98 0f       	add	r25, r24
 9de:	90 93 ed 01 	sts	0x01ED, r25
 9e2:	60 e3       	ldi	r22, 0x30	; 48
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	c3 d0       	rcall	.+390    	; 0xb6e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '0');
 9e8:	80 91 ed 01 	lds	r24, 0x01ED
 9ec:	91 e0       	ldi	r25, 0x01	; 1
 9ee:	98 0f       	add	r25, r24
 9f0:	90 93 ed 01 	sts	0x01ED, r25
 9f4:	60 e3       	ldi	r22, 0x30	; 48
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	ba d0       	rcall	.+372    	; 0xb6e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '\0');
 9fa:	80 91 ed 01 	lds	r24, 0x01ED
 9fe:	91 e0       	ldi	r25, 0x01	; 1
 a00:	98 0f       	add	r25, r24
 a02:	90 93 ed 01 	sts	0x01ED, r25
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	b1 d0       	rcall	.+354    	; 0xb6e <__eewr_byte_m1284>
	initUSART(0);
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	34 dc       	rcall	.-1944   	; 0x278 <initUSART>
	initUSART(1);
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	32 dc       	rcall	.-1948   	; 0x278 <initUSART>
	LCD_init();
 a14:	ff db       	rcall	.-2050   	; 0x214 <LCD_init>
	tasks[0].state = controllerinit;
 a16:	10 92 f3 01 	sts	0x01F3, r1
 a1a:	10 92 f2 01 	sts	0x01F2, r1
	tasks[0].period = 1;
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	a0 e0       	ldi	r26, 0x00	; 0
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	80 93 f4 01 	sts	0x01F4, r24
 a2a:	90 93 f5 01 	sts	0x01F5, r25
 a2e:	a0 93 f6 01 	sts	0x01F6, r26
 a32:	b0 93 f7 01 	sts	0x01F7, r27
	tasks[0].elapsedTime = 1;
 a36:	80 93 f8 01 	sts	0x01F8, r24
 a3a:	90 93 f9 01 	sts	0x01F9, r25
 a3e:	a0 93 fa 01 	sts	0x01FA, r26
 a42:	b0 93 fb 01 	sts	0x01FB, r27
	tasks[0].TickFct = &TickFct_Controller;
 a46:	87 e1       	ldi	r24, 0x17	; 23
 a48:	93 e0       	ldi	r25, 0x03	; 3
 a4a:	90 93 fd 01 	sts	0x01FD, r25
 a4e:	80 93 fc 01 	sts	0x01FC, r24
	
	tasks[1].state = bluetoothWait;
 a52:	10 92 ff 01 	sts	0x01FF, r1
 a56:	10 92 fe 01 	sts	0x01FE, r1
	tasks[1].period = 5;
 a5a:	85 e0       	ldi	r24, 0x05	; 5
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	a0 e0       	ldi	r26, 0x00	; 0
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	80 93 00 02 	sts	0x0200, r24
 a66:	90 93 01 02 	sts	0x0201, r25
 a6a:	a0 93 02 02 	sts	0x0202, r26
 a6e:	b0 93 03 02 	sts	0x0203, r27
	tasks[1].elapsedTime = 5;
 a72:	80 93 04 02 	sts	0x0204, r24
 a76:	90 93 05 02 	sts	0x0205, r25
 a7a:	a0 93 06 02 	sts	0x0206, r26
 a7e:	b0 93 07 02 	sts	0x0207, r27
	tasks[1].TickFct = &TickFct_BluetoothReceiver;
 a82:	27 ee       	ldi	r18, 0xE7	; 231
 a84:	31 e0       	ldi	r19, 0x01	; 1
 a86:	30 93 09 02 	sts	0x0209, r19
 a8a:	20 93 08 02 	sts	0x0208, r18
	
	tasks[2].state = keypadWait1;
 a8e:	10 92 0b 02 	sts	0x020B, r1
 a92:	10 92 0a 02 	sts	0x020A, r1
	tasks[2].period = 10;
 a96:	4a e0       	ldi	r20, 0x0A	; 10
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	40 93 0c 02 	sts	0x020C, r20
 aa2:	50 93 0d 02 	sts	0x020D, r21
 aa6:	60 93 0e 02 	sts	0x020E, r22
 aaa:	70 93 0f 02 	sts	0x020F, r23
	tasks[2].elapsedTime = 10;
 aae:	40 93 10 02 	sts	0x0210, r20
 ab2:	50 93 11 02 	sts	0x0211, r21
 ab6:	60 93 12 02 	sts	0x0212, r22
 aba:	70 93 13 02 	sts	0x0213, r23
	tasks[2].TickFct = &TickFct_KeypadReceiver;
 abe:	23 e5       	ldi	r18, 0x53	; 83
 ac0:	32 e0       	ldi	r19, 0x02	; 2
 ac2:	30 93 15 02 	sts	0x0215, r19
 ac6:	20 93 14 02 	sts	0x0214, r18
	
	tasks[3].state = checkInit;
 aca:	10 92 17 02 	sts	0x0217, r1
 ace:	10 92 16 02 	sts	0x0216, r1
	tasks[3].period = 15;
 ad2:	4f e0       	ldi	r20, 0x0F	; 15
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	60 e0       	ldi	r22, 0x00	; 0
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	40 93 18 02 	sts	0x0218, r20
 ade:	50 93 19 02 	sts	0x0219, r21
 ae2:	60 93 1a 02 	sts	0x021A, r22
 ae6:	70 93 1b 02 	sts	0x021B, r23
	tasks[3].elapsedTime = 15;
 aea:	40 93 1c 02 	sts	0x021C, r20
 aee:	50 93 1d 02 	sts	0x021D, r21
 af2:	60 93 1e 02 	sts	0x021E, r22
 af6:	70 93 1f 02 	sts	0x021F, r23
	tasks[3].TickFct = &TickFct_CheckPin;
 afa:	2d e1       	ldi	r18, 0x1D	; 29
 afc:	34 e0       	ldi	r19, 0x04	; 4
 afe:	30 93 21 02 	sts	0x0221, r19
 b02:	20 93 20 02 	sts	0x0220, r18
	
	tasks[4].state = usartInit;
 b06:	10 92 23 02 	sts	0x0223, r1
 b0a:	10 92 22 02 	sts	0x0222, r1
	tasks[4].period = 5;
 b0e:	80 93 24 02 	sts	0x0224, r24
 b12:	90 93 25 02 	sts	0x0225, r25
 b16:	a0 93 26 02 	sts	0x0226, r26
 b1a:	b0 93 27 02 	sts	0x0227, r27
	tasks[4].elapsedTime = 5;
 b1e:	80 93 28 02 	sts	0x0228, r24
 b22:	90 93 29 02 	sts	0x0229, r25
 b26:	a0 93 2a 02 	sts	0x022A, r26
 b2a:	b0 93 2b 02 	sts	0x022B, r27
	tasks[4].TickFct = &TickFct_USART;
 b2e:	81 e9       	ldi	r24, 0x91	; 145
 b30:	91 e0       	ldi	r25, 0x01	; 1
 b32:	90 93 2d 02 	sts	0x022D, r25
 b36:	80 93 2c 02 	sts	0x022C, r24

unsigned short tasksNum;
unsigned short tasksPeriodGCD;

void TimerSet(unsigned long ms){
	TCNT1 = 0;		//Initialize avr counter
 b3a:	10 92 85 00 	sts	0x0085, r1
 b3e:	10 92 84 00 	sts	0x0084, r1
					
	OCR1A = 125 * ms;	// AVR output compare register OCR1A.
 b42:	8d e7       	ldi	r24, 0x7D	; 125
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	90 93 89 00 	sts	0x0089, r25
 b4a:	80 93 88 00 	sts	0x0088, r24
	
	TimerSet(1);
	TimerOn();
 b4e:	2d db       	rcall	.-2470   	; 0x1aa <TimerOn>
 b50:	ff cf       	rjmp	.-2      	; 0xb50 <main+0x1b0>

00000b52 <__tablejump2__>:
 b52:	ee 0f       	add	r30, r30
 b54:	ff 1f       	adc	r31, r31

00000b56 <__tablejump__>:
 b56:	05 90       	lpm	r0, Z+
 b58:	f4 91       	lpm	r31, Z
 b5a:	e0 2d       	mov	r30, r0
 b5c:	09 94       	ijmp

00000b5e <__eerd_byte_m1284>:
 b5e:	f9 99       	sbic	0x1f, 1	; 31
 b60:	fe cf       	rjmp	.-4      	; 0xb5e <__eerd_byte_m1284>
 b62:	92 bd       	out	0x22, r25	; 34
 b64:	81 bd       	out	0x21, r24	; 33
 b66:	f8 9a       	sbi	0x1f, 0	; 31
 b68:	99 27       	eor	r25, r25
 b6a:	80 b5       	in	r24, 0x20	; 32
 b6c:	08 95       	ret

00000b6e <__eewr_byte_m1284>:
 b6e:	26 2f       	mov	r18, r22

00000b70 <__eewr_r18_m1284>:
 b70:	f9 99       	sbic	0x1f, 1	; 31
 b72:	fe cf       	rjmp	.-4      	; 0xb70 <__eewr_r18_m1284>
 b74:	1f ba       	out	0x1f, r1	; 31
 b76:	92 bd       	out	0x22, r25	; 34
 b78:	81 bd       	out	0x21, r24	; 33
 b7a:	20 bd       	out	0x20, r18	; 32
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	f8 94       	cli
 b80:	fa 9a       	sbi	0x1f, 2	; 31
 b82:	f9 9a       	sbi	0x1f, 1	; 31
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	01 96       	adiw	r24, 0x01	; 1
 b88:	08 95       	ret

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
