
BluetoothLockControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00000c68  00000cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  008001fa  008001fa  00000df6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ae  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036b  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ed8  00000000  00000000  00002357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ec  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000677  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f9a  00000000  00000000  00003b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
   a:	00 00       	nop
   c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
  12:	00 00       	nop
  14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
  1a:	00 00       	nop
  1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
  1e:	00 00       	nop
  20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
  2a:	00 00       	nop
  2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
  32:	00 00       	nop
  34:	ea c4       	rjmp	.+2516   	; 0xa0a <__vector_13>
  36:	00 00       	nop
  38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
  3a:	00 00       	nop
  3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
  3e:	00 00       	nop
  40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
  42:	00 00       	nop
  44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
  46:	00 00       	nop
  48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
  4a:	00 00       	nop
  4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
  4e:	00 00       	nop
  50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
  52:	00 00       	nop
  54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
  56:	00 00       	nop
  58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
  5e:	00 00       	nop
  60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
  66:	00 00       	nop
  68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
  6a:	00 00       	nop
  6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
  6e:	00 00       	nop
  70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
  72:	00 00       	nop
  74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
  76:	00 00       	nop
  78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
  7e:	00 00       	nop
  80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
  82:	00 00       	nop
  84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
  86:	00 00       	nop
  88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d 03       	fmul	r19, r21
  8e:	4b 03       	fmul	r20, r19
  90:	9c 03       	fmulsu	r17, r20
  92:	71 03       	mulsu	r23, r17
  94:	bb 03       	fmulsu	r19, r19
  96:	0d 04       	cpc	r0, r13
  98:	ed 03       	fmulsu	r22, r21
  9a:	22 04       	cpc	r2, r2
  9c:	2d 04       	cpc	r2, r13
  9e:	3d 04       	cpc	r3, r13
  a0:	46 04       	cpc	r4, r6
  a2:	56 04       	cpc	r5, r6

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d0 e4       	ldi	r29, 0x40	; 64
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	fc e0       	ldi	r31, 0x0C	; 12
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	aa 3f       	cpi	r26, 0xFA	; 250
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	aa ef       	ldi	r26, 0xFA	; 250
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a9 36       	cpi	r26, 0x69	; 105
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	fa d4       	rcall	.+2548   	; 0xad0 <main>
  dc:	c3 c5       	rjmp	.+2950   	; 0xc64 <_exit>

000000de <__bad_interrupt>:
  de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <GetKeypadKey>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  e0:	8f ee       	ldi	r24, 0xEF	; 239
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	00 00       	nop
  e6:	18 9b       	sbis	0x03, 0	; 3
  e8:	45 c0       	rjmp	.+138    	; 0x174 <GetKeypadKey+0x94>
  ea:	83 b1       	in	r24, 0x03	; 3
  ec:	80 95       	com	r24
  ee:	81 fd       	sbrc	r24, 1
  f0:	43 c0       	rjmp	.+134    	; 0x178 <GetKeypadKey+0x98>
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	80 95       	com	r24
  f6:	82 fd       	sbrc	r24, 2
  f8:	41 c0       	rjmp	.+130    	; 0x17c <GetKeypadKey+0x9c>
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	80 95       	com	r24
  fe:	83 fd       	sbrc	r24, 3
 100:	3f c0       	rjmp	.+126    	; 0x180 <GetKeypadKey+0xa0>
 102:	8f ed       	ldi	r24, 0xDF	; 223
 104:	85 b9       	out	0x05, r24	; 5
 106:	00 00       	nop
 108:	18 9b       	sbis	0x03, 0	; 3
 10a:	3c c0       	rjmp	.+120    	; 0x184 <GetKeypadKey+0xa4>
 10c:	83 b1       	in	r24, 0x03	; 3
 10e:	80 95       	com	r24
 110:	81 fd       	sbrc	r24, 1
 112:	3a c0       	rjmp	.+116    	; 0x188 <GetKeypadKey+0xa8>
 114:	83 b1       	in	r24, 0x03	; 3
 116:	80 95       	com	r24
 118:	82 fd       	sbrc	r24, 2
 11a:	38 c0       	rjmp	.+112    	; 0x18c <GetKeypadKey+0xac>
 11c:	83 b1       	in	r24, 0x03	; 3
 11e:	80 95       	com	r24
 120:	83 fd       	sbrc	r24, 3
 122:	36 c0       	rjmp	.+108    	; 0x190 <GetKeypadKey+0xb0>
 124:	8f eb       	ldi	r24, 0xBF	; 191
 126:	85 b9       	out	0x05, r24	; 5
 128:	00 00       	nop
 12a:	18 9b       	sbis	0x03, 0	; 3
 12c:	33 c0       	rjmp	.+102    	; 0x194 <GetKeypadKey+0xb4>
 12e:	83 b1       	in	r24, 0x03	; 3
 130:	80 95       	com	r24
 132:	81 fd       	sbrc	r24, 1
 134:	31 c0       	rjmp	.+98     	; 0x198 <GetKeypadKey+0xb8>
 136:	83 b1       	in	r24, 0x03	; 3
 138:	80 95       	com	r24
 13a:	82 fd       	sbrc	r24, 2
 13c:	2f c0       	rjmp	.+94     	; 0x19c <GetKeypadKey+0xbc>
 13e:	83 b1       	in	r24, 0x03	; 3
 140:	80 95       	com	r24
 142:	83 fd       	sbrc	r24, 3
 144:	2d c0       	rjmp	.+90     	; 0x1a0 <GetKeypadKey+0xc0>
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	85 b9       	out	0x05, r24	; 5
 14a:	00 00       	nop
 14c:	93 b1       	in	r25, 0x03	; 3
 14e:	90 95       	com	r25
 150:	89 2f       	mov	r24, r25
 152:	81 70       	andi	r24, 0x01	; 1
 154:	90 fd       	sbrc	r25, 0
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <GetKeypadKey+0xc4>
 158:	93 b1       	in	r25, 0x03	; 3
 15a:	90 95       	com	r25
 15c:	91 fd       	sbrc	r25, 1
 15e:	24 c0       	rjmp	.+72     	; 0x1a8 <GetKeypadKey+0xc8>
 160:	93 b1       	in	r25, 0x03	; 3
 162:	90 95       	com	r25
 164:	92 fd       	sbrc	r25, 2
 166:	22 c0       	rjmp	.+68     	; 0x1ac <GetKeypadKey+0xcc>
 168:	93 b1       	in	r25, 0x03	; 3
 16a:	90 95       	com	r25
 16c:	93 ff       	sbrs	r25, 3
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <GetKeypadKey+0xce>
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	08 95       	ret
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	08 95       	ret
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	08 95       	ret
 17c:	87 e3       	ldi	r24, 0x37	; 55
 17e:	08 95       	ret
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	08 95       	ret
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	08 95       	ret
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	08 95       	ret
 18c:	88 e3       	ldi	r24, 0x38	; 56
 18e:	08 95       	ret
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	08 95       	ret
 198:	86 e3       	ldi	r24, 0x36	; 54
 19a:	08 95       	ret
 19c:	89 e3       	ldi	r24, 0x39	; 57
 19e:	08 95       	ret
 1a0:	83 e2       	ldi	r24, 0x23	; 35
 1a2:	08 95       	ret
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	08 95       	ret
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	08 95       	ret
 1ac:	83 e4       	ldi	r24, 0x43	; 67
 1ae:	08 95       	ret

000001b0 <TimerOn>:
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	80 93 81 00 	sts	0x0081, r24
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 6f 00 	sts	0x006F, r24
 1bc:	8f b7       	in	r24, 0x3f	; 63
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8f bf       	out	0x3f, r24	; 63
 1c2:	08 95       	ret

000001c4 <delay_ms>:
 1c4:	18 16       	cp	r1, r24
 1c6:	19 06       	cpc	r1, r25
 1c8:	9c f4       	brge	.+38     	; 0x1f0 <delay_ms+0x2c>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	77 e0       	ldi	r23, 0x07	; 7
 1d0:	63 e0       	ldi	r22, 0x03	; 3
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <delay_ms+0x26>
 1d4:	00 00       	nop
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1
 1da:	21 15       	cp	r18, r1
 1dc:	31 05       	cpc	r19, r1
 1de:	d1 f7       	brne	.-12     	; 0x1d4 <delay_ms+0x10>
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	48 17       	cp	r20, r24
 1e6:	59 07       	cpc	r21, r25
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <delay_ms+0x2c>
 1ea:	27 2f       	mov	r18, r23
 1ec:	36 2f       	mov	r19, r22
 1ee:	f2 cf       	rjmp	.-28     	; 0x1d4 <delay_ms+0x10>
 1f0:	08 95       	ret

000001f2 <LCD_WriteCommand>:
 1f2:	16 98       	cbi	0x02, 6	; 2
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	17 9a       	sbi	0x02, 7	; 2
 1f8:	00 00       	nop
 1fa:	17 98       	cbi	0x02, 7	; 2
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e1 cf       	rjmp	.-62     	; 0x1c4 <delay_ms>
 202:	08 95       	ret

00000204 <LCD_ClearScreen>:
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	f5 cf       	rjmp	.-22     	; 0x1f2 <LCD_WriteCommand>
 208:	08 95       	ret

0000020a <LCD_Cursor>:
 20a:	81 31       	cpi	r24, 0x11	; 17
 20c:	18 f4       	brcc	.+6      	; 0x214 <LCD_Cursor+0xa>
 20e:	81 58       	subi	r24, 0x81	; 129
 210:	f0 cf       	rjmp	.-32     	; 0x1f2 <LCD_WriteCommand>
 212:	08 95       	ret
 214:	81 55       	subi	r24, 0x51	; 81
 216:	ed cf       	rjmp	.-38     	; 0x1f2 <LCD_WriteCommand>
 218:	08 95       	ret

0000021a <LCD_init>:
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	d2 df       	rcall	.-92     	; 0x1c4 <delay_ms>
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	e7 df       	rcall	.-50     	; 0x1f2 <LCD_WriteCommand>
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	e5 df       	rcall	.-54     	; 0x1f2 <LCD_WriteCommand>
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	e3 df       	rcall	.-58     	; 0x1f2 <LCD_WriteCommand>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	e1 df       	rcall	.-62     	; 0x1f2 <LCD_WriteCommand>
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	c7 cf       	rjmp	.-114    	; 0x1c4 <delay_ms>
 236:	08 95       	ret

00000238 <LCD_WriteData>:
 238:	16 9a       	sbi	0x02, 6	; 2
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	17 9a       	sbi	0x02, 7	; 2
 23e:	00 00       	nop
 240:	17 98       	cbi	0x02, 7	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	be cf       	rjmp	.-132    	; 0x1c4 <delay_ms>
 248:	08 95       	ret

0000024a <LCD_DisplayString>:
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	18 2f       	mov	r17, r24
 254:	eb 01       	movw	r28, r22
 256:	d6 df       	rcall	.-84     	; 0x204 <LCD_ClearScreen>
 258:	88 81       	ld	r24, Y
 25a:	88 23       	and	r24, r24
 25c:	59 f0       	breq	.+22     	; 0x274 <LCD_DisplayString+0x2a>
 25e:	01 e0       	ldi	r16, 0x01	; 1
 260:	01 0f       	add	r16, r17
 262:	81 2f       	mov	r24, r17
 264:	d2 df       	rcall	.-92     	; 0x20a <LCD_Cursor>
 266:	89 91       	ld	r24, Y+
 268:	e7 df       	rcall	.-50     	; 0x238 <LCD_WriteData>
 26a:	88 81       	ld	r24, Y
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <LCD_DisplayString+0x2a>
 270:	10 2f       	mov	r17, r16
 272:	f5 cf       	rjmp	.-22     	; 0x25e <LCD_DisplayString+0x14>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <initUSART>:
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	81 f0       	breq	.+32     	; 0x2a2 <initUSART+0x24>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
 28c:	e2 ec       	ldi	r30, 0xC2	; 194
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	86 60       	ori	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
 296:	87 e6       	ldi	r24, 0x67	; 103
 298:	80 93 c4 00 	sts	0x00C4, r24
 29c:	10 92 c5 00 	sts	0x00C5, r1
 2a0:	08 95       	ret
 2a2:	e9 ec       	ldi	r30, 0xC9	; 201
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	80 83       	st	Z, r24
 2ac:	ea ec       	ldi	r30, 0xCA	; 202
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	80 83       	st	Z, r24
 2b6:	87 e6       	ldi	r24, 0x67	; 103
 2b8:	80 93 cc 00 	sts	0x00CC, r24
 2bc:	10 92 cd 00 	sts	0x00CD, r1
 2c0:	08 95       	ret

000002c2 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	80 91 c8 00 	lds	r24, 0x00C8
 2ca:	88 23       	and	r24, r24
 2cc:	84 f0       	brlt	.+32     	; 0x2ee <USART_Flush+0x2c>
 2ce:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	88 23       	and	r24, r24
 2d6:	ac f4       	brge	.+42     	; 0x302 <USART_Flush+0x40>
 2d8:	a6 ec       	ldi	r26, 0xC6	; 198
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 93 fa 01 	sts	0x01FA, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	d4 f3       	brlt	.-12     	; 0x2e0 <USART_Flush+0x1e>
 2ec:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2ee:	ae ec       	ldi	r26, 0xCE	; 206
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e8 ec       	ldi	r30, 0xC8	; 200
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8c 91       	ld	r24, X
 2f8:	80 93 fa 01 	sts	0x01FA, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	d4 f3       	brlt	.-12     	; 0x2f6 <USART_Flush+0x34>
 302:	08 95       	ret

00000304 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 308:	e0 ec       	ldi	r30, 0xC0	; 192
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	90 81       	ld	r25, Z
 30e:	95 ff       	sbrs	r25, 5
 310:	fd cf       	rjmp	.-6      	; 0x30c <USART_Send+0x8>
		UDR0 = sendMe;
 312:	80 93 c6 00 	sts	0x00C6, r24
 316:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 318:	e8 ec       	ldi	r30, 0xC8	; 200
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	95 ff       	sbrs	r25, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <USART_Send+0x18>
		UDR1 = sendMe;
 322:	80 93 ce 00 	sts	0x00CE, r24
 326:	08 95       	ret

00000328 <TickFct_USART>:
	}
	return state;
}

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
 328:	cf 93       	push	r28
	unsigned char doorClosed = (~PIND & 0x10) >> 4;
 32a:	c9 b1       	in	r28, 0x09	; 9
	switch(state){
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	91 05       	cpc	r25, r1
 330:	61 f0       	breq	.+24     	; 0x34a <TickFct_USART+0x22>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	91 05       	cpc	r25, r1
 336:	f1 f0       	breq	.+60     	; 0x374 <TickFct_USART+0x4c>
 338:	89 2b       	or	r24, r25
 33a:	09 f0       	breq	.+2      	; 0x33e <TickFct_USART+0x16>
 33c:	41 c0       	rjmp	.+130    	; 0x3c0 <TickFct_USART+0x98>
		case usartInit:
			state = usartLocked;
			USART_Send(0x01, 1);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	e0 df       	rcall	.-64     	; 0x304 <USART_Send>
enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	unsigned char doorClosed = (~PIND & 0x10) >> 4;
	switch(state){
		case usartInit:
			state = usartLocked;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
			USART_Send(0x01, 1);
			break;
 348:	3d c0       	rjmp	.+122    	; 0x3c4 <TickFct_USART+0x9c>
		case usartLocked:
			if(lockedFlag){
 34a:	20 91 fe 01 	lds	r18, 0x01FE
 34e:	21 11       	cpse	r18, r1
 350:	39 c0       	rjmp	.+114    	; 0x3c4 <TickFct_USART+0x9c>
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
				USART_Send(0x00, 1);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	d6 df       	rcall	.-84     	; 0x304 <USART_Send>
				LCD_DisplayString(1, "Unlocking...");
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	75 df       	rcall	.-278    	; 0x24a <LCD_DisplayString>
				delay_ms(5000);
 360:	88 e8       	ldi	r24, 0x88	; 136
 362:	93 e1       	ldi	r25, 0x13	; 19
 364:	2f df       	rcall	.-418    	; 0x1c4 <delay_ms>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
 366:	6d e0       	ldi	r22, 0x0D	; 13
 368:	71 e0       	ldi	r23, 0x01	; 1
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	6e df       	rcall	.-292    	; 0x24a <LCD_DisplayString>
		case usartLocked:
			if(lockedFlag){
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	28 c0       	rjmp	.+80     	; 0x3c4 <TickFct_USART+0x9c>
				delay_ms(5000);
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
 374:	20 91 fe 01 	lds	r18, 0x01FE
 378:	22 23       	and	r18, r18
 37a:	21 f1       	breq	.+72     	; 0x3c4 <TickFct_USART+0x9c>
				state = usartLocked;
				USART_Send(0x01, 1);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	c1 df       	rcall	.-126    	; 0x304 <USART_Send>
				LCD_DisplayString(1, "Locking...");
 382:	6d e2       	ldi	r22, 0x2D	; 45
 384:	71 e0       	ldi	r23, 0x01	; 1
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	60 df       	rcall	.-320    	; 0x24a <LCD_DisplayString>
				delay_ms(5000);
 38a:	88 e8       	ldi	r24, 0x88	; 136
 38c:	93 e1       	ldi	r25, 0x13	; 19
 38e:	1a df       	rcall	.-460    	; 0x1c4 <delay_ms>
	return state;
}

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	unsigned char doorClosed = (~PIND & 0x10) >> 4;
 390:	8c 2f       	mov	r24, r28
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	80 95       	com	r24
 396:	90 95       	com	r25
			if(lockedFlag){
				state = usartLocked;
				USART_Send(0x01, 1);
				LCD_DisplayString(1, "Locking...");
				delay_ms(5000);
				if(!doorClosed && lockedFlag ){
 398:	84 fd       	sbrc	r24, 4
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <TickFct_USART+0x8a>
 39c:	80 91 fe 01 	lds	r24, 0x01FE
 3a0:	88 23       	and	r24, r24
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <TickFct_USART+0x8a>
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
 3a4:	68 e3       	ldi	r22, 0x38	; 56
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	4f df       	rcall	.-354    	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
				state = usartLocked;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
				USART_Send(0x01, 1);
				LCD_DisplayString(1, "Locking...");
				delay_ms(5000);
				if(!doorClosed && lockedFlag ){
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <TickFct_USART+0x9c>
				}
				else{
					LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 3b2:	6b e4       	ldi	r22, 0x4B	; 75
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	48 df       	rcall	.-368    	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
				state = usartLocked;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <TickFct_USART+0x9c>
			else{
				state = usartUnlocked;
			}
			break;
		default:
			state = usartInit;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	return state;
}
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	41 f0       	breq	.+16     	; 0x3dc <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 3cc:	e0 ec       	ldi	r30, 0xC0	; 192
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	88 23       	and	r24, r24
 3d4:	ec f7       	brge	.-6      	; 0x3d0 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 3d6:	80 91 c6 00 	lds	r24, 0x00C6
 3da:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 3dc:	e8 ec       	ldi	r30, 0xC8	; 200
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 23       	and	r24, r24
 3e4:	ec f7       	brge	.-6      	; 0x3e0 <USART_Receive+0x18>
		return UDR1;
 3e6:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 3ea:	08 95       	ret

000003ec <clearInputPin>:
unsigned char pinInputComplete;
//---------------Flags---------------


void clearInputPin()						//clears the Character Array for Input Pin
{
 3ec:	e1 e5       	ldi	r30, 0x51	; 81
 3ee:	f2 e0       	ldi	r31, 0x02	; 2
 3f0:	89 e5       	ldi	r24, 0x59	; 89
 3f2:	92 e0       	ldi	r25, 0x02	; 2
	for(unsigned char i = 0; i < 8; ++i){
		inputPin[i] = '\0';
 3f4:	11 92       	st	Z+, r1
//---------------Flags---------------


void clearInputPin()						//clears the Character Array for Input Pin
{
	for(unsigned char i = 0; i < 8; ++i){
 3f6:	e8 17       	cp	r30, r24
 3f8:	f9 07       	cpc	r31, r25
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <clearInputPin+0x8>
		inputPin[i] = '\0';
	}
}
 3fc:	08 95       	ret

000003fe <TickFct_BluetoothReceiver>:
	}
	return state;
}

enum SM_BluetoothReceiver{bluetoothWait, bluetoothReceived, bluetoothWaitForNext};
int TickFct_BluetoothReceiver(int state){
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
	switch(state){
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	91 05       	cpc	r25, r1
 408:	01 f1       	breq	.+64     	; 0x44a <TickFct_BluetoothReceiver+0x4c>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	91 05       	cpc	r25, r1
 40e:	41 f1       	breq	.+80     	; 0x460 <TickFct_BluetoothReceiver+0x62>
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	09 f0       	breq	.+2      	; 0x416 <TickFct_BluetoothReceiver+0x18>
 414:	4e c0       	rjmp	.+156    	; 0x4b2 <TickFct_BluetoothReceiver+0xb4>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 416:	80 91 c0 00 	lds	r24, 0x00C0
		case bluetoothWait:
			if(USART_HasReceived(0) && !bluetoothEnable){
 41a:	88 23       	and	r24, r24
 41c:	34 f4       	brge	.+12     	; 0x42a <TickFct_BluetoothReceiver+0x2c>
 41e:	80 91 40 02 	lds	r24, 0x0240
 422:	81 11       	cpse	r24, r1
 424:	02 c0       	rjmp	.+4      	; 0x42a <TickFct_BluetoothReceiver+0x2c>
				USART_Flush(0);
 426:	4d df       	rcall	.-358    	; 0x2c2 <USART_Flush>
				state = bluetoothWait;
 428:	52 c0       	rjmp	.+164    	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
 42a:	80 91 c0 00 	lds	r24, 0x00C0
			}
			else if(USART_HasReceived(0) && bluetoothEnable){
 42e:	88 23       	and	r24, r24
 430:	0c f0       	brlt	.+2      	; 0x434 <TickFct_BluetoothReceiver+0x36>
 432:	4d c0       	rjmp	.+154    	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
 434:	80 91 40 02 	lds	r24, 0x0240
 438:	88 23       	and	r24, r24
 43a:	09 f4       	brne	.+2      	; 0x43e <TickFct_BluetoothReceiver+0x40>
 43c:	48 c0       	rjmp	.+144    	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothReceived;
				position = 0;
 43e:	10 92 3c 02 	sts	0x023C, r1
				lastReceivedChar = 0;
 442:	10 92 66 02 	sts	0x0266, r1
				clearInputPin();
 446:	d2 df       	rcall	.-92     	; 0x3ec <clearInputPin>
 448:	40 c0       	rjmp	.+128    	; 0x4ca <TickFct_BluetoothReceiver+0xcc>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
 44a:	80 91 40 02 	lds	r24, 0x0240
 44e:	88 23       	and	r24, r24
 450:	99 f1       	breq	.+102    	; 0x4b8 <TickFct_BluetoothReceiver+0xba>
				state = bluetoothWait;
			}
			else if(lastReceivedChar != '*'){
 452:	80 91 66 02 	lds	r24, 0x0266
 456:	8a 32       	cpi	r24, 0x2A	; 42
 458:	91 f1       	breq	.+100    	; 0x4be <TickFct_BluetoothReceiver+0xc0>
				state = bluetoothWaitForNext;
 45a:	c2 e0       	ldi	r28, 0x02	; 2
 45c:	d0 e0       	ldi	r29, 0x00	; 0
 45e:	37 c0       	rjmp	.+110    	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
 460:	80 91 40 02 	lds	r24, 0x0240
 464:	88 23       	and	r24, r24
 466:	71 f1       	breq	.+92     	; 0x4c4 <TickFct_BluetoothReceiver+0xc6>
 468:	80 91 c0 00 	lds	r24, 0x00C0
				state = bluetoothWait;
			}
			else if(!USART_HasReceived(0)){
 46c:	88 23       	and	r24, r24
 46e:	7c f5       	brge	.+94     	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
 470:	2c c0       	rjmp	.+88     	; 0x4ca <TickFct_BluetoothReceiver+0xcc>
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
				lastReceivedChar = USART_Receive(0);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	a9 df       	rcall	.-174    	; 0x3c8 <USART_Receive>
 476:	80 93 66 02 	sts	0x0266, r24
				if(lastReceivedChar != '*'){
 47a:	8a 32       	cpi	r24, 0x2A	; 42
 47c:	59 f0       	breq	.+22     	; 0x494 <TickFct_BluetoothReceiver+0x96>
					inputPin[position++] = lastReceivedChar;
 47e:	e0 91 3c 02 	lds	r30, 0x023C
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	9e 0f       	add	r25, r30
 486:	90 93 3c 02 	sts	0x023C, r25
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ef 5a       	subi	r30, 0xAF	; 175
 48e:	fd 4f       	sbci	r31, 0xFD	; 253
 490:	80 83       	st	Z, r24
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <TickFct_BluetoothReceiver+0xa6>
				}
				else{
					inputPin[position] = '\0';
 494:	e0 91 3c 02 	lds	r30, 0x023C
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	ef 5a       	subi	r30, 0xAF	; 175
 49c:	fd 4f       	sbci	r31, 0xFD	; 253
 49e:	10 82       	st	Z, r1
					pinInputComplete = 1;
 4a0:	c0 93 3f 02 	sts	0x023F, r28
	}
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
 4a4:	80 91 66 02 	lds	r24, 0x0266
 4a8:	8a 32       	cpi	r24, 0x2A	; 42
 4aa:	19 f7       	brne	.-58     	; 0x472 <TickFct_BluetoothReceiver+0x74>
 4ac:	c1 e0       	ldi	r28, 0x01	; 1
 4ae:	d0 e0       	ldi	r29, 0x00	; 0
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothReceived;
			}
			break;
		default:
			state = bluetoothWait;
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
 4b6:	0b c0       	rjmp	.+22     	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
				state = bluetoothWait;
 4b8:	c0 e0       	ldi	r28, 0x00	; 0
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
			}
			else if(lastReceivedChar != '*'){
				state = bluetoothWaitForNext;
			}
			else{
				state = bluetoothWait;
 4be:	c0 e0       	ldi	r28, 0x00	; 0
 4c0:	d0 e0       	ldi	r29, 0x00	; 0
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
				state = bluetoothWait;
 4c4:	c0 e0       	ldi	r28, 0x00	; 0
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <TickFct_BluetoothReceiver+0xd0>
				if(lastReceivedChar != '*'){
					inputPin[position++] = lastReceivedChar;
				}
				else{
					inputPin[position] = '\0';
					pinInputComplete = 1;
 4ca:	c1 e0       	ldi	r28, 0x01	; 1
 4cc:	eb cf       	rjmp	.-42     	; 0x4a4 <TickFct_BluetoothReceiver+0xa6>
			break;
		case bluetoothWaitForNext:
			break;
	}
	return state;
}
 4ce:	ce 01       	movw	r24, r28
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <TickFct_KeypadReceiver>:

enum SM_KeypadReceiver{keypadWait1, keypadWait2, keypadPressed, keypadWaitRelease};
int TickFct_KeypadReceiver(int state){
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 4de:	00 de       	rcall	.-1024   	; 0xe0 <GetKeypadKey>
 4e0:	18 2f       	mov	r17, r24
	switch(state){
 4e2:	c1 30       	cpi	r28, 0x01	; 1
 4e4:	d1 05       	cpc	r29, r1
 4e6:	51 f1       	breq	.+84     	; 0x53c <TickFct_KeypadReceiver+0x66>
 4e8:	1c f4       	brge	.+6      	; 0x4f0 <TickFct_KeypadReceiver+0x1a>
 4ea:	20 97       	sbiw	r28, 0x00	; 0
 4ec:	41 f0       	breq	.+16     	; 0x4fe <TickFct_KeypadReceiver+0x28>
 4ee:	83 c0       	rjmp	.+262    	; 0x5f6 <TickFct_KeypadReceiver+0x120>
 4f0:	c2 30       	cpi	r28, 0x02	; 2
 4f2:	d1 05       	cpc	r29, r1
 4f4:	81 f0       	breq	.+32     	; 0x516 <TickFct_KeypadReceiver+0x40>
 4f6:	c3 30       	cpi	r28, 0x03	; 3
 4f8:	d1 05       	cpc	r29, r1
 4fa:	c1 f0       	breq	.+48     	; 0x52c <TickFct_KeypadReceiver+0x56>
 4fc:	7c c0       	rjmp	.+248    	; 0x5f6 <TickFct_KeypadReceiver+0x120>
		case keypadWait1:
			if(key == '\0' || !keypadEnable){
 4fe:	88 23       	and	r24, r24
 500:	09 f4       	brne	.+2      	; 0x504 <TickFct_KeypadReceiver+0x2e>
 502:	92 c0       	rjmp	.+292    	; 0x628 <TickFct_KeypadReceiver+0x152>
 504:	80 91 65 02 	lds	r24, 0x0265
 508:	88 23       	and	r24, r24
 50a:	09 f4       	brne	.+2      	; 0x50e <TickFct_KeypadReceiver+0x38>
 50c:	8d c0       	rjmp	.+282    	; 0x628 <TickFct_KeypadReceiver+0x152>
				state = keypadWait1;
			}
			else{
				state = keypadPressed;
				position = 0;
 50e:	10 92 3c 02 	sts	0x023C, r1
				clearInputPin();
 512:	6c df       	rcall	.-296    	; 0x3ec <clearInputPin>
 514:	85 c0       	rjmp	.+266    	; 0x620 <TickFct_KeypadReceiver+0x14a>
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
 516:	80 91 65 02 	lds	r24, 0x0265
 51a:	88 23       	and	r24, r24
 51c:	09 f4       	brne	.+2      	; 0x520 <TickFct_KeypadReceiver+0x4a>
 51e:	71 c0       	rjmp	.+226    	; 0x602 <TickFct_KeypadReceiver+0x12c>
				state = keypadWait1;
			}
			else if(key == '*'){
 520:	1a 32       	cpi	r17, 0x2A	; 42
 522:	09 f0       	breq	.+2      	; 0x526 <TickFct_KeypadReceiver+0x50>
 524:	71 c0       	rjmp	.+226    	; 0x608 <TickFct_KeypadReceiver+0x132>
				state = keypadWait1;
 526:	c0 e0       	ldi	r28, 0x00	; 0
 528:	d0 e0       	ldi	r29, 0x00	; 0
 52a:	7e c0       	rjmp	.+252    	; 0x628 <TickFct_KeypadReceiver+0x152>
			else{
				state = keypadWaitRelease;
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
 52c:	80 91 65 02 	lds	r24, 0x0265
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <TickFct_KeypadReceiver+0x60>
 534:	6c c0       	rjmp	.+216    	; 0x60e <TickFct_KeypadReceiver+0x138>
				state = keypadWait1;
			}
			else if(key !='\0'){
 536:	11 11       	cpse	r17, r1
 538:	77 c0       	rjmp	.+238    	; 0x628 <TickFct_KeypadReceiver+0x152>
 53a:	6c c0       	rjmp	.+216    	; 0x614 <TickFct_KeypadReceiver+0x13e>
			else{
				state = keypadWait2;
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
 53c:	80 91 65 02 	lds	r24, 0x0265
 540:	88 23       	and	r24, r24
 542:	09 f4       	brne	.+2      	; 0x546 <TickFct_KeypadReceiver+0x70>
 544:	6a c0       	rjmp	.+212    	; 0x61a <TickFct_KeypadReceiver+0x144>
				state = keypadWait1;
			}
			else if(key == '\0'){
 546:	11 11       	cpse	r17, r1
 548:	6b c0       	rjmp	.+214    	; 0x620 <TickFct_KeypadReceiver+0x14a>
 54a:	6e c0       	rjmp	.+220    	; 0x628 <TickFct_KeypadReceiver+0x152>
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
				if(key != 'A' && key != 'C'){
 54c:	81 2f       	mov	r24, r17
 54e:	8d 7f       	andi	r24, 0xFD	; 253
 550:	81 34       	cpi	r24, 0x41	; 65
 552:	09 f4       	brne	.+2      	; 0x556 <TickFct_KeypadReceiver+0x80>
 554:	53 c0       	rjmp	.+166    	; 0x5fc <TickFct_KeypadReceiver+0x126>
					inputPin[position++] = key;
 556:	e0 91 3c 02 	lds	r30, 0x023C
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	8e 0f       	add	r24, r30
 55e:	80 93 3c 02 	sts	0x023C, r24
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ef 5a       	subi	r30, 0xAF	; 175
 566:	fd 4f       	sbci	r31, 0xFD	; 253
 568:	10 83       	st	Z, r17
					if(showPin){
 56a:	80 91 64 02 	lds	r24, 0x0264
 56e:	88 23       	and	r24, r24
 570:	29 f0       	breq	.+10     	; 0x57c <TickFct_KeypadReceiver+0xa6>
						LCD_WriteData(key);
 572:	81 2f       	mov	r24, r17
 574:	61 de       	rcall	.-830    	; 0x238 <LCD_WriteData>
 576:	c2 e0       	ldi	r28, 0x02	; 2
 578:	d0 e0       	ldi	r29, 0x00	; 0
 57a:	56 c0       	rjmp	.+172    	; 0x628 <TickFct_KeypadReceiver+0x152>
					}
					else{
						LCD_WriteData('*');
 57c:	8a e2       	ldi	r24, 0x2A	; 42
 57e:	5c de       	rcall	.-840    	; 0x238 <LCD_WriteData>
 580:	c2 e0       	ldi	r28, 0x02	; 2
 582:	d0 e0       	ldi	r29, 0x00	; 0
 584:	51 c0       	rjmp	.+162    	; 0x628 <TickFct_KeypadReceiver+0x152>
					}
				}
			}
			else{
				if(showPin){
 586:	80 91 64 02 	lds	r24, 0x0264
 58a:	88 23       	and	r24, r24
 58c:	41 f1       	breq	.+80     	; 0x5de <TickFct_KeypadReceiver+0x108>
					LCD_DisplayString(1, "Changing...");
 58e:	6b e6       	ldi	r22, 0x6B	; 107
 590:	71 e0       	ldi	r23, 0x01	; 1
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	5a de       	rcall	.-844    	; 0x24a <LCD_DisplayString>
					inputPin[position] = '\0';
 596:	e0 91 3c 02 	lds	r30, 0x023C
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	ef 5a       	subi	r30, 0xAF	; 175
 59e:	fd 4f       	sbci	r31, 0xFD	; 253
 5a0:	10 82       	st	Z, r1
					newPinInputComplete = 1;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 68 02 	sts	0x0268, r24
					unsigned char counter = 0;
					correctPinAddr = CORRECTPINSTARTADDR;
 5a8:	10 92 fb 01 	sts	0x01FB, r1
			else{
				if(showPin){
					LCD_DisplayString(1, "Changing...");
					inputPin[position] = '\0';
					newPinInputComplete = 1;
					unsigned char counter = 0;
 5ac:	10 e0       	ldi	r17, 0x00	; 0
					correctPinAddr = CORRECTPINSTARTADDR;
					while(1){
						eeprom_write_byte(correctPinAddr++, inputPin[counter]);
 5ae:	c1 2f       	mov	r28, r17
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	cf 5a       	subi	r28, 0xAF	; 175
 5b4:	dd 4f       	sbci	r29, 0xFD	; 253
 5b6:	68 81       	ld	r22, Y
 5b8:	80 91 fb 01 	lds	r24, 0x01FB
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	98 0f       	add	r25, r24
 5c0:	90 93 fb 01 	sts	0x01FB, r25
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	40 d3       	rcall	.+1664   	; 0xc48 <__eewr_byte_m1284>
						if(inputPin[counter] == '\0'){
 5c8:	88 81       	ld	r24, Y
 5ca:	88 23       	and	r24, r24
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <TickFct_KeypadReceiver+0xfc>
							break;
						}
						++counter;
 5ce:	1f 5f       	subi	r17, 0xFF	; 255
					}
 5d0:	ee cf       	rjmp	.-36     	; 0x5ae <TickFct_KeypadReceiver+0xd8>
					newPinInputComplete = 1;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	80 93 68 02 	sts	0x0268, r24
 5d8:	c2 e0       	ldi	r28, 0x02	; 2
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	25 c0       	rjmp	.+74     	; 0x628 <TickFct_KeypadReceiver+0x152>
				}
				else{
					inputPin[position] = '\0';
 5de:	e0 91 3c 02 	lds	r30, 0x023C
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	ef 5a       	subi	r30, 0xAF	; 175
 5e6:	fd 4f       	sbci	r31, 0xFD	; 253
 5e8:	10 82       	st	Z, r1
					pinInputComplete = 1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 3f 02 	sts	0x023F, r24
 5f0:	c2 e0       	ldi	r28, 0x02	; 2
 5f2:	d0 e0       	ldi	r29, 0x00	; 0
 5f4:	19 c0       	rjmp	.+50     	; 0x628 <TickFct_KeypadReceiver+0x152>
			else{
				state = keypadPressed;
			}
			break;
		default:
			state = keypadWait1;
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	16 c0       	rjmp	.+44     	; 0x628 <TickFct_KeypadReceiver+0x152>
 5fc:	c2 e0       	ldi	r28, 0x02	; 2
 5fe:	d0 e0       	ldi	r29, 0x00	; 0
 600:	13 c0       	rjmp	.+38     	; 0x628 <TickFct_KeypadReceiver+0x152>
				clearInputPin();
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
				state = keypadWait1;
 602:	c0 e0       	ldi	r28, 0x00	; 0
 604:	d0 e0       	ldi	r29, 0x00	; 0
 606:	10 c0       	rjmp	.+32     	; 0x628 <TickFct_KeypadReceiver+0x152>
			}
			else if(key == '*'){
				state = keypadWait1;
			}
			else{
				state = keypadWaitRelease;
 608:	c3 e0       	ldi	r28, 0x03	; 3
 60a:	d0 e0       	ldi	r29, 0x00	; 0
 60c:	0d c0       	rjmp	.+26     	; 0x628 <TickFct_KeypadReceiver+0x152>
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
				state = keypadWait1;
 60e:	c0 e0       	ldi	r28, 0x00	; 0
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	0a c0       	rjmp	.+20     	; 0x628 <TickFct_KeypadReceiver+0x152>
			}
			else if(key !='\0'){
				state = keypadWaitRelease;
			}
			else{
				state = keypadWait2;
 614:	c1 e0       	ldi	r28, 0x01	; 1
 616:	d0 e0       	ldi	r29, 0x00	; 0
 618:	07 c0       	rjmp	.+14     	; 0x628 <TickFct_KeypadReceiver+0x152>
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
				state = keypadWait1;
 61a:	c0 e0       	ldi	r28, 0x00	; 0
 61c:	d0 e0       	ldi	r29, 0x00	; 0
 61e:	04 c0       	rjmp	.+8      	; 0x628 <TickFct_KeypadReceiver+0x152>
		case keypadWait1:
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
 620:	1a 32       	cpi	r17, 0x2A	; 42
 622:	09 f0       	breq	.+2      	; 0x626 <TickFct_KeypadReceiver+0x150>
 624:	93 cf       	rjmp	.-218    	; 0x54c <TickFct_KeypadReceiver+0x76>
 626:	af cf       	rjmp	.-162    	; 0x586 <TickFct_KeypadReceiver+0xb0>
			break;
		case keypadWaitRelease:
			break;
	}
	return state;
}
 628:	ce 01       	movw	r24, r28
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	08 95       	ret

00000632 <clearFlags>:
		inputPin[i] = '\0';
	}
}

void clearFlags(){
	checkPinFlag = 0;
 632:	10 92 ff 01 	sts	0x01FF, r1
	keypadEnable = 0;
 636:	10 92 65 02 	sts	0x0265, r1
	bluetoothEnable = 0;
 63a:	10 92 40 02 	sts	0x0240, r1
	controlCounter = 0;
 63e:	10 92 63 02 	sts	0x0263, r1
 642:	10 92 62 02 	sts	0x0262, r1
	lockedFlag = 1;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 fe 01 	sts	0x01FE, r24
	showPin = 0;
 64c:	10 92 64 02 	sts	0x0264, r1
	pinInputComplete = 0;
 650:	10 92 3f 02 	sts	0x023F, r1
 654:	08 95       	ret

00000656 <TickFct_Controller>:
}

enum SM_Controller{controllerinit, controllerWait, controllerKeypad, controllerBluetooth, controllerCheck,
	 controllerUnlocked, controllerLocked, controllerLockWaitRelease, controllerChangePin, controllerIntrusionDetected, 
	 controllerIntrusionPin, controllerIntrusionCheck};
int TickFct_Controller(int state){
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 65c:	41 dd       	rcall	.-1406   	; 0xe0 <GetKeypadKey>
	unsigned char doorClosed = (~PIND & 0x10) >> 4;
 65e:	29 b1       	in	r18, 0x09	; 9
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	20 95       	com	r18
 664:	30 95       	com	r19
 666:	22 95       	swap	r18
 668:	21 70       	andi	r18, 0x01	; 1
	switch(state){
 66a:	cc 30       	cpi	r28, 0x0C	; 12
 66c:	d1 05       	cpc	r29, r1
 66e:	08 f0       	brcs	.+2      	; 0x672 <TickFct_Controller+0x1c>
 670:	3f c1       	rjmp	.+638    	; 0x8f0 <TickFct_Controller+0x29a>
 672:	fe 01       	movw	r30, r28
 674:	ea 5b       	subi	r30, 0xBA	; 186
 676:	ff 4f       	sbci	r31, 0xFF	; 255
 678:	d9 c2       	rjmp	.+1458   	; 0xc2c <__tablejump2__>
		case controllerinit:
			clearFlags();											
 67a:	db df       	rcall	.-74     	; 0x632 <clearFlags>
			lockedFlag = 1;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	80 93 fe 01 	sts	0x01FE, r24
			showPin = 0;
 682:	10 92 64 02 	sts	0x0264, r1
			state = controllerWait;
			clearInputPin();
 686:	b2 de       	rcall	.-668    	; 0x3ec <clearInputPin>
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 688:	6b e4       	ldi	r22, 0x4B	; 75
 68a:	71 e0       	ldi	r23, 0x01	; 1
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	dd dd       	rcall	.-1094   	; 0x24a <LCD_DisplayString>
	switch(state){
		case controllerinit:
			clearFlags();											
			lockedFlag = 1;
			showPin = 0;
			state = controllerWait;
 690:	c1 e0       	ldi	r28, 0x01	; 1
 692:	d0 e0       	ldi	r29, 0x00	; 0
			clearInputPin();
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
			break;
 694:	4a c1       	rjmp	.+660    	; 0x92a <TickFct_Controller+0x2d4>
		case controllerWait:
			if(!doorClosed && lockedFlag ){
 696:	21 11       	cpse	r18, r1
 698:	0d c0       	rjmp	.+26     	; 0x6b4 <TickFct_Controller+0x5e>
 69a:	90 91 fe 01 	lds	r25, 0x01FE
 69e:	99 23       	and	r25, r25
 6a0:	49 f0       	breq	.+18     	; 0x6b4 <TickFct_Controller+0x5e>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6a6:	68 e3       	ldi	r22, 0x38	; 56
 6a8:	71 e0       	ldi	r23, 0x01	; 1
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	ce dd       	rcall	.-1124   	; 0x24a <LCD_DisplayString>
			clearInputPin();
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
			break;
		case controllerWait:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 6ae:	c9 e0       	ldi	r28, 0x09	; 9
 6b0:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6b2:	3b c1       	rjmp	.+630    	; 0x92a <TickFct_Controller+0x2d4>
			}
			else if(key == 'A'){
 6b4:	81 34       	cpi	r24, 0x41	; 65
 6b6:	49 f4       	brne	.+18     	; 0x6ca <TickFct_Controller+0x74>
				state = controllerKeypad;
				keypadEnable = 1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 93 65 02 	sts	0x0265, r24
				clearInputPin();
 6be:	96 de       	rcall	.-724    	; 0x3ec <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 6c0:	65 e4       	ldi	r22, 0x45	; 69
 6c2:	71 e0       	ldi	r23, 0x01	; 1
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	c1 dd       	rcall	.-1150   	; 0x24a <LCD_DisplayString>
 6c8:	16 c1       	rjmp	.+556    	; 0x8f6 <TickFct_Controller+0x2a0>
			}
			else if(key == 'B'){
 6ca:	82 34       	cpi	r24, 0x42	; 66
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <TickFct_Controller+0x7a>
 6ce:	2d c1       	rjmp	.+602    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerBluetooth;
				bluetoothEnable = 1;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	80 93 40 02 	sts	0x0240, r24
				clearInputPin();
 6d6:	8a de       	rcall	.-748    	; 0x3ec <clearInputPin>
				LCD_DisplayString(1, "Waiting to Rec  C to Cancel");
 6d8:	67 e7       	ldi	r22, 0x77	; 119
 6da:	71 e0       	ldi	r23, 0x01	; 1
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	b5 dd       	rcall	.-1174   	; 0x24a <LCD_DisplayString>
 6e0:	10 c1       	rjmp	.+544    	; 0x902 <TickFct_Controller+0x2ac>
			}
			break;
		case controllerBluetooth:
			if(!doorClosed && lockedFlag ){
 6e2:	21 11       	cpse	r18, r1
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <TickFct_Controller+0xaa>
 6e6:	90 91 fe 01 	lds	r25, 0x01FE
 6ea:	99 23       	and	r25, r25
 6ec:	49 f0       	breq	.+18     	; 0x700 <TickFct_Controller+0xaa>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6f2:	68 e3       	ldi	r22, 0x38	; 56
 6f4:	71 e0       	ldi	r23, 0x01	; 1
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	a8 dd       	rcall	.-1200   	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Waiting to Rec  C to Cancel");
			}
			break;
		case controllerBluetooth:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 6fa:	c9 e0       	ldi	r28, 0x09	; 9
 6fc:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6fe:	15 c1       	rjmp	.+554    	; 0x92a <TickFct_Controller+0x2d4>
			}
			else if(key == 'C'){
 700:	83 34       	cpi	r24, 0x43	; 67
 702:	51 f4       	brne	.+20     	; 0x718 <TickFct_Controller+0xc2>
				state = controllerWait;
				bluetoothEnable = 0;
 704:	10 92 40 02 	sts	0x0240, r1
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 708:	6b e4       	ldi	r22, 0x4B	; 75
 70a:	71 e0       	ldi	r23, 0x01	; 1
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	9d dd       	rcall	.-1222   	; 0x24a <LCD_DisplayString>
				clearFlags();
 710:	90 df       	rcall	.-224    	; 0x632 <clearFlags>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(key == 'C'){
				state = controllerWait;
 712:	c1 e0       	ldi	r28, 0x01	; 1
 714:	d0 e0       	ldi	r29, 0x00	; 0
 716:	09 c1       	rjmp	.+530    	; 0x92a <TickFct_Controller+0x2d4>
				bluetoothEnable = 0;
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
				clearFlags();
			}
			else if(pinInputComplete){
 718:	80 91 3f 02 	lds	r24, 0x023F
 71c:	88 23       	and	r24, r24
 71e:	09 f4       	brne	.+2      	; 0x722 <TickFct_Controller+0xcc>
 720:	f0 c0       	rjmp	.+480    	; 0x902 <TickFct_Controller+0x2ac>
				state = controllerCheck;
				checkPinFlag = 1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 ff 01 	sts	0x01FF, r24
				bluetoothEnable = 0;
 728:	10 92 40 02 	sts	0x0240, r1
				LCD_DisplayString(1, "Checking...     C to Cancel");
 72c:	63 e9       	ldi	r22, 0x93	; 147
 72e:	71 e0       	ldi	r23, 0x01	; 1
 730:	8c dd       	rcall	.-1256   	; 0x24a <LCD_DisplayString>
				bluetoothEnable = 0;
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
				clearFlags();
			}
			else if(pinInputComplete){
				state = controllerCheck;
 732:	c4 e0       	ldi	r28, 0x04	; 4
 734:	d0 e0       	ldi	r29, 0x00	; 0
 736:	f9 c0       	rjmp	.+498    	; 0x92a <TickFct_Controller+0x2d4>
			else{
				state = controllerBluetooth;
			}
			break;
		case controllerKeypad:
			if(!doorClosed && lockedFlag ){
 738:	21 11       	cpse	r18, r1
 73a:	0d c0       	rjmp	.+26     	; 0x756 <TickFct_Controller+0x100>
 73c:	80 91 fe 01 	lds	r24, 0x01FE
 740:	88 23       	and	r24, r24
 742:	49 f0       	breq	.+18     	; 0x756 <TickFct_Controller+0x100>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 748:	68 e3       	ldi	r22, 0x38	; 56
 74a:	71 e0       	ldi	r23, 0x01	; 1
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	7d dd       	rcall	.-1286   	; 0x24a <LCD_DisplayString>
				state = controllerBluetooth;
			}
			break;
		case controllerKeypad:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 750:	c9 e0       	ldi	r28, 0x09	; 9
 752:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 754:	ea c0       	rjmp	.+468    	; 0x92a <TickFct_Controller+0x2d4>
			}
			else if(pinInputComplete){
 756:	80 91 3f 02 	lds	r24, 0x023F
 75a:	88 23       	and	r24, r24
 75c:	09 f4       	brne	.+2      	; 0x760 <TickFct_Controller+0x10a>
 75e:	cb c0       	rjmp	.+406    	; 0x8f6 <TickFct_Controller+0x2a0>
				state = controllerCheck;
				checkPinFlag = 1;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	80 93 ff 01 	sts	0x01FF, r24
				keypadEnable = 0;
 766:	10 92 65 02 	sts	0x0265, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 76a:	6f ea       	ldi	r22, 0xAF	; 175
 76c:	71 e0       	ldi	r23, 0x01	; 1
 76e:	6d dd       	rcall	.-1318   	; 0x24a <LCD_DisplayString>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(pinInputComplete){
				state = controllerCheck;
 770:	c4 e0       	ldi	r28, 0x04	; 4
 772:	d0 e0       	ldi	r29, 0x00	; 0
 774:	da c0       	rjmp	.+436    	; 0x92a <TickFct_Controller+0x2d4>
			else{
				state = controllerKeypad;
			}
			break;
		case controllerCheck:
			if(!doorClosed && lockedFlag ){
 776:	21 11       	cpse	r18, r1
 778:	0d c0       	rjmp	.+26     	; 0x794 <TickFct_Controller+0x13e>
 77a:	90 91 fe 01 	lds	r25, 0x01FE
 77e:	99 23       	and	r25, r25
 780:	49 f0       	breq	.+18     	; 0x794 <TickFct_Controller+0x13e>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 786:	68 e3       	ldi	r22, 0x38	; 56
 788:	71 e0       	ldi	r23, 0x01	; 1
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	5e dd       	rcall	.-1348   	; 0x24a <LCD_DisplayString>
				state = controllerKeypad;
			}
			break;
		case controllerCheck:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 78e:	c9 e0       	ldi	r28, 0x09	; 9
 790:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 792:	cb c0       	rjmp	.+406    	; 0x92a <TickFct_Controller+0x2d4>
			}
			else if(key == 'C'){
 794:	83 34       	cpi	r24, 0x43	; 67
 796:	49 f4       	brne	.+18     	; 0x7aa <TickFct_Controller+0x154>
				state = controllerWait;
				clearInputPin();
 798:	29 de       	rcall	.-942    	; 0x3ec <clearInputPin>
				clearFlags();
 79a:	4b df       	rcall	.-362    	; 0x632 <clearFlags>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 79c:	6b e4       	ldi	r22, 0x4B	; 75
 79e:	71 e0       	ldi	r23, 0x01	; 1
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	53 dd       	rcall	.-1370   	; 0x24a <LCD_DisplayString>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(key == 'C'){
				state = controllerWait;
 7a4:	c1 e0       	ldi	r28, 0x01	; 1
 7a6:	d0 e0       	ldi	r29, 0x00	; 0
 7a8:	c0 c0       	rjmp	.+384    	; 0x92a <TickFct_Controller+0x2d4>
				clearInputPin();
				clearFlags();
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
			}
			else if(checkPinFlag){
 7aa:	80 91 ff 01 	lds	r24, 0x01FF
 7ae:	81 11       	cpse	r24, r1
 7b0:	bc c0       	rjmp	.+376    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerCheck;
			}
			else{
				if(lockedFlag){
 7b2:	80 91 fe 01 	lds	r24, 0x01FE
 7b6:	88 23       	and	r24, r24
 7b8:	49 f0       	breq	.+18     	; 0x7cc <TickFct_Controller+0x176>
					state = controllerLocked;
					controlCounter = 0;
 7ba:	10 92 63 02 	sts	0x0263, r1
 7be:	10 92 62 02 	sts	0x0262, r1
					LCD_DisplayString(1, "Incorrect Pin");
 7c2:	6b ec       	ldi	r22, 0xCB	; 203
 7c4:	71 e0       	ldi	r23, 0x01	; 1
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	40 dd       	rcall	.-1408   	; 0x24a <LCD_DisplayString>
 7ca:	a1 c0       	rjmp	.+322    	; 0x90e <TickFct_Controller+0x2b8>
				}
				else{
					state = controllerUnlocked;
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 7cc:	69 ed       	ldi	r22, 0xD9	; 217
 7ce:	71 e0       	ldi	r23, 0x01	; 1
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	3b dd       	rcall	.-1418   	; 0x24a <LCD_DisplayString>
					state = controllerLocked;
					controlCounter = 0;
					LCD_DisplayString(1, "Incorrect Pin");
				}
				else{
					state = controllerUnlocked;
 7d4:	c5 e0       	ldi	r28, 0x05	; 5
 7d6:	d0 e0       	ldi	r29, 0x00	; 0
 7d8:	a8 c0       	rjmp	.+336    	; 0x92a <TickFct_Controller+0x2d4>
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
				}
			}
			break;
		case controllerLocked:
			if(!doorClosed && lockedFlag ){
 7da:	21 11       	cpse	r18, r1
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <TickFct_Controller+0x1a2>
 7de:	80 91 fe 01 	lds	r24, 0x01FE
 7e2:	88 23       	and	r24, r24
 7e4:	49 f0       	breq	.+18     	; 0x7f8 <TickFct_Controller+0x1a2>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	82 b9       	out	0x02, r24	; 2
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 7ea:	68 e3       	ldi	r22, 0x38	; 56
 7ec:	71 e0       	ldi	r23, 0x01	; 1
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	2c dd       	rcall	.-1448   	; 0x24a <LCD_DisplayString>
				}
			}
			break;
		case controllerLocked:
			if(!doorClosed && lockedFlag ){
				state = controllerIntrusionDetected;
 7f2:	c9 e0       	ldi	r28, 0x09	; 9
 7f4:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 7f6:	99 c0       	rjmp	.+306    	; 0x92a <TickFct_Controller+0x2d4>
			}
			else if(controlCounter >= 750){
 7f8:	80 91 62 02 	lds	r24, 0x0262
 7fc:	90 91 63 02 	lds	r25, 0x0263
 800:	8e 3e       	cpi	r24, 0xEE	; 238
 802:	92 40       	sbci	r25, 0x02	; 2
 804:	08 f4       	brcc	.+2      	; 0x808 <TickFct_Controller+0x1b2>
 806:	83 c0       	rjmp	.+262    	; 0x90e <TickFct_Controller+0x2b8>
				state = controllerWait;
				clearInputPin();
 808:	f1 dd       	rcall	.-1054   	; 0x3ec <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 80a:	6b e4       	ldi	r22, 0x4B	; 75
 80c:	71 e0       	ldi	r23, 0x01	; 1
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	1c dd       	rcall	.-1480   	; 0x24a <LCD_DisplayString>
				clearFlags();
 812:	0f df       	rcall	.-482    	; 0x632 <clearFlags>
				state = controllerIntrusionDetected;
				PORTA = 0xFF;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
			}
			else if(controlCounter >= 750){
				state = controllerWait;
 814:	c1 e0       	ldi	r28, 0x01	; 1
 816:	d0 e0       	ldi	r29, 0x00	; 0
 818:	88 c0       	rjmp	.+272    	; 0x92a <TickFct_Controller+0x2d4>
			else{
				state = controllerLocked;
			}
			break;
		case controllerUnlocked:
			if(key == 'A'){
 81a:	81 34       	cpi	r24, 0x41	; 65
 81c:	09 f4       	brne	.+2      	; 0x820 <TickFct_Controller+0x1ca>
 81e:	83 c0       	rjmp	.+262    	; 0x926 <TickFct_Controller+0x2d0>
				state = controllerLockWaitRelease;
			}
			else if(key == 'C'){
 820:	83 34       	cpi	r24, 0x43	; 67
 822:	09 f0       	breq	.+2      	; 0x826 <TickFct_Controller+0x1d0>
 824:	82 c0       	rjmp	.+260    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerChangePin;
				showPin = 1;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	80 93 64 02 	sts	0x0264, r24
				keypadEnable = 1;
 82c:	80 93 65 02 	sts	0x0265, r24
				pinInputComplete = 0;
 830:	10 92 3f 02 	sts	0x023F, r1
				clearInputPin();
 834:	db dd       	rcall	.-1098   	; 0x3ec <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 836:	65 e4       	ldi	r22, 0x45	; 69
 838:	71 e0       	ldi	r23, 0x01	; 1
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	06 dd       	rcall	.-1524   	; 0x24a <LCD_DisplayString>
		case controllerUnlocked:
			if(key == 'A'){
				state = controllerLockWaitRelease;
			}
			else if(key == 'C'){
				state = controllerChangePin;
 83e:	c8 e0       	ldi	r28, 0x08	; 8
 840:	d0 e0       	ldi	r29, 0x00	; 0
 842:	73 c0       	rjmp	.+230    	; 0x92a <TickFct_Controller+0x2d4>
				clearInputPin();
				LCD_DisplayString(1, "Pin: ");
			}
			break;
		case controllerLockWaitRelease:
			if(key != '\0'){
 844:	81 11       	cpse	r24, r1
 846:	71 c0       	rjmp	.+226    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerLockWaitRelease;
			}
			else{
				state = controllerWait;
				clearInputPin();
 848:	d1 dd       	rcall	.-1118   	; 0x3ec <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 84a:	6b e4       	ldi	r22, 0x4B	; 75
 84c:	71 e0       	ldi	r23, 0x01	; 1
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	fc dc       	rcall	.-1544   	; 0x24a <LCD_DisplayString>
				clearFlags();
 852:	ef de       	rcall	.-546    	; 0x632 <clearFlags>
		case controllerLockWaitRelease:
			if(key != '\0'){
				state = controllerLockWaitRelease;
			}
			else{
				state = controllerWait;
 854:	c1 e0       	ldi	r28, 0x01	; 1
 856:	d0 e0       	ldi	r29, 0x00	; 0
 858:	68 c0       	rjmp	.+208    	; 0x92a <TickFct_Controller+0x2d4>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
				clearFlags();
			}
			break;
		case controllerChangePin:
			if(!newPinInputComplete){
 85a:	80 91 68 02 	lds	r24, 0x0268
 85e:	88 23       	and	r24, r24
 860:	09 f4       	brne	.+2      	; 0x864 <TickFct_Controller+0x20e>
 862:	63 c0       	rjmp	.+198    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerChangePin;
			}
			else{
				state = controllerUnlocked;
				keypadEnable = 0;
 864:	10 92 65 02 	sts	0x0265, r1
				showPin = 0;
 868:	10 92 64 02 	sts	0x0264, r1
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
 86c:	69 ed       	ldi	r22, 0xD9	; 217
 86e:	71 e0       	ldi	r23, 0x01	; 1
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	eb dc       	rcall	.-1578   	; 0x24a <LCD_DisplayString>
		case controllerChangePin:
			if(!newPinInputComplete){
				state = controllerChangePin;
			}
			else{
				state = controllerUnlocked;
 874:	c5 e0       	ldi	r28, 0x05	; 5
 876:	d0 e0       	ldi	r29, 0x00	; 0
 878:	58 c0       	rjmp	.+176    	; 0x92a <TickFct_Controller+0x2d4>
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
			}
			break;
		case controllerIntrusionDetected:
			state = controllerIntrusionPin;
			keypadEnable = 1;
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	80 93 65 02 	sts	0x0265, r24
			pinInputComplete = 0;
 880:	10 92 3f 02 	sts	0x023F, r1
			clearInputPin();
 884:	b3 dd       	rcall	.-1178   	; 0x3ec <clearInputPin>
				showPin = 0;
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
			}
			break;
		case controllerIntrusionDetected:
			state = controllerIntrusionPin;
 886:	ca e0       	ldi	r28, 0x0A	; 10
 888:	d0 e0       	ldi	r29, 0x00	; 0
			keypadEnable = 1;
			pinInputComplete = 0;
			clearInputPin();
			break;
 88a:	4f c0       	rjmp	.+158    	; 0x92a <TickFct_Controller+0x2d4>
		case controllerIntrusionPin:
			if(pinInputComplete){
 88c:	80 91 3f 02 	lds	r24, 0x023F
 890:	88 23       	and	r24, r24
 892:	09 f4       	brne	.+2      	; 0x896 <TickFct_Controller+0x240>
 894:	4a c0       	rjmp	.+148    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerIntrusionCheck;
				checkPinFlag = 1;
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	80 93 ff 01 	sts	0x01FF, r24
				keypadEnable = 0;
 89c:	10 92 65 02 	sts	0x0265, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 8a0:	6f ea       	ldi	r22, 0xAF	; 175
 8a2:	71 e0       	ldi	r23, 0x01	; 1
 8a4:	d2 dc       	rcall	.-1628   	; 0x24a <LCD_DisplayString>
			pinInputComplete = 0;
			clearInputPin();
			break;
		case controllerIntrusionPin:
			if(pinInputComplete){
				state = controllerIntrusionCheck;
 8a6:	cb e0       	ldi	r28, 0x0B	; 11
 8a8:	d0 e0       	ldi	r29, 0x00	; 0
 8aa:	3f c0       	rjmp	.+126    	; 0x92a <TickFct_Controller+0x2d4>
			else{
				state = controllerIntrusionPin;
			}
			break;
		case controllerIntrusionCheck:
			if(checkPinFlag){
 8ac:	80 91 ff 01 	lds	r24, 0x01FF
 8b0:	81 11       	cpse	r24, r1
 8b2:	3b c0       	rjmp	.+118    	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerIntrusionCheck;
			}
			else{
				if(lockedFlag){
 8b4:	80 91 fe 01 	lds	r24, 0x01FE
 8b8:	88 23       	and	r24, r24
 8ba:	91 f0       	breq	.+36     	; 0x8e0 <TickFct_Controller+0x28a>
					state = controllerIntrusionDetected;
					controlCounter = 0;
 8bc:	10 92 63 02 	sts	0x0263, r1
 8c0:	10 92 62 02 	sts	0x0262, r1
					LCD_DisplayString(1, "Incorrect Pin");
 8c4:	6b ec       	ldi	r22, 0xCB	; 203
 8c6:	71 e0       	ldi	r23, 0x01	; 1
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	bf dc       	rcall	.-1666   	; 0x24a <LCD_DisplayString>
					delay_ms(500);
 8cc:	84 ef       	ldi	r24, 0xF4	; 244
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	79 dc       	rcall	.-1806   	; 0x1c4 <delay_ms>
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
 8d2:	68 e3       	ldi	r22, 0x38	; 56
 8d4:	71 e0       	ldi	r23, 0x01	; 1
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	b8 dc       	rcall	.-1680   	; 0x24a <LCD_DisplayString>
			if(checkPinFlag){
				state = controllerIntrusionCheck;
			}
			else{
				if(lockedFlag){
					state = controllerIntrusionDetected;
 8da:	c9 e0       	ldi	r28, 0x09	; 9
 8dc:	d0 e0       	ldi	r29, 0x00	; 0
 8de:	25 c0       	rjmp	.+74     	; 0x92a <TickFct_Controller+0x2d4>
					delay_ms(500);
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
				}
				else{
					state = controllerUnlocked;
					PORTA = 0x00;
 8e0:	12 b8       	out	0x02, r1	; 2
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 8e2:	69 ed       	ldi	r22, 0xD9	; 217
 8e4:	71 e0       	ldi	r23, 0x01	; 1
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	b0 dc       	rcall	.-1696   	; 0x24a <LCD_DisplayString>
					LCD_DisplayString(1, "Incorrect Pin");
					delay_ms(500);
					LCD_DisplayString(1, "ALARM! Enter Pin: ");
				}
				else{
					state = controllerUnlocked;
 8ea:	c5 e0       	ldi	r28, 0x05	; 5
 8ec:	d0 e0       	ldi	r29, 0x00	; 0
 8ee:	1d c0       	rjmp	.+58     	; 0x92a <TickFct_Controller+0x2d4>
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
				}
			}
			break;
		default:
			state = controllerinit;
 8f0:	c0 e0       	ldi	r28, 0x00	; 0
 8f2:	d0 e0       	ldi	r29, 0x00	; 0
 8f4:	1a c0       	rjmp	.+52     	; 0x92a <TickFct_Controller+0x2d4>
		case controllerinit:
			break;
		case controllerWait:
			break;
		case controllerKeypad:
			keypadEnable = 1;
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	80 93 65 02 	sts	0x0265, r24
			break;
 8fc:	c2 e0       	ldi	r28, 0x02	; 2
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	14 c0       	rjmp	.+40     	; 0x92a <TickFct_Controller+0x2d4>
		case controllerBluetooth:
			bluetoothEnable = 1;
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	80 93 40 02 	sts	0x0240, r24
			break;
 908:	c3 e0       	ldi	r28, 0x03	; 3
 90a:	d0 e0       	ldi	r29, 0x00	; 0
 90c:	0e c0       	rjmp	.+28     	; 0x92a <TickFct_Controller+0x2d4>
		case controllerCheck:
			break;
		case controllerLocked:
			++controlCounter;
 90e:	80 91 62 02 	lds	r24, 0x0262
 912:	90 91 63 02 	lds	r25, 0x0263
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	90 93 63 02 	sts	0x0263, r25
 91c:	80 93 62 02 	sts	0x0262, r24
			break;
 920:	c6 e0       	ldi	r28, 0x06	; 6
 922:	d0 e0       	ldi	r29, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <TickFct_Controller+0x2d4>
				state = controllerLocked;
			}
			break;
		case controllerUnlocked:
			if(key == 'A'){
				state = controllerLockWaitRelease;
 926:	c7 e0       	ldi	r28, 0x07	; 7
 928:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		case controllerIntrusionCheck:
			break;	
	}
	return state;
}
 92a:	ce 01       	movw	r24, r28
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	08 95       	ret

00000932 <getInputPinLength>:
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 932:	80 91 51 02 	lds	r24, 0x0251
 936:	88 23       	and	r24, r24
 938:	51 f0       	breq	.+20     	; 0x94e <getInputPinLength+0x1c>
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 93a:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
 93c:	8f 5f       	subi	r24, 0xFF	; 255
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 93e:	e8 2f       	mov	r30, r24
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	ef 5a       	subi	r30, 0xAF	; 175
 944:	fd 4f       	sbci	r31, 0xFD	; 253
 946:	90 81       	ld	r25, Z
 948:	91 11       	cpse	r25, r1
 94a:	f8 cf       	rjmp	.-16     	; 0x93c <getInputPinLength+0xa>
 94c:	08 95       	ret
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 94e:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
	}
	return i;
}
 950:	08 95       	ret

00000952 <getCorrectPinLength>:

unsigned char getCorrectPinLength(){
 952:	cf 93       	push	r28
	unsigned char i = CORRECTPINSTARTADDR;
 954:	c0 e0       	ldi	r28, 0x00	; 0
	while(eeprom_read_byte(i) != '\0'){
 956:	01 c0       	rjmp	.+2      	; 0x95a <getCorrectPinLength+0x8>
		++i;
 958:	cf 5f       	subi	r28, 0xFF	; 255
	return i;
}

unsigned char getCorrectPinLength(){
	unsigned char i = CORRECTPINSTARTADDR;
	while(eeprom_read_byte(i) != '\0'){
 95a:	8c 2f       	mov	r24, r28
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	6c d1       	rcall	.+728    	; 0xc38 <__eerd_byte_m1284>
 960:	81 11       	cpse	r24, r1
 962:	fa cf       	rjmp	.-12     	; 0x958 <getCorrectPinLength+0x6>
		++i;
	}
	return i;
}
 964:	8c 2f       	mov	r24, r28
 966:	cf 91       	pop	r28
 968:	08 95       	ret

0000096a <TickFct_CheckPin>:
	}
	return state;
}

enum SM_CheckPin {checkInit, checkWait, checkCheck};
int TickFct_CheckPin(int state){
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
	switch(state){
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	91 05       	cpc	r25, r1
 976:	49 f0       	breq	.+18     	; 0x98a <TickFct_CheckPin+0x20>
 978:	82 30       	cpi	r24, 0x02	; 2
 97a:	91 05       	cpc	r25, r1
 97c:	19 f0       	breq	.+6      	; 0x984 <TickFct_CheckPin+0x1a>
 97e:	89 2b       	or	r24, r25
 980:	09 f0       	breq	.+2      	; 0x984 <TickFct_CheckPin+0x1a>
 982:	3c c0       	rjmp	.+120    	; 0x9fc <TickFct_CheckPin+0x92>
		case checkInit:
			state = checkWait;
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	3b c0       	rjmp	.+118    	; 0xa00 <TickFct_CheckPin+0x96>
			break;
		case checkWait:
			if(checkPinFlag){
 98a:	20 91 ff 01 	lds	r18, 0x01FF
 98e:	22 23       	and	r18, r18
 990:	b9 f1       	breq	.+110    	; 0xa00 <TickFct_CheckPin+0x96>
				state = checkCheck;
				isCorrect = 1;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	80 93 61 02 	sts	0x0261, r24
				checkCounter = 0;
 998:	10 92 67 02 	sts	0x0267, r1
				correctPinAddr = CORRECTPINSTARTADDR;
 99c:	10 92 fb 01 	sts	0x01FB, r1
				if(getCorrectPinLength() != getInputPinLength()){
 9a0:	d8 df       	rcall	.-80     	; 0x952 <getCorrectPinLength>
 9a2:	c8 2f       	mov	r28, r24
 9a4:	c6 df       	rcall	.-116    	; 0x932 <getInputPinLength>
 9a6:	c8 13       	cpse	r28, r24
					isCorrect = 0;
 9a8:	10 92 61 02 	sts	0x0261, r1
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 9ac:	00 91 61 02 	lds	r16, 0x0261
 9b0:	0b c0       	rjmp	.+22     	; 0x9c8 <TickFct_CheckPin+0x5e>
					if(eeprom_read_byte(correctPinAddr + checkCounter) != inputPin[checkCounter]){
 9b2:	cf 5a       	subi	r28, 0xAF	; 175
 9b4:	dd 4f       	sbci	r29, 0xFD	; 253
 9b6:	98 81       	ld	r25, Y
 9b8:	89 17       	cp	r24, r25
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <TickFct_CheckPin+0x58>
						isCorrect = 0;
 9bc:	10 92 61 02 	sts	0x0261, r1
						break;
 9c0:	15 c0       	rjmp	.+42     	; 0x9ec <TickFct_CheckPin+0x82>
					}
					++checkCounter;
 9c2:	1f 5f       	subi	r17, 0xFF	; 255
 9c4:	10 93 67 02 	sts	0x0267, r17
				checkCounter = 0;
				correctPinAddr = CORRECTPINSTARTADDR;
				if(getCorrectPinLength() != getInputPinLength()){
					isCorrect = 0;
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 9c8:	10 91 67 02 	lds	r17, 0x0267
 9cc:	c1 2f       	mov	r28, r17
 9ce:	d0 e0       	ldi	r29, 0x00	; 0
 9d0:	ce 01       	movw	r24, r28
 9d2:	32 d1       	rcall	.+612    	; 0xc38 <__eerd_byte_m1284>
 9d4:	88 23       	and	r24, r24
 9d6:	19 f0       	breq	.+6      	; 0x9de <TickFct_CheckPin+0x74>
 9d8:	01 11       	cpse	r16, r1
 9da:	eb cf       	rjmp	.-42     	; 0x9b2 <TickFct_CheckPin+0x48>
 9dc:	07 c0       	rjmp	.+14     	; 0x9ec <TickFct_CheckPin+0x82>
						isCorrect = 0;
						break;
					}
					++checkCounter;
				}
				if(isCorrect){
 9de:	80 91 61 02 	lds	r24, 0x0261
 9e2:	88 23       	and	r24, r24
 9e4:	19 f0       	breq	.+6      	; 0x9ec <TickFct_CheckPin+0x82>
					lockedFlag = 0;
 9e6:	10 92 fe 01 	sts	0x01FE, r1
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <TickFct_CheckPin+0x88>
				}
				else{
					lockedFlag = 1;
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	80 93 fe 01 	sts	0x01FE, r24
				}
				checkPinFlag = 0;
 9f2:	10 92 ff 01 	sts	0x01FF, r1
		case checkInit:
			state = checkWait;
			break;
		case checkWait:
			if(checkPinFlag){
				state = checkCheck;
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <TickFct_CheckPin+0x96>
			break;
		case checkCheck:
			state = checkWait;
			break;
		default:
			state = checkInit;
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case checkCheck:
			break;
	}
	return state;
}
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	08 95       	ret

00000a0a <__vector_13>:
	}
	return state;
}

ISR(TIMER1_COMPA_vect)
{
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	0b b6       	in	r0, 0x3b	; 59
 a16:	0f 92       	push	r0
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	2f 93       	push	r18
 a22:	3f 93       	push	r19
 a24:	4f 93       	push	r20
 a26:	5f 93       	push	r21
 a28:	6f 93       	push	r22
 a2a:	7f 93       	push	r23
 a2c:	8f 93       	push	r24
 a2e:	9f 93       	push	r25
 a30:	af 93       	push	r26
 a32:	bf 93       	push	r27
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	ef 93       	push	r30
 a3a:	ff 93       	push	r31
 a3c:	c0 e0       	ldi	r28, 0x00	; 0
 a3e:	d2 e0       	ldi	r29, 0x02	; 2
 a40:	0f 2e       	mov	r0, r31
 a42:	fc e3       	ldi	r31, 0x3C	; 60
 a44:	ef 2e       	mov	r14, r31
 a46:	f2 e0       	ldi	r31, 0x02	; 2
 a48:	ff 2e       	mov	r15, r31
 a4a:	f0 2d       	mov	r31, r0
 a4c:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < 5; ++i){
		if( tasks[i].elapsedTime >= tasks[i].period){
 a4e:	4e 81       	ldd	r20, Y+6	; 0x06
 a50:	5f 81       	ldd	r21, Y+7	; 0x07
 a52:	68 85       	ldd	r22, Y+8	; 0x08
 a54:	79 85       	ldd	r23, Y+9	; 0x09
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	9b 81       	ldd	r25, Y+3	; 0x03
 a5a:	ac 81       	ldd	r26, Y+4	; 0x04
 a5c:	bd 81       	ldd	r27, Y+5	; 0x05
 a5e:	48 17       	cp	r20, r24
 a60:	59 07       	cpc	r21, r25
 a62:	6a 07       	cpc	r22, r26
 a64:	7b 07       	cpc	r23, r27
 a66:	58 f0       	brcs	.+22     	; 0xa7e <__vector_13+0x74>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 a68:	ea 85       	ldd	r30, Y+10	; 0x0a
 a6a:	fb 85       	ldd	r31, Y+11	; 0x0b
 a6c:	88 81       	ld	r24, Y
 a6e:	99 81       	ldd	r25, Y+1	; 0x01
 a70:	09 95       	icall
 a72:	99 83       	std	Y+1, r25	; 0x01
 a74:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 a76:	1e 82       	std	Y+6, r1	; 0x06
 a78:	1f 82       	std	Y+7, r1	; 0x07
 a7a:	18 86       	std	Y+8, r1	; 0x08
 a7c:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += 1;
 a7e:	f8 01       	movw	r30, r16
 a80:	86 81       	ldd	r24, Z+6	; 0x06
 a82:	97 81       	ldd	r25, Z+7	; 0x07
 a84:	a0 85       	ldd	r26, Z+8	; 0x08
 a86:	b1 85       	ldd	r27, Z+9	; 0x09
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	a1 1d       	adc	r26, r1
 a8c:	b1 1d       	adc	r27, r1
 a8e:	86 83       	std	Z+6, r24	; 0x06
 a90:	97 83       	std	Z+7, r25	; 0x07
 a92:	a0 87       	std	Z+8, r26	; 0x08
 a94:	b1 87       	std	Z+9, r27	; 0x09
 a96:	2c 96       	adiw	r28, 0x0c	; 12
}

ISR(TIMER1_COMPA_vect)
{
	unsigned char i;
	for(i = 0; i < 5; ++i){
 a98:	ce 15       	cp	r28, r14
 a9a:	df 05       	cpc	r29, r15
 a9c:	b9 f6       	brne	.-82     	; 0xa4c <__vector_13+0x42>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 a9e:	ff 91       	pop	r31
 aa0:	ef 91       	pop	r30
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	bf 91       	pop	r27
 aa8:	af 91       	pop	r26
 aaa:	9f 91       	pop	r25
 aac:	8f 91       	pop	r24
 aae:	7f 91       	pop	r23
 ab0:	6f 91       	pop	r22
 ab2:	5f 91       	pop	r21
 ab4:	4f 91       	pop	r20
 ab6:	3f 91       	pop	r19
 ab8:	2f 91       	pop	r18
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	ff 90       	pop	r15
 ac0:	ef 90       	pop	r14
 ac2:	0f 90       	pop	r0
 ac4:	0b be       	out	0x3b, r0	; 59
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

00000ad0 <main>:

int main(void)
{
	DDRA = 0xFF;	PORTA = 0x00;
 ad0:	8f ef       	ldi	r24, 0xFF	; 255
 ad2:	81 b9       	out	0x01, r24	; 1
 ad4:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xF0;	PORTB = 0x0F;
 ad6:	90 ef       	ldi	r25, 0xF0	; 240
 ad8:	94 b9       	out	0x04, r25	; 4
 ada:	9f e0       	ldi	r25, 0x0F	; 15
 adc:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 ade:	87 b9       	out	0x07, r24	; 7
 ae0:	18 b8       	out	0x08, r1	; 8
	DDRD = 0x00;	PORTD = 0xFF;
 ae2:	1a b8       	out	0x0a, r1	; 10
 ae4:	8b b9       	out	0x0b, r24	; 11
	initUSART(0);
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	ca db       	rcall	.-2156   	; 0x27e <initUSART>
	initUSART(1);
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	c8 db       	rcall	.-2160   	; 0x27e <initUSART>
	LCD_init();
 aee:	95 db       	rcall	.-2262   	; 0x21a <LCD_init>
	tasks[0].state = controllerinit;
 af0:	10 92 01 02 	sts	0x0201, r1
 af4:	10 92 00 02 	sts	0x0200, r1
	tasks[0].period = 1;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	a0 e0       	ldi	r26, 0x00	; 0
 afe:	b0 e0       	ldi	r27, 0x00	; 0
 b00:	80 93 02 02 	sts	0x0202, r24
 b04:	90 93 03 02 	sts	0x0203, r25
 b08:	a0 93 04 02 	sts	0x0204, r26
 b0c:	b0 93 05 02 	sts	0x0205, r27
	tasks[0].elapsedTime = 1;
 b10:	80 93 06 02 	sts	0x0206, r24
 b14:	90 93 07 02 	sts	0x0207, r25
 b18:	a0 93 08 02 	sts	0x0208, r26
 b1c:	b0 93 09 02 	sts	0x0209, r27
	tasks[0].TickFct = &TickFct_Controller;
 b20:	8b e2       	ldi	r24, 0x2B	; 43
 b22:	93 e0       	ldi	r25, 0x03	; 3
 b24:	90 93 0b 02 	sts	0x020B, r25
 b28:	80 93 0a 02 	sts	0x020A, r24
	
	tasks[1].state = bluetoothWait;
 b2c:	10 92 0d 02 	sts	0x020D, r1
 b30:	10 92 0c 02 	sts	0x020C, r1
	tasks[1].period = 5;
 b34:	85 e0       	ldi	r24, 0x05	; 5
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	a0 e0       	ldi	r26, 0x00	; 0
 b3a:	b0 e0       	ldi	r27, 0x00	; 0
 b3c:	80 93 0e 02 	sts	0x020E, r24
 b40:	90 93 0f 02 	sts	0x020F, r25
 b44:	a0 93 10 02 	sts	0x0210, r26
 b48:	b0 93 11 02 	sts	0x0211, r27
	tasks[1].elapsedTime = 5;
 b4c:	80 93 12 02 	sts	0x0212, r24
 b50:	90 93 13 02 	sts	0x0213, r25
 b54:	a0 93 14 02 	sts	0x0214, r26
 b58:	b0 93 15 02 	sts	0x0215, r27
	tasks[1].TickFct = &TickFct_BluetoothReceiver;
 b5c:	2f ef       	ldi	r18, 0xFF	; 255
 b5e:	31 e0       	ldi	r19, 0x01	; 1
 b60:	30 93 17 02 	sts	0x0217, r19
 b64:	20 93 16 02 	sts	0x0216, r18
	
	tasks[2].state = keypadWait1;
 b68:	10 92 19 02 	sts	0x0219, r1
 b6c:	10 92 18 02 	sts	0x0218, r1
	tasks[2].period = 10;
 b70:	4a e0       	ldi	r20, 0x0A	; 10
 b72:	50 e0       	ldi	r21, 0x00	; 0
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	40 93 1a 02 	sts	0x021A, r20
 b7c:	50 93 1b 02 	sts	0x021B, r21
 b80:	60 93 1c 02 	sts	0x021C, r22
 b84:	70 93 1d 02 	sts	0x021D, r23
	tasks[2].elapsedTime = 10;
 b88:	40 93 1e 02 	sts	0x021E, r20
 b8c:	50 93 1f 02 	sts	0x021F, r21
 b90:	60 93 20 02 	sts	0x0220, r22
 b94:	70 93 21 02 	sts	0x0221, r23
	tasks[2].TickFct = &TickFct_KeypadReceiver;
 b98:	2b e6       	ldi	r18, 0x6B	; 107
 b9a:	32 e0       	ldi	r19, 0x02	; 2
 b9c:	30 93 23 02 	sts	0x0223, r19
 ba0:	20 93 22 02 	sts	0x0222, r18
	
	tasks[3].state = checkInit;
 ba4:	10 92 25 02 	sts	0x0225, r1
 ba8:	10 92 24 02 	sts	0x0224, r1
	tasks[3].period = 15;
 bac:	4f e0       	ldi	r20, 0x0F	; 15
 bae:	50 e0       	ldi	r21, 0x00	; 0
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	40 93 26 02 	sts	0x0226, r20
 bb8:	50 93 27 02 	sts	0x0227, r21
 bbc:	60 93 28 02 	sts	0x0228, r22
 bc0:	70 93 29 02 	sts	0x0229, r23
	tasks[3].elapsedTime = 15;
 bc4:	40 93 2a 02 	sts	0x022A, r20
 bc8:	50 93 2b 02 	sts	0x022B, r21
 bcc:	60 93 2c 02 	sts	0x022C, r22
 bd0:	70 93 2d 02 	sts	0x022D, r23
	tasks[3].TickFct = &TickFct_CheckPin;
 bd4:	25 eb       	ldi	r18, 0xB5	; 181
 bd6:	34 e0       	ldi	r19, 0x04	; 4
 bd8:	30 93 2f 02 	sts	0x022F, r19
 bdc:	20 93 2e 02 	sts	0x022E, r18
	
	tasks[4].state = usartInit;
 be0:	10 92 31 02 	sts	0x0231, r1
 be4:	10 92 30 02 	sts	0x0230, r1
	tasks[4].period = 5;
 be8:	80 93 32 02 	sts	0x0232, r24
 bec:	90 93 33 02 	sts	0x0233, r25
 bf0:	a0 93 34 02 	sts	0x0234, r26
 bf4:	b0 93 35 02 	sts	0x0235, r27
	tasks[4].elapsedTime = 5;
 bf8:	80 93 36 02 	sts	0x0236, r24
 bfc:	90 93 37 02 	sts	0x0237, r25
 c00:	a0 93 38 02 	sts	0x0238, r26
 c04:	b0 93 39 02 	sts	0x0239, r27
	tasks[4].TickFct = &TickFct_USART;
 c08:	84 e9       	ldi	r24, 0x94	; 148
 c0a:	91 e0       	ldi	r25, 0x01	; 1
 c0c:	90 93 3b 02 	sts	0x023B, r25
 c10:	80 93 3a 02 	sts	0x023A, r24

unsigned short tasksNum;
unsigned short tasksPeriodGCD;

void TimerSet(unsigned long ms){
	TCNT1 = 0;		//Initialize avr counter
 c14:	10 92 85 00 	sts	0x0085, r1
 c18:	10 92 84 00 	sts	0x0084, r1
					
	OCR1A = 125 * ms;	// AVR output compare register OCR1A.
 c1c:	8d e7       	ldi	r24, 0x7D	; 125
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	90 93 89 00 	sts	0x0089, r25
 c24:	80 93 88 00 	sts	0x0088, r24
	
	TimerSet(1);
	TimerOn();
 c28:	c3 da       	rcall	.-2682   	; 0x1b0 <TimerOn>
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <main+0x15a>

00000c2c <__tablejump2__>:
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31

00000c30 <__tablejump__>:
 c30:	05 90       	lpm	r0, Z+
 c32:	f4 91       	lpm	r31, Z
 c34:	e0 2d       	mov	r30, r0
 c36:	09 94       	ijmp

00000c38 <__eerd_byte_m1284>:
 c38:	f9 99       	sbic	0x1f, 1	; 31
 c3a:	fe cf       	rjmp	.-4      	; 0xc38 <__eerd_byte_m1284>
 c3c:	92 bd       	out	0x22, r25	; 34
 c3e:	81 bd       	out	0x21, r24	; 33
 c40:	f8 9a       	sbi	0x1f, 0	; 31
 c42:	99 27       	eor	r25, r25
 c44:	80 b5       	in	r24, 0x20	; 32
 c46:	08 95       	ret

00000c48 <__eewr_byte_m1284>:
 c48:	26 2f       	mov	r18, r22

00000c4a <__eewr_r18_m1284>:
 c4a:	f9 99       	sbic	0x1f, 1	; 31
 c4c:	fe cf       	rjmp	.-4      	; 0xc4a <__eewr_r18_m1284>
 c4e:	1f ba       	out	0x1f, r1	; 31
 c50:	92 bd       	out	0x22, r25	; 34
 c52:	81 bd       	out	0x21, r24	; 33
 c54:	20 bd       	out	0x20, r18	; 32
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	f8 94       	cli
 c5a:	fa 9a       	sbi	0x1f, 2	; 31
 c5c:	f9 9a       	sbi	0x1f, 1	; 31
 c5e:	0f be       	out	0x3f, r0	; 63
 c60:	01 96       	adiw	r24, 0x01	; 1
 c62:	08 95       	ret

00000c64 <_exit>:
 c64:	f8 94       	cli

00000c66 <__stop_program>:
 c66:	ff cf       	rjmp	.-2      	; 0xc66 <__stop_program>
