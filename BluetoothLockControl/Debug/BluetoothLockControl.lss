
BluetoothLockControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00000cae  00000d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  008001fa  008001fa  00000e3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e0  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036b  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ea6  00000000  00000000  000023cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00003278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000677  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fdd  00000000  00000000  00003bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
   a:	00 00       	nop
   c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
  12:	00 00       	nop
  14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
  1a:	00 00       	nop
  1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
  1e:	00 00       	nop
  20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
  2a:	00 00       	nop
  2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c4       	rjmp	.+2496   	; 0x9f6 <__vector_13>
  36:	00 00       	nop
  38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
  3a:	00 00       	nop
  3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
  3e:	00 00       	nop
  40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
  42:	00 00       	nop
  44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
  46:	00 00       	nop
  48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
  4a:	00 00       	nop
  4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
  4e:	00 00       	nop
  50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
  52:	00 00       	nop
  54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
  56:	00 00       	nop
  58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
  5e:	00 00       	nop
  60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
  66:	00 00       	nop
  68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
  6a:	00 00       	nop
  6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
  6e:	00 00       	nop
  70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
  72:	00 00       	nop
  74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
  76:	00 00       	nop
  78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
  7e:	00 00       	nop
  80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
  82:	00 00       	nop
  84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
  86:	00 00       	nop
  88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2c 03       	fmul	r18, r20
  8e:	38 03       	fmul	r19, r16
  90:	7d 03       	fmul	r23, r21
  92:	5a 03       	fmul	r21, r18
  94:	96 03       	fmuls	r17, r22
  96:	da 03       	fmulsu	r21, r18
  98:	c0 03       	fmuls	r20, r16
  9a:	ed 03       	fmulsu	r22, r21
  9c:	01 04       	cpc	r0, r1
  9e:	0f 04       	cpc	r0, r15
  a0:	1b 04       	cpc	r1, r11
  a2:	29 04       	cpc	r2, r9

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d0 e4       	ldi	r29, 0x40	; 64
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ee ea       	ldi	r30, 0xAE	; 174
  b8:	fc e0       	ldi	r31, 0x0C	; 12
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	aa 3f       	cpi	r26, 0xFA	; 250
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	aa ef       	ldi	r26, 0xFA	; 250
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a9 36       	cpi	r26, 0x69	; 105
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	f0 d4       	rcall	.+2528   	; 0xabc <main>
  dc:	e6 c5       	rjmp	.+3020   	; 0xcaa <_exit>

000000de <__bad_interrupt>:
  de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <GetKeypadKey>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  e0:	8f ee       	ldi	r24, 0xEF	; 239
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	00 00       	nop
  e6:	18 9b       	sbis	0x03, 0	; 3
  e8:	45 c0       	rjmp	.+138    	; 0x174 <GetKeypadKey+0x94>
  ea:	83 b1       	in	r24, 0x03	; 3
  ec:	80 95       	com	r24
  ee:	81 fd       	sbrc	r24, 1
  f0:	43 c0       	rjmp	.+134    	; 0x178 <GetKeypadKey+0x98>
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	80 95       	com	r24
  f6:	82 fd       	sbrc	r24, 2
  f8:	41 c0       	rjmp	.+130    	; 0x17c <GetKeypadKey+0x9c>
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	80 95       	com	r24
  fe:	83 fd       	sbrc	r24, 3
 100:	3f c0       	rjmp	.+126    	; 0x180 <GetKeypadKey+0xa0>
 102:	8f ed       	ldi	r24, 0xDF	; 223
 104:	85 b9       	out	0x05, r24	; 5
 106:	00 00       	nop
 108:	18 9b       	sbis	0x03, 0	; 3
 10a:	3c c0       	rjmp	.+120    	; 0x184 <GetKeypadKey+0xa4>
 10c:	83 b1       	in	r24, 0x03	; 3
 10e:	80 95       	com	r24
 110:	81 fd       	sbrc	r24, 1
 112:	3a c0       	rjmp	.+116    	; 0x188 <GetKeypadKey+0xa8>
 114:	83 b1       	in	r24, 0x03	; 3
 116:	80 95       	com	r24
 118:	82 fd       	sbrc	r24, 2
 11a:	38 c0       	rjmp	.+112    	; 0x18c <GetKeypadKey+0xac>
 11c:	83 b1       	in	r24, 0x03	; 3
 11e:	80 95       	com	r24
 120:	83 fd       	sbrc	r24, 3
 122:	36 c0       	rjmp	.+108    	; 0x190 <GetKeypadKey+0xb0>
 124:	8f eb       	ldi	r24, 0xBF	; 191
 126:	85 b9       	out	0x05, r24	; 5
 128:	00 00       	nop
 12a:	18 9b       	sbis	0x03, 0	; 3
 12c:	33 c0       	rjmp	.+102    	; 0x194 <GetKeypadKey+0xb4>
 12e:	83 b1       	in	r24, 0x03	; 3
 130:	80 95       	com	r24
 132:	81 fd       	sbrc	r24, 1
 134:	31 c0       	rjmp	.+98     	; 0x198 <GetKeypadKey+0xb8>
 136:	83 b1       	in	r24, 0x03	; 3
 138:	80 95       	com	r24
 13a:	82 fd       	sbrc	r24, 2
 13c:	2f c0       	rjmp	.+94     	; 0x19c <GetKeypadKey+0xbc>
 13e:	83 b1       	in	r24, 0x03	; 3
 140:	80 95       	com	r24
 142:	83 fd       	sbrc	r24, 3
 144:	2d c0       	rjmp	.+90     	; 0x1a0 <GetKeypadKey+0xc0>
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	85 b9       	out	0x05, r24	; 5
 14a:	00 00       	nop
 14c:	93 b1       	in	r25, 0x03	; 3
 14e:	90 95       	com	r25
 150:	89 2f       	mov	r24, r25
 152:	81 70       	andi	r24, 0x01	; 1
 154:	90 fd       	sbrc	r25, 0
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <GetKeypadKey+0xc4>
 158:	93 b1       	in	r25, 0x03	; 3
 15a:	90 95       	com	r25
 15c:	91 fd       	sbrc	r25, 1
 15e:	24 c0       	rjmp	.+72     	; 0x1a8 <GetKeypadKey+0xc8>
 160:	93 b1       	in	r25, 0x03	; 3
 162:	90 95       	com	r25
 164:	92 fd       	sbrc	r25, 2
 166:	22 c0       	rjmp	.+68     	; 0x1ac <GetKeypadKey+0xcc>
 168:	93 b1       	in	r25, 0x03	; 3
 16a:	90 95       	com	r25
 16c:	93 ff       	sbrs	r25, 3
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <GetKeypadKey+0xce>
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	08 95       	ret
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	08 95       	ret
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	08 95       	ret
 17c:	87 e3       	ldi	r24, 0x37	; 55
 17e:	08 95       	ret
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	08 95       	ret
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	08 95       	ret
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	08 95       	ret
 18c:	88 e3       	ldi	r24, 0x38	; 56
 18e:	08 95       	ret
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	08 95       	ret
 198:	86 e3       	ldi	r24, 0x36	; 54
 19a:	08 95       	ret
 19c:	89 e3       	ldi	r24, 0x39	; 57
 19e:	08 95       	ret
 1a0:	83 e2       	ldi	r24, 0x23	; 35
 1a2:	08 95       	ret
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	08 95       	ret
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	08 95       	ret
 1ac:	83 e4       	ldi	r24, 0x43	; 67
 1ae:	08 95       	ret

000001b0 <TimerOn>:
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	80 93 81 00 	sts	0x0081, r24
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 6f 00 	sts	0x006F, r24
 1bc:	8f b7       	in	r24, 0x3f	; 63
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8f bf       	out	0x3f, r24	; 63
 1c2:	08 95       	ret

000001c4 <delay_ms>:
 1c4:	18 16       	cp	r1, r24
 1c6:	19 06       	cpc	r1, r25
 1c8:	9c f4       	brge	.+38     	; 0x1f0 <delay_ms+0x2c>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	77 e0       	ldi	r23, 0x07	; 7
 1d0:	63 e0       	ldi	r22, 0x03	; 3
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <delay_ms+0x26>
 1d4:	00 00       	nop
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1
 1da:	21 15       	cp	r18, r1
 1dc:	31 05       	cpc	r19, r1
 1de:	d1 f7       	brne	.-12     	; 0x1d4 <delay_ms+0x10>
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	48 17       	cp	r20, r24
 1e6:	59 07       	cpc	r21, r25
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <delay_ms+0x2c>
 1ea:	27 2f       	mov	r18, r23
 1ec:	36 2f       	mov	r19, r22
 1ee:	f2 cf       	rjmp	.-28     	; 0x1d4 <delay_ms+0x10>
 1f0:	08 95       	ret

000001f2 <LCD_WriteCommand>:
 1f2:	16 98       	cbi	0x02, 6	; 2
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	17 9a       	sbi	0x02, 7	; 2
 1f8:	00 00       	nop
 1fa:	17 98       	cbi	0x02, 7	; 2
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e1 cf       	rjmp	.-62     	; 0x1c4 <delay_ms>
 202:	08 95       	ret

00000204 <LCD_ClearScreen>:
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	f5 cf       	rjmp	.-22     	; 0x1f2 <LCD_WriteCommand>
 208:	08 95       	ret

0000020a <LCD_Cursor>:
 20a:	81 31       	cpi	r24, 0x11	; 17
 20c:	18 f4       	brcc	.+6      	; 0x214 <LCD_Cursor+0xa>
 20e:	81 58       	subi	r24, 0x81	; 129
 210:	f0 cf       	rjmp	.-32     	; 0x1f2 <LCD_WriteCommand>
 212:	08 95       	ret
 214:	81 55       	subi	r24, 0x51	; 81
 216:	ed cf       	rjmp	.-38     	; 0x1f2 <LCD_WriteCommand>
 218:	08 95       	ret

0000021a <LCD_init>:
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	d2 df       	rcall	.-92     	; 0x1c4 <delay_ms>
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	e7 df       	rcall	.-50     	; 0x1f2 <LCD_WriteCommand>
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	e5 df       	rcall	.-54     	; 0x1f2 <LCD_WriteCommand>
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	e3 df       	rcall	.-58     	; 0x1f2 <LCD_WriteCommand>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	e1 df       	rcall	.-62     	; 0x1f2 <LCD_WriteCommand>
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	c7 cf       	rjmp	.-114    	; 0x1c4 <delay_ms>
 236:	08 95       	ret

00000238 <LCD_WriteData>:
 238:	16 9a       	sbi	0x02, 6	; 2
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	17 9a       	sbi	0x02, 7	; 2
 23e:	00 00       	nop
 240:	17 98       	cbi	0x02, 7	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	be cf       	rjmp	.-132    	; 0x1c4 <delay_ms>
 248:	08 95       	ret

0000024a <LCD_DisplayString>:
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	18 2f       	mov	r17, r24
 254:	eb 01       	movw	r28, r22
 256:	d6 df       	rcall	.-84     	; 0x204 <LCD_ClearScreen>
 258:	88 81       	ld	r24, Y
 25a:	88 23       	and	r24, r24
 25c:	59 f0       	breq	.+22     	; 0x274 <LCD_DisplayString+0x2a>
 25e:	01 e0       	ldi	r16, 0x01	; 1
 260:	01 0f       	add	r16, r17
 262:	81 2f       	mov	r24, r17
 264:	d2 df       	rcall	.-92     	; 0x20a <LCD_Cursor>
 266:	89 91       	ld	r24, Y+
 268:	e7 df       	rcall	.-50     	; 0x238 <LCD_WriteData>
 26a:	88 81       	ld	r24, Y
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <LCD_DisplayString+0x2a>
 270:	10 2f       	mov	r17, r16
 272:	f5 cf       	rjmp	.-22     	; 0x25e <LCD_DisplayString+0x14>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <initUSART>:
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	81 f0       	breq	.+32     	; 0x2a2 <initUSART+0x24>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
 28c:	e2 ec       	ldi	r30, 0xC2	; 194
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	86 60       	ori	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
 296:	87 e6       	ldi	r24, 0x67	; 103
 298:	80 93 c4 00 	sts	0x00C4, r24
 29c:	10 92 c5 00 	sts	0x00C5, r1
 2a0:	08 95       	ret
 2a2:	e9 ec       	ldi	r30, 0xC9	; 201
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	80 83       	st	Z, r24
 2ac:	ea ec       	ldi	r30, 0xCA	; 202
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	80 83       	st	Z, r24
 2b6:	87 e6       	ldi	r24, 0x67	; 103
 2b8:	80 93 cc 00 	sts	0x00CC, r24
 2bc:	10 92 cd 00 	sts	0x00CD, r1
 2c0:	08 95       	ret

000002c2 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	80 91 c8 00 	lds	r24, 0x00C8
 2ca:	88 23       	and	r24, r24
 2cc:	84 f0       	brlt	.+32     	; 0x2ee <USART_Flush+0x2c>
 2ce:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	88 23       	and	r24, r24
 2d6:	ac f4       	brge	.+42     	; 0x302 <USART_Flush+0x40>
 2d8:	a6 ec       	ldi	r26, 0xC6	; 198
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 93 fa 01 	sts	0x01FA, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	d4 f3       	brlt	.-12     	; 0x2e0 <USART_Flush+0x1e>
 2ec:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2ee:	ae ec       	ldi	r26, 0xCE	; 206
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e8 ec       	ldi	r30, 0xC8	; 200
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8c 91       	ld	r24, X
 2f8:	80 93 fa 01 	sts	0x01FA, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	d4 f3       	brlt	.-12     	; 0x2f6 <USART_Flush+0x34>
 302:	08 95       	ret

00000304 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 308:	e0 ec       	ldi	r30, 0xC0	; 192
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	90 81       	ld	r25, Z
 30e:	95 ff       	sbrs	r25, 5
 310:	fd cf       	rjmp	.-6      	; 0x30c <USART_Send+0x8>
		UDR0 = sendMe;
 312:	80 93 c6 00 	sts	0x00C6, r24
 316:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 318:	e8 ec       	ldi	r30, 0xC8	; 200
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	95 ff       	sbrs	r25, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <USART_Send+0x18>
		UDR1 = sendMe;
 322:	80 93 ce 00 	sts	0x00CE, r24
 326:	08 95       	ret

00000328 <TickFct_USART>:
	return state;
}

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	switch(state){
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	91 05       	cpc	r25, r1
 32c:	59 f0       	breq	.+22     	; 0x344 <TickFct_USART+0x1c>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	91 05       	cpc	r25, r1
 332:	e9 f0       	breq	.+58     	; 0x36e <TickFct_USART+0x46>
 334:	89 2b       	or	r24, r25
 336:	81 f5       	brne	.+96     	; 0x398 <TickFct_USART+0x70>
		case usartInit:
			state = usartLocked;
			USART_Send(0x01, 1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	e3 df       	rcall	.-58     	; 0x304 <USART_Send>

enum SM_USART{usartInit, usartLocked, usartUnlocked};
int TickFct_USART(int state){
	switch(state){
		case usartInit:
			state = usartLocked;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
			USART_Send(0x01, 1);
			break;
 342:	08 95       	ret
		case usartLocked:
			if(lockedFlag){
 344:	20 91 fe 01 	lds	r18, 0x01FE
 348:	21 11       	cpse	r18, r1
 34a:	28 c0       	rjmp	.+80     	; 0x39c <TickFct_USART+0x74>
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
				USART_Send(0x00, 1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	d9 df       	rcall	.-78     	; 0x304 <USART_Send>
				LCD_DisplayString(1, "Unlocking...");
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	78 df       	rcall	.-272    	; 0x24a <LCD_DisplayString>
				delay_ms(5000);
 35a:	88 e8       	ldi	r24, 0x88	; 136
 35c:	93 e1       	ldi	r25, 0x13	; 19
 35e:	32 df       	rcall	.-412    	; 0x1c4 <delay_ms>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
 360:	6d e0       	ldi	r22, 0x0D	; 13
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	71 df       	rcall	.-286    	; 0x24a <LCD_DisplayString>
		case usartLocked:
			if(lockedFlag){
				state = usartLocked;
			}
			else{
				state = usartUnlocked;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret
				delay_ms(5000);
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
 36e:	20 91 fe 01 	lds	r18, 0x01FE
 372:	22 23       	and	r18, r18
 374:	99 f0       	breq	.+38     	; 0x39c <TickFct_USART+0x74>
				state = usartLocked;
				USART_Send(0x01, 1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	c4 df       	rcall	.-120    	; 0x304 <USART_Send>
				LCD_DisplayString(1, "Locking...");
 37c:	6d e2       	ldi	r22, 0x2D	; 45
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	63 df       	rcall	.-314    	; 0x24a <LCD_DisplayString>
				delay_ms(5000);
 384:	88 e8       	ldi	r24, 0x88	; 136
 386:	93 e1       	ldi	r25, 0x13	; 19
 388:	1d df       	rcall	.-454    	; 0x1c4 <delay_ms>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 38a:	68 e3       	ldi	r22, 0x38	; 56
 38c:	71 e0       	ldi	r23, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	5c df       	rcall	.-328    	; 0x24a <LCD_DisplayString>
				LCD_DisplayString(1, "Press A to Lock C to Change Pin");
			}
			break;
		case usartUnlocked:
			if(lockedFlag){
				state = usartLocked;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	08 95       	ret
			else{
				state = usartUnlocked;
			}
			break;
		default:
			state = usartInit;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	return state;
}
 39c:	08 95       	ret

0000039e <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	41 f0       	breq	.+16     	; 0x3b2 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 3a2:	e0 ec       	ldi	r30, 0xC0	; 192
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	ec f7       	brge	.-6      	; 0x3a6 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 3ac:	80 91 c6 00 	lds	r24, 0x00C6
 3b0:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 3b2:	e8 ec       	ldi	r30, 0xC8	; 200
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	88 23       	and	r24, r24
 3ba:	ec f7       	brge	.-6      	; 0x3b6 <USART_Receive+0x18>
		return UDR1;
 3bc:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 3c0:	08 95       	ret

000003c2 <clearInputPin>:
unsigned char pinInputComplete;
//---------------Flags---------------


void clearInputPin()						//clears the Character Array for Input Pin
{
 3c2:	e1 e5       	ldi	r30, 0x51	; 81
 3c4:	f2 e0       	ldi	r31, 0x02	; 2
 3c6:	89 e5       	ldi	r24, 0x59	; 89
 3c8:	92 e0       	ldi	r25, 0x02	; 2
	for(unsigned char i = 0; i < 8; ++i){
		inputPin[i] = '\0';
 3ca:	11 92       	st	Z+, r1
//---------------Flags---------------


void clearInputPin()						//clears the Character Array for Input Pin
{
	for(unsigned char i = 0; i < 8; ++i){
 3cc:	e8 17       	cp	r30, r24
 3ce:	f9 07       	cpc	r31, r25
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <clearInputPin+0x8>
		inputPin[i] = '\0';
	}
}
 3d2:	08 95       	ret

000003d4 <TickFct_BluetoothReceiver>:
	}
	return state;
}

enum SM_BluetoothReceiver{bluetoothWait, bluetoothReceived, bluetoothWaitForNext};
int TickFct_BluetoothReceiver(int state){
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ec 01       	movw	r28, r24
	switch(state){
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	91 05       	cpc	r25, r1
 3de:	01 f1       	breq	.+64     	; 0x420 <TickFct_BluetoothReceiver+0x4c>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	91 05       	cpc	r25, r1
 3e4:	41 f1       	breq	.+80     	; 0x436 <TickFct_BluetoothReceiver+0x62>
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	09 f0       	breq	.+2      	; 0x3ec <TickFct_BluetoothReceiver+0x18>
 3ea:	4e c0       	rjmp	.+156    	; 0x488 <TickFct_BluetoothReceiver+0xb4>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 3ec:	80 91 c0 00 	lds	r24, 0x00C0
		case bluetoothWait:
			if(USART_HasReceived(0) && !bluetoothEnable){
 3f0:	88 23       	and	r24, r24
 3f2:	34 f4       	brge	.+12     	; 0x400 <TickFct_BluetoothReceiver+0x2c>
 3f4:	80 91 40 02 	lds	r24, 0x0240
 3f8:	81 11       	cpse	r24, r1
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <TickFct_BluetoothReceiver+0x2c>
				USART_Flush(0);
 3fc:	62 df       	rcall	.-316    	; 0x2c2 <USART_Flush>
				state = bluetoothWait;
 3fe:	52 c0       	rjmp	.+164    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
 400:	80 91 c0 00 	lds	r24, 0x00C0
			}
			else if(USART_HasReceived(0) && bluetoothEnable){
 404:	88 23       	and	r24, r24
 406:	0c f0       	brlt	.+2      	; 0x40a <TickFct_BluetoothReceiver+0x36>
 408:	4d c0       	rjmp	.+154    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
 40a:	80 91 40 02 	lds	r24, 0x0240
 40e:	88 23       	and	r24, r24
 410:	09 f4       	brne	.+2      	; 0x414 <TickFct_BluetoothReceiver+0x40>
 412:	48 c0       	rjmp	.+144    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothReceived;
				position = 0;
 414:	10 92 3c 02 	sts	0x023C, r1
				lastReceivedChar = 0;
 418:	10 92 66 02 	sts	0x0266, r1
				clearInputPin();
 41c:	d2 df       	rcall	.-92     	; 0x3c2 <clearInputPin>
 41e:	40 c0       	rjmp	.+128    	; 0x4a0 <TickFct_BluetoothReceiver+0xcc>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
 420:	80 91 40 02 	lds	r24, 0x0240
 424:	88 23       	and	r24, r24
 426:	99 f1       	breq	.+102    	; 0x48e <TickFct_BluetoothReceiver+0xba>
				state = bluetoothWait;
			}
			else if(lastReceivedChar != '*'){
 428:	80 91 66 02 	lds	r24, 0x0266
 42c:	8a 32       	cpi	r24, 0x2A	; 42
 42e:	91 f1       	breq	.+100    	; 0x494 <TickFct_BluetoothReceiver+0xc0>
				state = bluetoothWaitForNext;
 430:	c2 e0       	ldi	r28, 0x02	; 2
 432:	d0 e0       	ldi	r29, 0x00	; 0
 434:	37 c0       	rjmp	.+110    	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothWait;
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
 436:	80 91 40 02 	lds	r24, 0x0240
 43a:	88 23       	and	r24, r24
 43c:	71 f1       	breq	.+92     	; 0x49a <TickFct_BluetoothReceiver+0xc6>
 43e:	80 91 c0 00 	lds	r24, 0x00C0
				state = bluetoothWait;
			}
			else if(!USART_HasReceived(0)){
 442:	88 23       	and	r24, r24
 444:	7c f5       	brge	.+94     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
 446:	2c c0       	rjmp	.+88     	; 0x4a0 <TickFct_BluetoothReceiver+0xcc>
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
				lastReceivedChar = USART_Receive(0);
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	a9 df       	rcall	.-174    	; 0x39e <USART_Receive>
 44c:	80 93 66 02 	sts	0x0266, r24
				if(lastReceivedChar != '*'){
 450:	8a 32       	cpi	r24, 0x2A	; 42
 452:	59 f0       	breq	.+22     	; 0x46a <TickFct_BluetoothReceiver+0x96>
					inputPin[position++] = lastReceivedChar;
 454:	e0 91 3c 02 	lds	r30, 0x023C
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	9e 0f       	add	r25, r30
 45c:	90 93 3c 02 	sts	0x023C, r25
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	ef 5a       	subi	r30, 0xAF	; 175
 464:	fd 4f       	sbci	r31, 0xFD	; 253
 466:	80 83       	st	Z, r24
 468:	08 c0       	rjmp	.+16     	; 0x47a <TickFct_BluetoothReceiver+0xa6>
				}
				else{
					inputPin[position] = '\0';
 46a:	e0 91 3c 02 	lds	r30, 0x023C
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	ef 5a       	subi	r30, 0xAF	; 175
 472:	fd 4f       	sbci	r31, 0xFD	; 253
 474:	10 82       	st	Z, r1
					pinInputComplete = 1;
 476:	c0 93 3f 02 	sts	0x023F, r28
	}
	switch(state){
		case bluetoothWait:
			break;
		case bluetoothReceived:
			while(lastReceivedChar != '*'){
 47a:	80 91 66 02 	lds	r24, 0x0266
 47e:	8a 32       	cpi	r24, 0x2A	; 42
 480:	19 f7       	brne	.-58     	; 0x448 <TickFct_BluetoothReceiver+0x74>
 482:	c1 e0       	ldi	r28, 0x01	; 1
 484:	d0 e0       	ldi	r29, 0x00	; 0
 486:	0e c0       	rjmp	.+28     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			else{
				state = bluetoothReceived;
			}
			break;
		default:
			state = bluetoothWait;
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	d0 e0       	ldi	r29, 0x00	; 0
 48c:	0b c0       	rjmp	.+22     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
				state = bluetoothWait;
			}
			break;
		case bluetoothReceived:
			if(!bluetoothEnable){
				state = bluetoothWait;
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			}
			else if(lastReceivedChar != '*'){
				state = bluetoothWaitForNext;
			}
			else{
				state = bluetoothWait;
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
			}
			break;
		case bluetoothWaitForNext:
			if(!bluetoothEnable){
				state = bluetoothWait;
 49a:	c0 e0       	ldi	r28, 0x00	; 0
 49c:	d0 e0       	ldi	r29, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <TickFct_BluetoothReceiver+0xd0>
				if(lastReceivedChar != '*'){
					inputPin[position++] = lastReceivedChar;
				}
				else{
					inputPin[position] = '\0';
					pinInputComplete = 1;
 4a0:	c1 e0       	ldi	r28, 0x01	; 1
 4a2:	eb cf       	rjmp	.-42     	; 0x47a <TickFct_BluetoothReceiver+0xa6>
			break;
		case bluetoothWaitForNext:
			break;
	}
	return state;
}
 4a4:	ce 01       	movw	r24, r28
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <TickFct_KeypadReceiver>:

enum SM_KeypadReceiver{keypadWait1, keypadWait2, keypadPressed, keypadWaitRelease};
int TickFct_KeypadReceiver(int state){
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 4b6:	14 de       	rcall	.-984    	; 0xe0 <GetKeypadKey>
 4b8:	18 2f       	mov	r17, r24
	switch(state){
 4ba:	c1 30       	cpi	r28, 0x01	; 1
 4bc:	d1 05       	cpc	r29, r1
 4be:	51 f1       	breq	.+84     	; 0x514 <TickFct_KeypadReceiver+0x68>
 4c0:	1c f4       	brge	.+6      	; 0x4c8 <TickFct_KeypadReceiver+0x1c>
 4c2:	20 97       	sbiw	r28, 0x00	; 0
 4c4:	41 f0       	breq	.+16     	; 0x4d6 <TickFct_KeypadReceiver+0x2a>
 4c6:	85 c0       	rjmp	.+266    	; 0x5d2 <TickFct_KeypadReceiver+0x126>
 4c8:	c2 30       	cpi	r28, 0x02	; 2
 4ca:	d1 05       	cpc	r29, r1
 4cc:	81 f0       	breq	.+32     	; 0x4ee <TickFct_KeypadReceiver+0x42>
 4ce:	c3 30       	cpi	r28, 0x03	; 3
 4d0:	d1 05       	cpc	r29, r1
 4d2:	c1 f0       	breq	.+48     	; 0x504 <TickFct_KeypadReceiver+0x58>
 4d4:	7e c0       	rjmp	.+252    	; 0x5d2 <TickFct_KeypadReceiver+0x126>
		case keypadWait1:
			if(key == '\0' || !keypadEnable){
 4d6:	88 23       	and	r24, r24
 4d8:	09 f4       	brne	.+2      	; 0x4dc <TickFct_KeypadReceiver+0x30>
 4da:	94 c0       	rjmp	.+296    	; 0x604 <TickFct_KeypadReceiver+0x158>
 4dc:	80 91 65 02 	lds	r24, 0x0265
 4e0:	88 23       	and	r24, r24
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <TickFct_KeypadReceiver+0x3a>
 4e4:	8f c0       	rjmp	.+286    	; 0x604 <TickFct_KeypadReceiver+0x158>
				state = keypadWait1;
			}
			else{
				state = keypadPressed;
				position = 0;
 4e6:	10 92 3c 02 	sts	0x023C, r1
				clearInputPin();
 4ea:	6b df       	rcall	.-298    	; 0x3c2 <clearInputPin>
 4ec:	87 c0       	rjmp	.+270    	; 0x5fc <TickFct_KeypadReceiver+0x150>
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
 4ee:	80 91 65 02 	lds	r24, 0x0265
 4f2:	88 23       	and	r24, r24
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <TickFct_KeypadReceiver+0x4c>
 4f6:	73 c0       	rjmp	.+230    	; 0x5de <TickFct_KeypadReceiver+0x132>
				state = keypadWait1;
			}
			else if(key == '*'){
 4f8:	1a 32       	cpi	r17, 0x2A	; 42
 4fa:	09 f0       	breq	.+2      	; 0x4fe <TickFct_KeypadReceiver+0x52>
 4fc:	73 c0       	rjmp	.+230    	; 0x5e4 <TickFct_KeypadReceiver+0x138>
				state = keypadWait1;
 4fe:	c0 e0       	ldi	r28, 0x00	; 0
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	80 c0       	rjmp	.+256    	; 0x604 <TickFct_KeypadReceiver+0x158>
			else{
				state = keypadWaitRelease;
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
 504:	80 91 65 02 	lds	r24, 0x0265
 508:	88 23       	and	r24, r24
 50a:	09 f4       	brne	.+2      	; 0x50e <TickFct_KeypadReceiver+0x62>
 50c:	6e c0       	rjmp	.+220    	; 0x5ea <TickFct_KeypadReceiver+0x13e>
				state = keypadWait1;
			}
			else if(key !='\0'){
 50e:	11 11       	cpse	r17, r1
 510:	79 c0       	rjmp	.+242    	; 0x604 <TickFct_KeypadReceiver+0x158>
 512:	6e c0       	rjmp	.+220    	; 0x5f0 <TickFct_KeypadReceiver+0x144>
			else{
				state = keypadWait2;
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
 514:	80 91 65 02 	lds	r24, 0x0265
 518:	88 23       	and	r24, r24
 51a:	09 f4       	brne	.+2      	; 0x51e <TickFct_KeypadReceiver+0x72>
 51c:	6c c0       	rjmp	.+216    	; 0x5f6 <TickFct_KeypadReceiver+0x14a>
				state = keypadWait1;
			}
			else if(key == '\0'){
 51e:	11 11       	cpse	r17, r1
 520:	6d c0       	rjmp	.+218    	; 0x5fc <TickFct_KeypadReceiver+0x150>
 522:	70 c0       	rjmp	.+224    	; 0x604 <TickFct_KeypadReceiver+0x158>
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
				if(key != 'A' && key != 'C'){
 524:	81 2f       	mov	r24, r17
 526:	8d 7f       	andi	r24, 0xFD	; 253
 528:	81 34       	cpi	r24, 0x41	; 65
 52a:	09 f4       	brne	.+2      	; 0x52e <TickFct_KeypadReceiver+0x82>
 52c:	55 c0       	rjmp	.+170    	; 0x5d8 <TickFct_KeypadReceiver+0x12c>
					inputPin[position++] = key;
 52e:	e0 91 3c 02 	lds	r30, 0x023C
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	8e 0f       	add	r24, r30
 536:	80 93 3c 02 	sts	0x023C, r24
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ef 5a       	subi	r30, 0xAF	; 175
 53e:	fd 4f       	sbci	r31, 0xFD	; 253
 540:	10 83       	st	Z, r17
					if(showPin){
 542:	80 91 64 02 	lds	r24, 0x0264
 546:	88 23       	and	r24, r24
 548:	29 f0       	breq	.+10     	; 0x554 <TickFct_KeypadReceiver+0xa8>
						LCD_WriteData(key);
 54a:	81 2f       	mov	r24, r17
 54c:	75 de       	rcall	.-790    	; 0x238 <LCD_WriteData>
 54e:	c2 e0       	ldi	r28, 0x02	; 2
 550:	d0 e0       	ldi	r29, 0x00	; 0
 552:	58 c0       	rjmp	.+176    	; 0x604 <TickFct_KeypadReceiver+0x158>
					}
					else{
						LCD_WriteData('*');
 554:	8a e2       	ldi	r24, 0x2A	; 42
 556:	70 de       	rcall	.-800    	; 0x238 <LCD_WriteData>
 558:	c2 e0       	ldi	r28, 0x02	; 2
 55a:	d0 e0       	ldi	r29, 0x00	; 0
 55c:	53 c0       	rjmp	.+166    	; 0x604 <TickFct_KeypadReceiver+0x158>
					}
				}
			}
			else{
				if(showPin){
 55e:	80 91 64 02 	lds	r24, 0x0264
 562:	88 23       	and	r24, r24
 564:	51 f1       	breq	.+84     	; 0x5ba <TickFct_KeypadReceiver+0x10e>
					LCD_DisplayString(1, "Changing...");
 566:	68 e5       	ldi	r22, 0x58	; 88
 568:	71 e0       	ldi	r23, 0x01	; 1
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	6e de       	rcall	.-804    	; 0x24a <LCD_DisplayString>
					inputPin[position] = '\0';
 56e:	e0 91 3c 02 	lds	r30, 0x023C
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	ef 5a       	subi	r30, 0xAF	; 175
 576:	fd 4f       	sbci	r31, 0xFD	; 253
 578:	10 82       	st	Z, r1
					newPinInputComplete = 1;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 68 02 	sts	0x0268, r24
					unsigned char counter = 0;
					correctPinAddr = CORRECTPINSTARTADDR;
 580:	10 92 fb 01 	sts	0x01FB, r1
			else{
				if(showPin){
					LCD_DisplayString(1, "Changing...");
					inputPin[position] = '\0';
					newPinInputComplete = 1;
					unsigned char counter = 0;
 584:	10 e0       	ldi	r17, 0x00	; 0
					correctPinAddr = CORRECTPINSTARTADDR;
					while(1){
						PORTA = 1;
 586:	01 e0       	ldi	r16, 0x01	; 1
 588:	02 b9       	out	0x02, r16	; 2
						eeprom_write_byte(correctPinAddr++, inputPin[counter]);
 58a:	c1 2f       	mov	r28, r17
 58c:	d0 e0       	ldi	r29, 0x00	; 0
 58e:	cf 5a       	subi	r28, 0xAF	; 175
 590:	dd 4f       	sbci	r29, 0xFD	; 253
 592:	68 81       	ld	r22, Y
 594:	80 91 fb 01 	lds	r24, 0x01FB
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	98 0f       	add	r25, r24
 59c:	90 93 fb 01 	sts	0x01FB, r25
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	75 d3       	rcall	.+1770   	; 0xc8e <__eewr_byte_m1284>
						if(inputPin[counter] == '\0'){
 5a4:	88 81       	ld	r24, Y
 5a6:	88 23       	and	r24, r24
 5a8:	11 f0       	breq	.+4      	; 0x5ae <TickFct_KeypadReceiver+0x102>
							break;
						}
						++counter;
 5aa:	1f 5f       	subi	r17, 0xFF	; 255
					}
 5ac:	ed cf       	rjmp	.-38     	; 0x588 <TickFct_KeypadReceiver+0xdc>
					newPinInputComplete = 1;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	80 93 68 02 	sts	0x0268, r24
 5b4:	c2 e0       	ldi	r28, 0x02	; 2
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	25 c0       	rjmp	.+74     	; 0x604 <TickFct_KeypadReceiver+0x158>
				}
				else{
					inputPin[position] = '\0';
 5ba:	e0 91 3c 02 	lds	r30, 0x023C
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ef 5a       	subi	r30, 0xAF	; 175
 5c2:	fd 4f       	sbci	r31, 0xFD	; 253
 5c4:	10 82       	st	Z, r1
					pinInputComplete = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 3f 02 	sts	0x023F, r24
 5cc:	c2 e0       	ldi	r28, 0x02	; 2
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	19 c0       	rjmp	.+50     	; 0x604 <TickFct_KeypadReceiver+0x158>
			else{
				state = keypadPressed;
			}
			break;
		default:
			state = keypadWait1;
 5d2:	c0 e0       	ldi	r28, 0x00	; 0
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
 5d6:	16 c0       	rjmp	.+44     	; 0x604 <TickFct_KeypadReceiver+0x158>
 5d8:	c2 e0       	ldi	r28, 0x02	; 2
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	13 c0       	rjmp	.+38     	; 0x604 <TickFct_KeypadReceiver+0x158>
				clearInputPin();
			}
			break;
		case keypadPressed:
			if(!keypadEnable){
				state = keypadWait1;
 5de:	c0 e0       	ldi	r28, 0x00	; 0
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	10 c0       	rjmp	.+32     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			else if(key == '*'){
				state = keypadWait1;
			}
			else{
				state = keypadWaitRelease;
 5e4:	c3 e0       	ldi	r28, 0x03	; 3
 5e6:	d0 e0       	ldi	r29, 0x00	; 0
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			break;
		case keypadWaitRelease:
			if(!keypadEnable){
				state = keypadWait1;
 5ea:	c0 e0       	ldi	r28, 0x00	; 0
 5ec:	d0 e0       	ldi	r29, 0x00	; 0
 5ee:	0a c0       	rjmp	.+20     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			else if(key !='\0'){
				state = keypadWaitRelease;
			}
			else{
				state = keypadWait2;
 5f0:	c1 e0       	ldi	r28, 0x01	; 1
 5f2:	d0 e0       	ldi	r29, 0x00	; 0
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <TickFct_KeypadReceiver+0x158>
			}
			break;
		case keypadWait2:
			if(!keypadEnable){
				state = keypadWait1;
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <TickFct_KeypadReceiver+0x158>
		case keypadWait1:
			break;
		case keypadWait2:
			break;
		case keypadPressed:
			if(key != '*'){
 5fc:	1a 32       	cpi	r17, 0x2A	; 42
 5fe:	09 f0       	breq	.+2      	; 0x602 <TickFct_KeypadReceiver+0x156>
 600:	91 cf       	rjmp	.-222    	; 0x524 <TickFct_KeypadReceiver+0x78>
 602:	ad cf       	rjmp	.-166    	; 0x55e <TickFct_KeypadReceiver+0xb2>
			break;
		case keypadWaitRelease:
			break;
	}
	return state;
}
 604:	ce 01       	movw	r24, r28
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <clearFlags>:
		inputPin[i] = '\0';
	}
}

void clearFlags(){
	checkPinFlag = 0;
 610:	10 92 ff 01 	sts	0x01FF, r1
	keypadEnable = 0;
 614:	10 92 65 02 	sts	0x0265, r1
	bluetoothEnable = 0;
 618:	10 92 40 02 	sts	0x0240, r1
	controlCounter = 0;
 61c:	10 92 63 02 	sts	0x0263, r1
 620:	10 92 62 02 	sts	0x0262, r1
	lockedFlag = 1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 fe 01 	sts	0x01FE, r24
	showPin = 0;
 62a:	10 92 64 02 	sts	0x0264, r1
	pinInputComplete = 0;
 62e:	10 92 3f 02 	sts	0x023F, r1
 632:	08 95       	ret

00000634 <TickFct_Controller>:
}

enum SM_Controller{controllerinit, controllerWait, controllerKeypad, controllerBluetooth, controllerCheck,
	 controllerUnlocked, controllerLocked, controllerLockWaitRelease, controllerChangePin, controllerIntrusionDetected, 
	 controllerIntrusionPin, controllerIntrusionCheck};
int TickFct_Controller(int state){
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ec 01       	movw	r28, r24
	unsigned char key = GetKeypadKey();
 63a:	52 dd       	rcall	.-1372   	; 0xe0 <GetKeypadKey>
	unsigned char doorClosed = (~PIND & 0x10) >> 4;
 63c:	29 b1       	in	r18, 0x09	; 9
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	20 95       	com	r18
 642:	30 95       	com	r19
 644:	22 95       	swap	r18
 646:	21 70       	andi	r18, 0x01	; 1
	switch(state){
 648:	cc 30       	cpi	r28, 0x0C	; 12
 64a:	d1 05       	cpc	r29, r1
 64c:	08 f0       	brcs	.+2      	; 0x650 <TickFct_Controller+0x1c>
 64e:	1a c1       	rjmp	.+564    	; 0x884 <TickFct_Controller+0x250>
 650:	fe 01       	movw	r30, r28
 652:	ea 5b       	subi	r30, 0xBA	; 186
 654:	ff 4f       	sbci	r31, 0xFF	; 255
 656:	0d c3       	rjmp	.+1562   	; 0xc72 <__tablejump2__>
		case controllerinit:
			clearFlags();											
 658:	db df       	rcall	.-74     	; 0x610 <clearFlags>
			lockedFlag = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 fe 01 	sts	0x01FE, r24
			showPin = 0;
 660:	10 92 64 02 	sts	0x0264, r1
			state = controllerWait;
			clearInputPin();
 664:	ae de       	rcall	.-676    	; 0x3c2 <clearInputPin>
			LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 666:	68 e3       	ldi	r22, 0x38	; 56
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	ee dd       	rcall	.-1060   	; 0x24a <LCD_DisplayString>
			break;
 66e:	3b c1       	rjmp	.+630    	; 0x8e6 <TickFct_Controller+0x2b2>
		case controllerWait:
			if(!doorClosed && lockedFlag ){
 670:	21 11       	cpse	r18, r1
 672:	09 c0       	rjmp	.+18     	; 0x686 <TickFct_Controller+0x52>
 674:	90 91 fe 01 	lds	r25, 0x01FE
 678:	99 23       	and	r25, r25
 67a:	29 f0       	breq	.+10     	; 0x686 <TickFct_Controller+0x52>
				state = controllerIntrusionDetected;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 67c:	64 e6       	ldi	r22, 0x64	; 100
 67e:	71 e0       	ldi	r23, 0x01	; 1
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	e3 dd       	rcall	.-1082   	; 0x24a <LCD_DisplayString>
 684:	21 c1       	rjmp	.+578    	; 0x8c8 <TickFct_Controller+0x294>
			}
			else if(key == 'A'){
 686:	81 34       	cpi	r24, 0x41	; 65
 688:	49 f4       	brne	.+18     	; 0x69c <TickFct_Controller+0x68>
				state = controllerKeypad;
				keypadEnable = 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 65 02 	sts	0x0265, r24
				clearInputPin();
 690:	98 de       	rcall	.-720    	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 692:	61 e7       	ldi	r22, 0x71	; 113
 694:	71 e0       	ldi	r23, 0x01	; 1
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	d8 dd       	rcall	.-1104   	; 0x24a <LCD_DisplayString>
 69a:	2a c1       	rjmp	.+596    	; 0x8f0 <TickFct_Controller+0x2bc>
			}
			else if(key == 'B'){
 69c:	82 34       	cpi	r24, 0x42	; 66
 69e:	09 f0       	breq	.+2      	; 0x6a2 <TickFct_Controller+0x6e>
 6a0:	22 c1       	rjmp	.+580    	; 0x8e6 <TickFct_Controller+0x2b2>
				state = controllerBluetooth;
				bluetoothEnable = 1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 40 02 	sts	0x0240, r24
				clearInputPin();
 6a8:	8c de       	rcall	.-744    	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "Waiting to Rec  C to Cancel");
 6aa:	67 e7       	ldi	r22, 0x77	; 119
 6ac:	71 e0       	ldi	r23, 0x01	; 1
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	cc dd       	rcall	.-1128   	; 0x24a <LCD_DisplayString>
 6b2:	26 c1       	rjmp	.+588    	; 0x900 <TickFct_Controller+0x2cc>
			}
			break;
		case controllerBluetooth:
			if(!doorClosed && lockedFlag ){
 6b4:	21 11       	cpse	r18, r1
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <TickFct_Controller+0x96>
 6b8:	90 91 fe 01 	lds	r25, 0x01FE
 6bc:	99 23       	and	r25, r25
 6be:	29 f0       	breq	.+10     	; 0x6ca <TickFct_Controller+0x96>
				state = controllerIntrusionDetected;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 6c0:	64 e6       	ldi	r22, 0x64	; 100
 6c2:	71 e0       	ldi	r23, 0x01	; 1
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	c1 dd       	rcall	.-1150   	; 0x24a <LCD_DisplayString>
 6c8:	ff c0       	rjmp	.+510    	; 0x8c8 <TickFct_Controller+0x294>
			}
			else if(key == 'C'){
 6ca:	83 34       	cpi	r24, 0x43	; 67
 6cc:	41 f4       	brne	.+16     	; 0x6de <TickFct_Controller+0xaa>
				state = controllerWait;
				bluetoothEnable = 0;
 6ce:	10 92 40 02 	sts	0x0240, r1
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 6d2:	68 e3       	ldi	r22, 0x38	; 56
 6d4:	71 e0       	ldi	r23, 0x01	; 1
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	b8 dd       	rcall	.-1168   	; 0x24a <LCD_DisplayString>
				clearFlags();
 6da:	9a df       	rcall	.-204    	; 0x610 <clearFlags>
 6dc:	04 c1       	rjmp	.+520    	; 0x8e6 <TickFct_Controller+0x2b2>
			}
			else if(pinInputComplete){
 6de:	80 91 3f 02 	lds	r24, 0x023F
 6e2:	88 23       	and	r24, r24
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <TickFct_Controller+0xb4>
 6e6:	0c c1       	rjmp	.+536    	; 0x900 <TickFct_Controller+0x2cc>
				state = controllerCheck;
				checkPinFlag = 1;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	80 93 ff 01 	sts	0x01FF, r24
				bluetoothEnable = 0;
 6ee:	10 92 40 02 	sts	0x0240, r1
				LCD_DisplayString(1, "Checking...     C to Cancel");
 6f2:	63 e9       	ldi	r22, 0x93	; 147
 6f4:	71 e0       	ldi	r23, 0x01	; 1
 6f6:	a9 dd       	rcall	.-1198   	; 0x24a <LCD_DisplayString>
 6f8:	0b c1       	rjmp	.+534    	; 0x910 <TickFct_Controller+0x2dc>
			else{
				state = controllerBluetooth;
			}
			break;
		case controllerKeypad:
			if(!doorClosed && lockedFlag ){
 6fa:	21 11       	cpse	r18, r1
 6fc:	09 c0       	rjmp	.+18     	; 0x710 <TickFct_Controller+0xdc>
 6fe:	80 91 fe 01 	lds	r24, 0x01FE
 702:	88 23       	and	r24, r24
 704:	29 f0       	breq	.+10     	; 0x710 <TickFct_Controller+0xdc>
				state = controllerIntrusionDetected;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 706:	64 e6       	ldi	r22, 0x64	; 100
 708:	71 e0       	ldi	r23, 0x01	; 1
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	9e dd       	rcall	.-1220   	; 0x24a <LCD_DisplayString>
 70e:	dc c0       	rjmp	.+440    	; 0x8c8 <TickFct_Controller+0x294>
			}
			else if(pinInputComplete){
 710:	80 91 3f 02 	lds	r24, 0x023F
 714:	88 23       	and	r24, r24
 716:	09 f4       	brne	.+2      	; 0x71a <TickFct_Controller+0xe6>
 718:	eb c0       	rjmp	.+470    	; 0x8f0 <TickFct_Controller+0x2bc>
				state = controllerCheck;
				checkPinFlag = 1;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 ff 01 	sts	0x01FF, r24
				keypadEnable = 0;
 720:	10 92 65 02 	sts	0x0265, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 724:	6f ea       	ldi	r22, 0xAF	; 175
 726:	71 e0       	ldi	r23, 0x01	; 1
 728:	90 dd       	rcall	.-1248   	; 0x24a <LCD_DisplayString>
 72a:	f2 c0       	rjmp	.+484    	; 0x910 <TickFct_Controller+0x2dc>
			else{
				state = controllerKeypad;
			}
			break;
		case controllerCheck:
			if(!doorClosed && lockedFlag ){
 72c:	21 11       	cpse	r18, r1
 72e:	09 c0       	rjmp	.+18     	; 0x742 <TickFct_Controller+0x10e>
 730:	90 91 fe 01 	lds	r25, 0x01FE
 734:	99 23       	and	r25, r25
 736:	29 f0       	breq	.+10     	; 0x742 <TickFct_Controller+0x10e>
				state = controllerIntrusionDetected;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 738:	64 e6       	ldi	r22, 0x64	; 100
 73a:	71 e0       	ldi	r23, 0x01	; 1
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	85 dd       	rcall	.-1270   	; 0x24a <LCD_DisplayString>
 740:	c3 c0       	rjmp	.+390    	; 0x8c8 <TickFct_Controller+0x294>
			}
			else if(key == 'C'){
 742:	83 34       	cpi	r24, 0x43	; 67
 744:	39 f4       	brne	.+14     	; 0x754 <TickFct_Controller+0x120>
				state = controllerWait;
				clearInputPin();
 746:	3d de       	rcall	.-902    	; 0x3c2 <clearInputPin>
				clearFlags();
 748:	63 df       	rcall	.-314    	; 0x610 <clearFlags>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 74a:	68 e3       	ldi	r22, 0x38	; 56
 74c:	71 e0       	ldi	r23, 0x01	; 1
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	7c dd       	rcall	.-1288   	; 0x24a <LCD_DisplayString>
 752:	c9 c0       	rjmp	.+402    	; 0x8e6 <TickFct_Controller+0x2b2>
			}
			else if(checkPinFlag){
 754:	80 91 ff 01 	lds	r24, 0x01FF
 758:	81 11       	cpse	r24, r1
 75a:	da c0       	rjmp	.+436    	; 0x910 <TickFct_Controller+0x2dc>
				state = controllerCheck;
			}
			else{
				if(lockedFlag){
 75c:	80 91 fe 01 	lds	r24, 0x01FE
 760:	88 23       	and	r24, r24
 762:	49 f0       	breq	.+18     	; 0x776 <TickFct_Controller+0x142>
					state = controllerLocked;
					controlCounter = 0;
 764:	10 92 63 02 	sts	0x0263, r1
 768:	10 92 62 02 	sts	0x0262, r1
					LCD_DisplayString(1, "Incorrect Pin");
 76c:	6b ec       	ldi	r22, 0xCB	; 203
 76e:	71 e0       	ldi	r23, 0x01	; 1
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	6b dd       	rcall	.-1322   	; 0x24a <LCD_DisplayString>
 774:	91 c0       	rjmp	.+290    	; 0x898 <TickFct_Controller+0x264>
				}
				else{
					state = controllerUnlocked;
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 776:	69 ed       	ldi	r22, 0xD9	; 217
 778:	71 e0       	ldi	r23, 0x01	; 1
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	66 dd       	rcall	.-1332   	; 0x24a <LCD_DisplayString>
 77e:	9a c0       	rjmp	.+308    	; 0x8b4 <TickFct_Controller+0x280>
				}
			}
			break;
		case controllerLocked:
			if(!doorClosed && lockedFlag ){
 780:	21 11       	cpse	r18, r1
 782:	09 c0       	rjmp	.+18     	; 0x796 <TickFct_Controller+0x162>
 784:	80 91 fe 01 	lds	r24, 0x01FE
 788:	88 23       	and	r24, r24
 78a:	29 f0       	breq	.+10     	; 0x796 <TickFct_Controller+0x162>
				state = controllerIntrusionDetected;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 78c:	64 e6       	ldi	r22, 0x64	; 100
 78e:	71 e0       	ldi	r23, 0x01	; 1
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	5b dd       	rcall	.-1354   	; 0x24a <LCD_DisplayString>
 794:	99 c0       	rjmp	.+306    	; 0x8c8 <TickFct_Controller+0x294>
			}
			else if(controlCounter >= 750){
 796:	80 91 62 02 	lds	r24, 0x0262
 79a:	90 91 63 02 	lds	r25, 0x0263
 79e:	8e 3e       	cpi	r24, 0xEE	; 238
 7a0:	92 40       	sbci	r25, 0x02	; 2
 7a2:	08 f4       	brcc	.+2      	; 0x7a6 <TickFct_Controller+0x172>
 7a4:	79 c0       	rjmp	.+242    	; 0x898 <TickFct_Controller+0x264>
				state = controllerWait;
				clearInputPin();
 7a6:	0d de       	rcall	.-998    	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 7a8:	68 e3       	ldi	r22, 0x38	; 56
 7aa:	71 e0       	ldi	r23, 0x01	; 1
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	4d dd       	rcall	.-1382   	; 0x24a <LCD_DisplayString>
				clearFlags();
 7b0:	2f df       	rcall	.-418    	; 0x610 <clearFlags>
 7b2:	99 c0       	rjmp	.+306    	; 0x8e6 <TickFct_Controller+0x2b2>
			else{
				state = controllerLocked;
			}
			break;
		case controllerUnlocked:
			if(key == 'A'){
 7b4:	81 34       	cpi	r24, 0x41	; 65
 7b6:	09 f4       	brne	.+2      	; 0x7ba <TickFct_Controller+0x186>
 7b8:	6a c0       	rjmp	.+212    	; 0x88e <TickFct_Controller+0x25a>
				state = controllerLockWaitRelease;
			}
			else if(key == 'C'){
 7ba:	83 34       	cpi	r24, 0x43	; 67
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <TickFct_Controller+0x18c>
 7be:	7a c0       	rjmp	.+244    	; 0x8b4 <TickFct_Controller+0x280>
				state = controllerChangePin;
				showPin = 1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 64 02 	sts	0x0264, r24
				keypadEnable = 1;
 7c6:	80 93 65 02 	sts	0x0265, r24
				pinInputComplete = 0;
 7ca:	10 92 3f 02 	sts	0x023F, r1
				clearInputPin();
 7ce:	f9 dd       	rcall	.-1038   	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "Pin: ");
 7d0:	61 e7       	ldi	r22, 0x71	; 113
 7d2:	71 e0       	ldi	r23, 0x01	; 1
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	39 dd       	rcall	.-1422   	; 0x24a <LCD_DisplayString>
 7d8:	72 c0       	rjmp	.+228    	; 0x8be <TickFct_Controller+0x28a>
			}
			break;
		case controllerLockWaitRelease:
			if(!doorClosed && lockedFlag ){
 7da:	21 11       	cpse	r18, r1
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <TickFct_Controller+0x1bc>
 7de:	90 91 fe 01 	lds	r25, 0x01FE
 7e2:	99 23       	and	r25, r25
 7e4:	29 f0       	breq	.+10     	; 0x7f0 <TickFct_Controller+0x1bc>
				state = controllerIntrusionDetected;
				LCD_DisplayString(1, "ALARM! Enter Pin: ");
 7e6:	64 e6       	ldi	r22, 0x64	; 100
 7e8:	71 e0       	ldi	r23, 0x01	; 1
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	2e dd       	rcall	.-1444   	; 0x24a <LCD_DisplayString>
 7ee:	6c c0       	rjmp	.+216    	; 0x8c8 <TickFct_Controller+0x294>
			}
			else if(key != '\0'){
 7f0:	81 11       	cpse	r24, r1
 7f2:	4d c0       	rjmp	.+154    	; 0x88e <TickFct_Controller+0x25a>
				state = controllerLockWaitRelease;
			}
			else{
				state = controllerWait;
				clearInputPin();
 7f4:	e6 dd       	rcall	.-1076   	; 0x3c2 <clearInputPin>
				LCD_DisplayString(1, "A for Keypad    B for Bluetooth");
 7f6:	68 e3       	ldi	r22, 0x38	; 56
 7f8:	71 e0       	ldi	r23, 0x01	; 1
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	26 dd       	rcall	.-1460   	; 0x24a <LCD_DisplayString>
				clearFlags();
 7fe:	08 df       	rcall	.-496    	; 0x610 <clearFlags>
 800:	72 c0       	rjmp	.+228    	; 0x8e6 <TickFct_Controller+0x2b2>
			}
			break;
		case controllerChangePin:
			if(!newPinInputComplete){
 802:	80 91 68 02 	lds	r24, 0x0268
 806:	88 23       	and	r24, r24
 808:	09 f4       	brne	.+2      	; 0x80c <TickFct_Controller+0x1d8>
 80a:	59 c0       	rjmp	.+178    	; 0x8be <TickFct_Controller+0x28a>
				state = controllerChangePin;
			}
			else{
				state = controllerUnlocked;
				keypadEnable = 0;
 80c:	10 92 65 02 	sts	0x0265, r1
				showPin = 0;
 810:	10 92 64 02 	sts	0x0264, r1
				LCD_DisplayString(1, "Press A to Lock C to change Pin");
 814:	69 ed       	ldi	r22, 0xD9	; 217
 816:	71 e0       	ldi	r23, 0x01	; 1
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	17 dd       	rcall	.-1490   	; 0x24a <LCD_DisplayString>
 81c:	4b c0       	rjmp	.+150    	; 0x8b4 <TickFct_Controller+0x280>
			}
			break;
		case controllerIntrusionDetected:
			if(!doorClosed && lockedFlag ){
 81e:	21 11       	cpse	r18, r1
 820:	62 c0       	rjmp	.+196    	; 0x8e6 <TickFct_Controller+0x2b2>
 822:	80 91 fe 01 	lds	r24, 0x01FE
 826:	88 23       	and	r24, r24
 828:	09 f4       	brne	.+2      	; 0x82c <TickFct_Controller+0x1f8>
 82a:	5d c0       	rjmp	.+186    	; 0x8e6 <TickFct_Controller+0x2b2>
				state = controllerIntrusionPin;
				keypadEnable = 1;
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	80 93 65 02 	sts	0x0265, r24
				clearInputPin();
 832:	c7 dd       	rcall	.-1138   	; 0x3c2 <clearInputPin>
 834:	4e c0       	rjmp	.+156    	; 0x8d2 <TickFct_Controller+0x29e>
			else{
				state = controllerWait;
			}
			break;
		case controllerIntrusionPin:
			if(pinInputComplete){
 836:	80 91 3f 02 	lds	r24, 0x023F
 83a:	88 23       	and	r24, r24
 83c:	09 f4       	brne	.+2      	; 0x840 <TickFct_Controller+0x20c>
 83e:	49 c0       	rjmp	.+146    	; 0x8d2 <TickFct_Controller+0x29e>
				state = controllerIntrusionCheck;
				checkPinFlag = 1;
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	80 93 ff 01 	sts	0x01FF, r24
				keypadEnable = 0;
 846:	10 92 65 02 	sts	0x0265, r1
				LCD_DisplayString(1, "Checking...     C to cancel");
 84a:	6f ea       	ldi	r22, 0xAF	; 175
 84c:	71 e0       	ldi	r23, 0x01	; 1
 84e:	fd dc       	rcall	.-1542   	; 0x24a <LCD_DisplayString>
 850:	45 c0       	rjmp	.+138    	; 0x8dc <TickFct_Controller+0x2a8>
			else{
				state = controllerIntrusionPin;
			}
			break;
		case controllerIntrusionCheck:
			if(checkPinFlag){
 852:	80 91 ff 01 	lds	r24, 0x01FF
 856:	81 11       	cpse	r24, r1
 858:	41 c0       	rjmp	.+130    	; 0x8dc <TickFct_Controller+0x2a8>
				state = controllerIntrusionCheck;
			}
			else{
				if(lockedFlag){
 85a:	80 91 fe 01 	lds	r24, 0x01FE
 85e:	88 23       	and	r24, r24
 860:	61 f0       	breq	.+24     	; 0x87a <TickFct_Controller+0x246>
					state = controllerIntrusionDetected;
					controlCounter = 0;
 862:	10 92 63 02 	sts	0x0263, r1
 866:	10 92 62 02 	sts	0x0262, r1
					LCD_DisplayString(1, "Incorrect Pin");
 86a:	6b ec       	ldi	r22, 0xCB	; 203
 86c:	71 e0       	ldi	r23, 0x01	; 1
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	ec dc       	rcall	.-1576   	; 0x24a <LCD_DisplayString>
					delay_ms(500);
 872:	84 ef       	ldi	r24, 0xF4	; 244
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	a6 dc       	rcall	.-1716   	; 0x1c4 <delay_ms>
 878:	27 c0       	rjmp	.+78     	; 0x8c8 <TickFct_Controller+0x294>
				}
				else{
					state = controllerUnlocked;
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
 87a:	69 ed       	ldi	r22, 0xD9	; 217
 87c:	71 e0       	ldi	r23, 0x01	; 1
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	e4 dc       	rcall	.-1592   	; 0x24a <LCD_DisplayString>
 882:	18 c0       	rjmp	.+48     	; 0x8b4 <TickFct_Controller+0x280>
			state = controllerinit;
			break;
	}
	switch(state){
		case controllerinit:
			PORTA = 1;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	82 b9       	out	0x02, r24	; 2
					LCD_DisplayString(1, "Press A to Lock C to change Pin");
				}
			}
			break;
		default:
			state = controllerinit;
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	switch(state){
		case controllerinit:
			PORTA = 1;
			break;
 88c:	45 c0       	rjmp	.+138    	; 0x918 <TickFct_Controller+0x2e4>
			break;
		case controllerUnlocked:
			PORTA = 7;
			break;
		case controllerLockWaitRelease:
			PORTA = 8;
 88e:	88 e0       	ldi	r24, 0x08	; 8
 890:	82 b9       	out	0x02, r24	; 2
			break;
 892:	87 e0       	ldi	r24, 0x07	; 7
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	40 c0       	rjmp	.+128    	; 0x918 <TickFct_Controller+0x2e4>
			break;
		case controllerCheck:
			PORTA = 5;
			break;
		case controllerLocked:
			PORTA = 6;
 898:	86 e0       	ldi	r24, 0x06	; 6
 89a:	82 b9       	out	0x02, r24	; 2
			++controlCounter;
 89c:	80 91 62 02 	lds	r24, 0x0262
 8a0:	90 91 63 02 	lds	r25, 0x0263
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	90 93 63 02 	sts	0x0263, r25
 8aa:	80 93 62 02 	sts	0x0262, r24
			break;
 8ae:	86 e0       	ldi	r24, 0x06	; 6
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	32 c0       	rjmp	.+100    	; 0x918 <TickFct_Controller+0x2e4>
		case controllerUnlocked:
			PORTA = 7;
 8b4:	87 e0       	ldi	r24, 0x07	; 7
 8b6:	82 b9       	out	0x02, r24	; 2
			break;
 8b8:	85 e0       	ldi	r24, 0x05	; 5
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	2d c0       	rjmp	.+90     	; 0x918 <TickFct_Controller+0x2e4>
		case controllerLockWaitRelease:
			PORTA = 8;
			break;
		case controllerChangePin:
			PORTA = 9;
 8be:	89 e0       	ldi	r24, 0x09	; 9
 8c0:	82 b9       	out	0x02, r24	; 2
			break;
 8c2:	88 e0       	ldi	r24, 0x08	; 8
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	28 c0       	rjmp	.+80     	; 0x918 <TickFct_Controller+0x2e4>
		case controllerIntrusionDetected:
			PORTA = 10;
 8c8:	8a e0       	ldi	r24, 0x0A	; 10
 8ca:	82 b9       	out	0x02, r24	; 2
			break;
 8cc:	89 e0       	ldi	r24, 0x09	; 9
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	23 c0       	rjmp	.+70     	; 0x918 <TickFct_Controller+0x2e4>
		case controllerIntrusionPin:
			PORTA = 11;
 8d2:	8b e0       	ldi	r24, 0x0B	; 11
 8d4:	82 b9       	out	0x02, r24	; 2
			break;
 8d6:	8a e0       	ldi	r24, 0x0A	; 10
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	1e c0       	rjmp	.+60     	; 0x918 <TickFct_Controller+0x2e4>
		case controllerIntrusionCheck:
			PORTA = 12;
 8dc:	8c e0       	ldi	r24, 0x0C	; 12
 8de:	82 b9       	out	0x02, r24	; 2
			break;	
 8e0:	8b e0       	ldi	r24, 0x0B	; 11
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	19 c0       	rjmp	.+50     	; 0x918 <TickFct_Controller+0x2e4>
	switch(state){
		case controllerinit:
			PORTA = 1;
			break;
		case controllerWait:
			PORTA = 2;
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	82 b9       	out	0x02, r24	; 2
			break;
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	14 c0       	rjmp	.+40     	; 0x918 <TickFct_Controller+0x2e4>
		case controllerKeypad:
			PORTA = 3;
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	82 b9       	out	0x02, r24	; 2
			keypadEnable = 1;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	80 93 65 02 	sts	0x0265, r24
			break;
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0c c0       	rjmp	.+24     	; 0x918 <TickFct_Controller+0x2e4>
		case controllerBluetooth:
			PORTA = 4;
 900:	84 e0       	ldi	r24, 0x04	; 4
 902:	82 b9       	out	0x02, r24	; 2
			bluetoothEnable = 1;
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	80 93 40 02 	sts	0x0240, r24
			break;
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	04 c0       	rjmp	.+8      	; 0x918 <TickFct_Controller+0x2e4>
		case controllerCheck:
			PORTA = 5;
 910:	85 e0       	ldi	r24, 0x05	; 5
 912:	82 b9       	out	0x02, r24	; 2
			break;
 914:	84 e0       	ldi	r24, 0x04	; 4
 916:	90 e0       	ldi	r25, 0x00	; 0
		case controllerIntrusionCheck:
			PORTA = 12;
			break;	
	}
	return state;
}
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	08 95       	ret

0000091e <getInputPinLength>:
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 91e:	80 91 51 02 	lds	r24, 0x0251
 922:	88 23       	and	r24, r24
 924:	51 f0       	breq	.+20     	; 0x93a <getInputPinLength+0x1c>
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 926:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
 928:	8f 5f       	subi	r24, 0xFF	; 255
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
	while(inputPin[i] != '\0'){
 92a:	e8 2f       	mov	r30, r24
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	ef 5a       	subi	r30, 0xAF	; 175
 930:	fd 4f       	sbci	r31, 0xFD	; 253
 932:	90 81       	ld	r25, Z
 934:	91 11       	cpse	r25, r1
 936:	f8 cf       	rjmp	.-16     	; 0x928 <getInputPinLength+0xa>
 938:	08 95       	ret
	showPin = 0;
	pinInputComplete = 0;
}

unsigned char getInputPinLength(){
	unsigned char i = 0;
 93a:	80 e0       	ldi	r24, 0x00	; 0
	while(inputPin[i] != '\0'){
		++i;
	}
	return i;
}
 93c:	08 95       	ret

0000093e <getCorrectPinLength>:

unsigned char getCorrectPinLength(){
 93e:	cf 93       	push	r28
	unsigned char i = CORRECTPINSTARTADDR;
 940:	c0 e0       	ldi	r28, 0x00	; 0
	while(eeprom_read_byte(i) != '\0'){
 942:	01 c0       	rjmp	.+2      	; 0x946 <getCorrectPinLength+0x8>
		++i;
 944:	cf 5f       	subi	r28, 0xFF	; 255
	return i;
}

unsigned char getCorrectPinLength(){
	unsigned char i = CORRECTPINSTARTADDR;
	while(eeprom_read_byte(i) != '\0'){
 946:	8c 2f       	mov	r24, r28
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	99 d1       	rcall	.+818    	; 0xc7e <__eerd_byte_m1284>
 94c:	81 11       	cpse	r24, r1
 94e:	fa cf       	rjmp	.-12     	; 0x944 <getCorrectPinLength+0x6>
		++i;
	}
	return i;
}
 950:	8c 2f       	mov	r24, r28
 952:	cf 91       	pop	r28
 954:	08 95       	ret

00000956 <TickFct_CheckPin>:
	}
	return state;
}

enum SM_CheckPin {checkInit, checkWait, checkCheck};
int TickFct_CheckPin(int state){
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
	switch(state){
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	91 05       	cpc	r25, r1
 962:	49 f0       	breq	.+18     	; 0x976 <TickFct_CheckPin+0x20>
 964:	82 30       	cpi	r24, 0x02	; 2
 966:	91 05       	cpc	r25, r1
 968:	19 f0       	breq	.+6      	; 0x970 <TickFct_CheckPin+0x1a>
 96a:	89 2b       	or	r24, r25
 96c:	09 f0       	breq	.+2      	; 0x970 <TickFct_CheckPin+0x1a>
 96e:	3c c0       	rjmp	.+120    	; 0x9e8 <TickFct_CheckPin+0x92>
		case checkInit:
			state = checkWait;
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	3b c0       	rjmp	.+118    	; 0x9ec <TickFct_CheckPin+0x96>
			break;
		case checkWait:
			if(checkPinFlag){
 976:	20 91 ff 01 	lds	r18, 0x01FF
 97a:	22 23       	and	r18, r18
 97c:	b9 f1       	breq	.+110    	; 0x9ec <TickFct_CheckPin+0x96>
				state = checkCheck;
				isCorrect = 1;
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	80 93 61 02 	sts	0x0261, r24
				checkCounter = 0;
 984:	10 92 67 02 	sts	0x0267, r1
				correctPinAddr = CORRECTPINSTARTADDR;
 988:	10 92 fb 01 	sts	0x01FB, r1
				if(getCorrectPinLength() != getInputPinLength()){
 98c:	d8 df       	rcall	.-80     	; 0x93e <getCorrectPinLength>
 98e:	c8 2f       	mov	r28, r24
 990:	c6 df       	rcall	.-116    	; 0x91e <getInputPinLength>
 992:	c8 13       	cpse	r28, r24
					isCorrect = 0;
 994:	10 92 61 02 	sts	0x0261, r1
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 998:	00 91 61 02 	lds	r16, 0x0261
 99c:	0b c0       	rjmp	.+22     	; 0x9b4 <TickFct_CheckPin+0x5e>
					if(eeprom_read_byte(correctPinAddr + checkCounter) != inputPin[checkCounter]){
 99e:	cf 5a       	subi	r28, 0xAF	; 175
 9a0:	dd 4f       	sbci	r29, 0xFD	; 253
 9a2:	98 81       	ld	r25, Y
 9a4:	89 17       	cp	r24, r25
 9a6:	19 f0       	breq	.+6      	; 0x9ae <TickFct_CheckPin+0x58>
						isCorrect = 0;
 9a8:	10 92 61 02 	sts	0x0261, r1
						break;
 9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <TickFct_CheckPin+0x82>
					}
					++checkCounter;
 9ae:	1f 5f       	subi	r17, 0xFF	; 255
 9b0:	10 93 67 02 	sts	0x0267, r17
				checkCounter = 0;
				correctPinAddr = CORRECTPINSTARTADDR;
				if(getCorrectPinLength() != getInputPinLength()){
					isCorrect = 0;
				}
				while(eeprom_read_byte(correctPinAddr + checkCounter) != '\0' && isCorrect){
 9b4:	10 91 67 02 	lds	r17, 0x0267
 9b8:	c1 2f       	mov	r28, r17
 9ba:	d0 e0       	ldi	r29, 0x00	; 0
 9bc:	ce 01       	movw	r24, r28
 9be:	5f d1       	rcall	.+702    	; 0xc7e <__eerd_byte_m1284>
 9c0:	88 23       	and	r24, r24
 9c2:	19 f0       	breq	.+6      	; 0x9ca <TickFct_CheckPin+0x74>
 9c4:	01 11       	cpse	r16, r1
 9c6:	eb cf       	rjmp	.-42     	; 0x99e <TickFct_CheckPin+0x48>
 9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <TickFct_CheckPin+0x82>
						isCorrect = 0;
						break;
					}
					++checkCounter;
				}
				if(isCorrect){
 9ca:	80 91 61 02 	lds	r24, 0x0261
 9ce:	88 23       	and	r24, r24
 9d0:	19 f0       	breq	.+6      	; 0x9d8 <TickFct_CheckPin+0x82>
					lockedFlag = 0;
 9d2:	10 92 fe 01 	sts	0x01FE, r1
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <TickFct_CheckPin+0x88>
				}
				else{
					lockedFlag = 1;
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	80 93 fe 01 	sts	0x01FE, r24
				}
				checkPinFlag = 0;
 9de:	10 92 ff 01 	sts	0x01FF, r1
		case checkInit:
			state = checkWait;
			break;
		case checkWait:
			if(checkPinFlag){
				state = checkCheck;
 9e2:	82 e0       	ldi	r24, 0x02	; 2
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <TickFct_CheckPin+0x96>
			break;
		case checkCheck:
			state = checkWait;
			break;
		default:
			state = checkInit;
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case checkCheck:
			break;
	}
	return state;
}
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	1f 91       	pop	r17
 9f2:	0f 91       	pop	r16
 9f4:	08 95       	ret

000009f6 <__vector_13>:
	}
	return state;
}

ISR(TIMER1_COMPA_vect)
{
 9f6:	1f 92       	push	r1
 9f8:	0f 92       	push	r0
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	0f 92       	push	r0
 9fe:	11 24       	eor	r1, r1
 a00:	0b b6       	in	r0, 0x3b	; 59
 a02:	0f 92       	push	r0
 a04:	ef 92       	push	r14
 a06:	ff 92       	push	r15
 a08:	0f 93       	push	r16
 a0a:	1f 93       	push	r17
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	ef 93       	push	r30
 a26:	ff 93       	push	r31
 a28:	c0 e0       	ldi	r28, 0x00	; 0
 a2a:	d2 e0       	ldi	r29, 0x02	; 2
 a2c:	0f 2e       	mov	r0, r31
 a2e:	fc e3       	ldi	r31, 0x3C	; 60
 a30:	ef 2e       	mov	r14, r31
 a32:	f2 e0       	ldi	r31, 0x02	; 2
 a34:	ff 2e       	mov	r15, r31
 a36:	f0 2d       	mov	r31, r0
 a38:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < 5; ++i){
		if( tasks[i].elapsedTime >= tasks[i].period){
 a3a:	4e 81       	ldd	r20, Y+6	; 0x06
 a3c:	5f 81       	ldd	r21, Y+7	; 0x07
 a3e:	68 85       	ldd	r22, Y+8	; 0x08
 a40:	79 85       	ldd	r23, Y+9	; 0x09
 a42:	8a 81       	ldd	r24, Y+2	; 0x02
 a44:	9b 81       	ldd	r25, Y+3	; 0x03
 a46:	ac 81       	ldd	r26, Y+4	; 0x04
 a48:	bd 81       	ldd	r27, Y+5	; 0x05
 a4a:	48 17       	cp	r20, r24
 a4c:	59 07       	cpc	r21, r25
 a4e:	6a 07       	cpc	r22, r26
 a50:	7b 07       	cpc	r23, r27
 a52:	58 f0       	brcs	.+22     	; 0xa6a <__vector_13+0x74>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 a54:	ea 85       	ldd	r30, Y+10	; 0x0a
 a56:	fb 85       	ldd	r31, Y+11	; 0x0b
 a58:	88 81       	ld	r24, Y
 a5a:	99 81       	ldd	r25, Y+1	; 0x01
 a5c:	09 95       	icall
 a5e:	99 83       	std	Y+1, r25	; 0x01
 a60:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 a62:	1e 82       	std	Y+6, r1	; 0x06
 a64:	1f 82       	std	Y+7, r1	; 0x07
 a66:	18 86       	std	Y+8, r1	; 0x08
 a68:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += 1;
 a6a:	f8 01       	movw	r30, r16
 a6c:	86 81       	ldd	r24, Z+6	; 0x06
 a6e:	97 81       	ldd	r25, Z+7	; 0x07
 a70:	a0 85       	ldd	r26, Z+8	; 0x08
 a72:	b1 85       	ldd	r27, Z+9	; 0x09
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	a1 1d       	adc	r26, r1
 a78:	b1 1d       	adc	r27, r1
 a7a:	86 83       	std	Z+6, r24	; 0x06
 a7c:	97 83       	std	Z+7, r25	; 0x07
 a7e:	a0 87       	std	Z+8, r26	; 0x08
 a80:	b1 87       	std	Z+9, r27	; 0x09
 a82:	2c 96       	adiw	r28, 0x0c	; 12
}

ISR(TIMER1_COMPA_vect)
{
	unsigned char i;
	for(i = 0; i < 5; ++i){
 a84:	ce 15       	cp	r28, r14
 a86:	df 05       	cpc	r29, r15
 a88:	b9 f6       	brne	.-82     	; 0xa38 <__vector_13+0x42>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 a8a:	ff 91       	pop	r31
 a8c:	ef 91       	pop	r30
 a8e:	df 91       	pop	r29
 a90:	cf 91       	pop	r28
 a92:	bf 91       	pop	r27
 a94:	af 91       	pop	r26
 a96:	9f 91       	pop	r25
 a98:	8f 91       	pop	r24
 a9a:	7f 91       	pop	r23
 a9c:	6f 91       	pop	r22
 a9e:	5f 91       	pop	r21
 aa0:	4f 91       	pop	r20
 aa2:	3f 91       	pop	r19
 aa4:	2f 91       	pop	r18
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	ff 90       	pop	r15
 aac:	ef 90       	pop	r14
 aae:	0f 90       	pop	r0
 ab0:	0b be       	out	0x3b, r0	; 59
 ab2:	0f 90       	pop	r0
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	0f 90       	pop	r0
 ab8:	1f 90       	pop	r1
 aba:	18 95       	reti

00000abc <main>:

int main(void)
{
	DDRA = 0xFF;	PORTA = 0x00;
 abc:	8f ef       	ldi	r24, 0xFF	; 255
 abe:	81 b9       	out	0x01, r24	; 1
 ac0:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xF0;	PORTB = 0x0F;
 ac2:	90 ef       	ldi	r25, 0xF0	; 240
 ac4:	94 b9       	out	0x04, r25	; 4
 ac6:	9f e0       	ldi	r25, 0x0F	; 15
 ac8:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 aca:	87 b9       	out	0x07, r24	; 7
 acc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0x00;	PORTD = 0xFF;
 ace:	1a b8       	out	0x0a, r1	; 10
 ad0:	8b b9       	out	0x0b, r24	; 11
	eeprom_write_byte(correctPinAddr++, '0');
 ad2:	80 91 fb 01 	lds	r24, 0x01FB
 ad6:	91 e0       	ldi	r25, 0x01	; 1
 ad8:	98 0f       	add	r25, r24
 ada:	90 93 fb 01 	sts	0x01FB, r25
 ade:	60 e3       	ldi	r22, 0x30	; 48
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	d5 d0       	rcall	.+426    	; 0xc8e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '0');
 ae4:	80 91 fb 01 	lds	r24, 0x01FB
 ae8:	91 e0       	ldi	r25, 0x01	; 1
 aea:	98 0f       	add	r25, r24
 aec:	90 93 fb 01 	sts	0x01FB, r25
 af0:	60 e3       	ldi	r22, 0x30	; 48
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	cc d0       	rcall	.+408    	; 0xc8e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '0');
 af6:	80 91 fb 01 	lds	r24, 0x01FB
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	98 0f       	add	r25, r24
 afe:	90 93 fb 01 	sts	0x01FB, r25
 b02:	60 e3       	ldi	r22, 0x30	; 48
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	c3 d0       	rcall	.+390    	; 0xc8e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '0');
 b08:	80 91 fb 01 	lds	r24, 0x01FB
 b0c:	91 e0       	ldi	r25, 0x01	; 1
 b0e:	98 0f       	add	r25, r24
 b10:	90 93 fb 01 	sts	0x01FB, r25
 b14:	60 e3       	ldi	r22, 0x30	; 48
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	ba d0       	rcall	.+372    	; 0xc8e <__eewr_byte_m1284>
	eeprom_write_byte(correctPinAddr++, '\0');
 b1a:	80 91 fb 01 	lds	r24, 0x01FB
 b1e:	91 e0       	ldi	r25, 0x01	; 1
 b20:	98 0f       	add	r25, r24
 b22:	90 93 fb 01 	sts	0x01FB, r25
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	b1 d0       	rcall	.+354    	; 0xc8e <__eewr_byte_m1284>
	initUSART(0);
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	a7 db       	rcall	.-2226   	; 0x27e <initUSART>
	initUSART(1);
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	a5 db       	rcall	.-2230   	; 0x27e <initUSART>
	LCD_init();
 b34:	72 db       	rcall	.-2332   	; 0x21a <LCD_init>
	tasks[0].state = controllerinit;
 b36:	10 92 01 02 	sts	0x0201, r1
 b3a:	10 92 00 02 	sts	0x0200, r1
	tasks[0].period = 1;
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	a0 e0       	ldi	r26, 0x00	; 0
 b44:	b0 e0       	ldi	r27, 0x00	; 0
 b46:	80 93 02 02 	sts	0x0202, r24
 b4a:	90 93 03 02 	sts	0x0203, r25
 b4e:	a0 93 04 02 	sts	0x0204, r26
 b52:	b0 93 05 02 	sts	0x0205, r27
	tasks[0].elapsedTime = 1;
 b56:	80 93 06 02 	sts	0x0206, r24
 b5a:	90 93 07 02 	sts	0x0207, r25
 b5e:	a0 93 08 02 	sts	0x0208, r26
 b62:	b0 93 09 02 	sts	0x0209, r27
	tasks[0].TickFct = &TickFct_Controller;
 b66:	8a e1       	ldi	r24, 0x1A	; 26
 b68:	93 e0       	ldi	r25, 0x03	; 3
 b6a:	90 93 0b 02 	sts	0x020B, r25
 b6e:	80 93 0a 02 	sts	0x020A, r24
	
	tasks[1].state = bluetoothWait;
 b72:	10 92 0d 02 	sts	0x020D, r1
 b76:	10 92 0c 02 	sts	0x020C, r1
	tasks[1].period = 5;
 b7a:	85 e0       	ldi	r24, 0x05	; 5
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	a0 e0       	ldi	r26, 0x00	; 0
 b80:	b0 e0       	ldi	r27, 0x00	; 0
 b82:	80 93 0e 02 	sts	0x020E, r24
 b86:	90 93 0f 02 	sts	0x020F, r25
 b8a:	a0 93 10 02 	sts	0x0210, r26
 b8e:	b0 93 11 02 	sts	0x0211, r27
	tasks[1].elapsedTime = 5;
 b92:	80 93 12 02 	sts	0x0212, r24
 b96:	90 93 13 02 	sts	0x0213, r25
 b9a:	a0 93 14 02 	sts	0x0214, r26
 b9e:	b0 93 15 02 	sts	0x0215, r27
	tasks[1].TickFct = &TickFct_BluetoothReceiver;
 ba2:	2a ee       	ldi	r18, 0xEA	; 234
 ba4:	31 e0       	ldi	r19, 0x01	; 1
 ba6:	30 93 17 02 	sts	0x0217, r19
 baa:	20 93 16 02 	sts	0x0216, r18
	
	tasks[2].state = keypadWait1;
 bae:	10 92 19 02 	sts	0x0219, r1
 bb2:	10 92 18 02 	sts	0x0218, r1
	tasks[2].period = 10;
 bb6:	4a e0       	ldi	r20, 0x0A	; 10
 bb8:	50 e0       	ldi	r21, 0x00	; 0
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	40 93 1a 02 	sts	0x021A, r20
 bc2:	50 93 1b 02 	sts	0x021B, r21
 bc6:	60 93 1c 02 	sts	0x021C, r22
 bca:	70 93 1d 02 	sts	0x021D, r23
	tasks[2].elapsedTime = 10;
 bce:	40 93 1e 02 	sts	0x021E, r20
 bd2:	50 93 1f 02 	sts	0x021F, r21
 bd6:	60 93 20 02 	sts	0x0220, r22
 bda:	70 93 21 02 	sts	0x0221, r23
	tasks[2].TickFct = &TickFct_KeypadReceiver;
 bde:	26 e5       	ldi	r18, 0x56	; 86
 be0:	32 e0       	ldi	r19, 0x02	; 2
 be2:	30 93 23 02 	sts	0x0223, r19
 be6:	20 93 22 02 	sts	0x0222, r18
	
	tasks[3].state = checkInit;
 bea:	10 92 25 02 	sts	0x0225, r1
 bee:	10 92 24 02 	sts	0x0224, r1
	tasks[3].period = 15;
 bf2:	4f e0       	ldi	r20, 0x0F	; 15
 bf4:	50 e0       	ldi	r21, 0x00	; 0
 bf6:	60 e0       	ldi	r22, 0x00	; 0
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	40 93 26 02 	sts	0x0226, r20
 bfe:	50 93 27 02 	sts	0x0227, r21
 c02:	60 93 28 02 	sts	0x0228, r22
 c06:	70 93 29 02 	sts	0x0229, r23
	tasks[3].elapsedTime = 15;
 c0a:	40 93 2a 02 	sts	0x022A, r20
 c0e:	50 93 2b 02 	sts	0x022B, r21
 c12:	60 93 2c 02 	sts	0x022C, r22
 c16:	70 93 2d 02 	sts	0x022D, r23
	tasks[3].TickFct = &TickFct_CheckPin;
 c1a:	2b ea       	ldi	r18, 0xAB	; 171
 c1c:	34 e0       	ldi	r19, 0x04	; 4
 c1e:	30 93 2f 02 	sts	0x022F, r19
 c22:	20 93 2e 02 	sts	0x022E, r18
	
	tasks[4].state = usartInit;
 c26:	10 92 31 02 	sts	0x0231, r1
 c2a:	10 92 30 02 	sts	0x0230, r1
	tasks[4].period = 5;
 c2e:	80 93 32 02 	sts	0x0232, r24
 c32:	90 93 33 02 	sts	0x0233, r25
 c36:	a0 93 34 02 	sts	0x0234, r26
 c3a:	b0 93 35 02 	sts	0x0235, r27
	tasks[4].elapsedTime = 5;
 c3e:	80 93 36 02 	sts	0x0236, r24
 c42:	90 93 37 02 	sts	0x0237, r25
 c46:	a0 93 38 02 	sts	0x0238, r26
 c4a:	b0 93 39 02 	sts	0x0239, r27
	tasks[4].TickFct = &TickFct_USART;
 c4e:	84 e9       	ldi	r24, 0x94	; 148
 c50:	91 e0       	ldi	r25, 0x01	; 1
 c52:	90 93 3b 02 	sts	0x023B, r25
 c56:	80 93 3a 02 	sts	0x023A, r24

unsigned short tasksNum;
unsigned short tasksPeriodGCD;

void TimerSet(unsigned long ms){
	TCNT1 = 0;		//Initialize avr counter
 c5a:	10 92 85 00 	sts	0x0085, r1
 c5e:	10 92 84 00 	sts	0x0084, r1
					
	OCR1A = 125 * ms;	// AVR output compare register OCR1A.
 c62:	8d e7       	ldi	r24, 0x7D	; 125
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	90 93 89 00 	sts	0x0089, r25
 c6a:	80 93 88 00 	sts	0x0088, r24
	
	TimerSet(1);
	TimerOn();
 c6e:	a0 da       	rcall	.-2752   	; 0x1b0 <TimerOn>
 c70:	ff cf       	rjmp	.-2      	; 0xc70 <main+0x1b4>

00000c72 <__tablejump2__>:
 c72:	ee 0f       	add	r30, r30
 c74:	ff 1f       	adc	r31, r31

00000c76 <__tablejump__>:
 c76:	05 90       	lpm	r0, Z+
 c78:	f4 91       	lpm	r31, Z
 c7a:	e0 2d       	mov	r30, r0
 c7c:	09 94       	ijmp

00000c7e <__eerd_byte_m1284>:
 c7e:	f9 99       	sbic	0x1f, 1	; 31
 c80:	fe cf       	rjmp	.-4      	; 0xc7e <__eerd_byte_m1284>
 c82:	92 bd       	out	0x22, r25	; 34
 c84:	81 bd       	out	0x21, r24	; 33
 c86:	f8 9a       	sbi	0x1f, 0	; 31
 c88:	99 27       	eor	r25, r25
 c8a:	80 b5       	in	r24, 0x20	; 32
 c8c:	08 95       	ret

00000c8e <__eewr_byte_m1284>:
 c8e:	26 2f       	mov	r18, r22

00000c90 <__eewr_r18_m1284>:
 c90:	f9 99       	sbic	0x1f, 1	; 31
 c92:	fe cf       	rjmp	.-4      	; 0xc90 <__eewr_r18_m1284>
 c94:	1f ba       	out	0x1f, r1	; 31
 c96:	92 bd       	out	0x22, r25	; 34
 c98:	81 bd       	out	0x21, r24	; 33
 c9a:	20 bd       	out	0x20, r18	; 32
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	fa 9a       	sbi	0x1f, 2	; 31
 ca2:	f9 9a       	sbi	0x1f, 1	; 31
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	01 96       	adiw	r24, 0x01	; 1
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
